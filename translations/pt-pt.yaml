# Portuguese

global.title: "Aprenda o layout de CSS"
global.short_title: "CSS"
global.home: "Ínicio"
global.toc: "Tabela de Conteúdos"
global.next: "Próximo"
global.previous: "Anterior"
global.feedback: "Problemas / Feedback"

util.extra_credit: "crédito extra"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Ínicio"
util.nav.2: "Menu Taco"
util.nav.3: "Lista Draft"
util.nav.4: "Horas"
util.nav.5: "Direcções"
util.nav.6: "Contacto"

index.1: "Este site ensina os fundamentos de CSS que são utilizados em qualquer layout de websites."
index.2: "Suponho que tu já sabes o que são selectores, propriedades e valores. E que tu provávelmente sabes uma coisa ou duas coisas sobre layout, embora possa ser ainda uma actividade que te provoque alguma angustia. Se queres aprender HTML e CSS do ínicio, deves verifiar <a href=\"http://learn.shayhowe.com/html-css/\">este tutorial</a>. Caso contrário, vamos ver se conseguimos poupar alguma angustia no teu próximo projeto."
index.translator: ""
index.get_started: "Começar"

no_layout.title: "sem layout"
no_layout.1: "Não ter qualquer tipo de layout é quase ok se tudo o que queres é uma grande coluna de conteudo. No entanto, se o utilizado tornar a janela do browser realmente larga, torna-se um pouco irritante de ler: após cada linha os teus olhos de viajar uma longa distância da direita para a esquerda para a próxima linha. Tenta Tenta mudar o tamanho do teu browser para entenderes o que digo!"
no_layout.2: "Antes de arranjarmos este problema, vamos ter a certeza que estamos entendidos numa importante propriedade de <code>display</code>."

display.title: "a propriedade \"display\""
display.intro: "<code>display</code> é a propriedade de CSS mais importante para controlar o layout. Qualquer elemento tem um valor de display por defeito, dependendo do tipo de elemento. O valor por defeito para a maioria dos elementos é normalmente <code>block</code> ou <code>inline</code>. Um elemento block é usualmente chamado de block-level. Um elemento inline é sempre e simplesmente chamado inline."
display.block.title: "block"
display.block: "<code>div</code> é um elemento block-level standard. Um elemento block-level começa numa nova linha e alonga-se da esquerda até á direita o mais que conseguir. Outros elementos block-level comuns são <code>p</code> e <code>form</code>, e novos no HTML5 são <code>header</code>, <code>footer</code>, <code>section</code>, e mais."
display.inline.title: "inline"
display.inline.1: "<code>span</code> é o elemento inline standard. Um elemento inline consegue envolver algum texto dentro de um parágrafo"
display.inline.2: "gostar disto"
display.inline.3: "sem quebrar o fluxo do parágrafo. O elemento <code>a</code> é o elemento inline mais comum, uma vez que os utilizas para atalhos."
display.none.title: "nenhum"
display.none.1: "Outro valor comum para display é <code>none</code>. Alguns elementos especializados como o <code>script</code> utilizam isto como valor por defeito. É comum utilizar com JavaScript para esconder e mostrar elementos sem realmente os apagar e re-criar."
display.none.2: "Isto é diferente de <code>visibility</code>. Atribuir ao <code>display</code>  o valor <code>none</code> não deixará espaço onde o elemento supostamente ficasse, mas <code>visibility: hidden;</code> deixará um espaço vazio."
display.other.title: "outros valores de display"
display.other: "Existem outros valores mais exóticos para display, como <code>list-item</code> e <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Aqui está uma lista exaustiva</a>. Discutiremos mais tarde <code>inline-block</code> e <code>flex</code>."
display.extra: "Como mencionei, todo o elemento tem um tipo de display por defeito. Contudo, podes <em>sempre</em> anular isto! Apesar de fazer sentido tornar uma div inline, podes utilizar isto para customizar a apresentação de elementos que têm uma semantica particular. Um exemplo comum é tornar elementos <code>li</code> inline para menus horizontais."

margin_auto.title: "margin: auto;"
margin_auto.1: "Colocando a <code>width</code> de um elemento block-level previne o mesmo de esticar até ás fronteiras do recipiente à esquerda e direita. Então, podes configurar a margem esquerda e direita com <code>auto</code> para centrar o elemento horizontalmente dentro do seu recipiente. O elemento vai ficar com a largura que especificaste, o resto do espaço será então dividido em partes iguais entre as duas margens."
margin_auto.2: "O unico problem que ocorre quando a janela do browser é mais pequena que a largura do teu elemento. O browser resolve isto criando uma scrollbar horizontal na página. Vamos melhorar esta situação..."

max_width.title: "max-width"
max_width.1: "Utilizando <code>max-width</code> em vez de <code>width</code>, nesta situação, irá melhorar a maneira como o browser manipula janelas pequenas. Isto é importante quando se cria um site também para dispositivos móveis. Re-dimensiona esta página para verificares!"
max_width.2: "A propósito, <code>max-width</code> é <a href=\"http://caniuse.com/#search=max-width\">suportado por todos os browsers principais</a> incluindo o IE7+ portanto não deves ter receio de utilizar."

box_model.title: "o box model"
box_model.intro: "Enquanto falamos sobre width, devemos falar também sobre algumas advertências sobre a mesma: o <em>box model</em>. Quando configura a largura de um elemento, o elemento pode eventualmente aparecer maior do que o especificado: a fronteira do elemento e espaçamento irão esticar para lá da largura especificada. Observa o seguinte exemplo, onde dois elementos com o mesmo valor de largura acabam por resultar em diferentes tamanhos."
box_model.simple: "Sou mais pequeno..."
box_model.fancy: "E eu sou maior!"
box_model.outro: "Durante gerações, a solução para este problem tem sido a matemática. Autores de CSS tentaram sempre escrever apenas o valor mais pequeno da largura pretendida, subtraingo o preenchimento e fronteira. Felizmente, já não tens de continuar a fazer mais isto..."

box_sizing.title: "box-sizing"
box_sizing.1: "Após gerações, as pessoas aperceberam-se que a matemática não é divertida, então foi criada uma nova propriedade de CSS chamada <code>box-sizing</code>. Quando configuras <code>box-sizing: border-box;</code> num elemento, o espaçamento e fronteira desse elemento deixa de aumentar a sua largura. Aqui está o mesmo elemento da página anterior, mas com <code>box-sizing: border-box;</code> em ambos os elementos:"
box_sizing.simple: "Agora temos o mesmo tamanho!"
box_sizing.fancy: "Viva!"
box_sizing.2: "Uma vez que isto é muito melhor, alguns autores queriam que todos os elementos em todas as suas páginas funcionassem sempre desta maneira. Esses autores colocam o seguinte CSS nas suas páginas:"
box_sizing.3: "Isto assegura que todos os elementos são sempre dimensionados desta maneira mais intuitiva."
box_sizing.4: "Uma vez que <code>box-sizing</code> é bastante novo, deves utilizar por agora os prefixos <code>-webkit-</code> e <code>-moz-</code>, como eu tenho nestes exemplos. Esta técnica permite activar características experimentais em browsers expecificos. Mantém também em mente que isto é <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "posição"
position.intro: "De forma a criar layouts mais complexos, precisamos discutir a propriedade <code>position</code>. Têm um grupo de valores possíveis, e os seus nomes não fazem sentido e são impossíveis de recordar. Vamos lá passar por eles um a um, talvez devas guardar esta página também."
position.static.title: "static"
position.static.1: "<code>static</code> é o valor por defeito. Um elemento com <code>position: static;</code> não é posicionado de uma forma qualquer. Diz-se que um elemento estático está <em>não posicionado</em> e um elemento com a sua posição com outro valor qualquer diz-se <em>posicionado</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> comporta-se igual a <code>static</code> a não ser que adiciones algumas propriedades extra."
position.relative.2: "Atribuindo as propriedades <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code> de um elemento relativamente posicionado irá fazer com que seja ajustado para longe da sua posição normal. Outro conteúdo não será ajustado para caber dentro de algum espaço que sobre do elemento."
position.fixed.title: "fixed"
position.fixed.1: "Um elemento fixo é posicionado relativamente ao viewport, significa que fica sempre no mesmo sitio, mesmo que faça scroll da página. Com <code>relative</code>, são utilizadas as propriedades <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code>."
position.fixed.2: "Tenho a certeza que notaste o elemento fixo no canto inferior direito da página. Estou a dar-te permissão para lhe dares atenção agora. Aqui está o CSS que o coloca lá:"
position.fixed.3: "Um elemento fixo não deixa espaço na página onde estaria normalment localizado."
position.fixed.4: "Browsers de dispositivos móveis têm um apoio instável para fixar. <a href=\"http://bradfrost.com/blog/mobile/fixed-position/\">Aprender aqui mais sobre a situação</a>."
position.fixed.example: "Hello! Don't pay attention to me yet."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> é o valor de posicionamento mais complicado. <code>absolute</code> comporta-se como <code>fixed</code> só que relativo <em>ao posicionamento do antecessor mais próximo</em> em vez de relativo ao viewport. Se um elemento positionado absolutamente não tem um antecessor posicionado, utiliza o corpo do documento, e continua a mover-se igualmente com o scroll da página. Lembra-te, um elemtno \"posicionado\" é aquele em que a posição é tudo excepto <code>static</code>."
position.absolute.2: "Aqui está um exemplo simples:"
position.absolute.relative: "Este elemento está posicionado relativamente. Se este elemento tivesse <code>position: static;</code> o seu filho posicionado absolutamente iria escapar e ficaria posicionado relativo ao corpo do documento."
position.absolute.absolute: "Este elemento está posicionado absolutamente. Está posicionado relativamente ao seu pai."
position.absolute.3: "Estas coisas são complicadas, mas é essencial para criar grandes layouts com CSS. Na próxima página vamos utilizar <code>position</code> num exemplo mais prático."

position_example.title: "exemplo de posicionamento"
position_example.1: "Esta coisa do posicionamento pode fazer um pouco mais de sentido num exemplo prático. Por baixo está um layout realista de uma página."
position_example.section.1: "O estilo <code>margin-left</code> para a <code>section</code> asssegura-se que existe espaço para <code>nav</code>."
position_example.section.2: "Observa o que acontece quando redimensionas o teu browser. Funciona de forma agradável!"
position_example.2: "Este exemplo funciona porque o recipiente é mais alto que a nav. Caso não fosse, a nav iria transbordar para fora of do seu recipiente. Nas próximas páginas vamos discutir outras técnicas de layout the têm diferentes prós e contras."
position_example.footer: "Se utilizas um cabeçalho fixo ou rodapé, assegura-te que existe espaço para o mesmo! Eu coloco uma <code>margin-bottom</code> no <code>body</code>."

float.title: "float"
float.1: "Outra propriedade CSS utilizada no layout é <code>float</code>. O pretendido com float é envolver texto á volta de imagens, assim:"

clear.title: "clear"
clear.floating: "Sinto que estou a flutuar!"
clear.1: "A propriedade <code>clear</code> é importante para controlar o comportamento dos flutuadores. Compare estes dois exemplos:"
clear.2: "Neste caso, o elemento <code>section</code> está actualmente depois de <code>div</code>. Contudo, desde que <code>div</code> flutua para esquerda, o que acontece é isto: o texto na <code>section</code> flutua á volta da <code>div</code> e a <code>section</code> envolve tudo o resto. Então e se quisessemos que a <code>section</code> aparecesse mesmo depois do elemento flutuado?"
clear.3: "Utilizando <code>clear</code> movemos agora esta secção para debaixo do elemento flutuado <code>div</code>. Utilizas o valor <code>left</code> para limpar elementos flutuados para a esquerda. Podes também limpar com <code>right</code> e <code>both</code>."

clearfix.title: "o hack do clearfix"
clearfix.1: "Aqui está uma coisa estranha, má que pode ocorrer quando se utilizam flutuadores:"
clearfix.2: "Uh oh... esta imagem é mais alta que o elemento que a contem, e está a flutuar, então está a sair para fora do seu recipiente!"
clearfix.3: "Boo. Existe uma maneira de corrigir isto, mas é feia. Chama-se <em>clearfix hack</em>."
clearfix.4: "Vamos tentar adicionar este novo CSS:"
clearfix.5: "Agora vamos ver o que acontece:"
clearfix.6: "Muito melhor!"
clearfix.7: "Isto funciona com browsers modernos. Se quiseres suportar IE6, vais querer adicionar o seguinte:"
clearfix.8: "Existem browsers exóticos que podem necessitar atenção extra. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">O mundo de clearfixing é bastante assustador</a>, mas esta solução simples funcionará para a grande maioria dos browsers de hoje em dia."

float_layout.title: "exemplo de layout com float"
float_layout.1: "É muito comum fazer layouts inteiros utilizando <code>float</code>. Aqui está o mesmo layout que fizemos anteriormente com <code>position</code>, mas utilizando <code>float</code>."
float_layout.2: "Este exemplo funciona como o último. Observa que colocamos um <code>clearfix</code> no recipiente. Não é necessário neste exemplo, mas seria se <code>nav</code> fosse mais longo do que o conteudo do elemento não flutuante."

percent.title: "percentagem de largura"
percent.1: "Percentagem é uma unidade de medida relativa ao bloco recipiente. É bom para imagens: aqui fazemos com que uma imagem seja sempre 50% da largura do seu recipiente. Tenta diminuir a página para ver o que acontece!"
percent.2: "Podes até utilizar <code>min-width</code> e <code>max-width</code> para limitar o quanto a imagem pode ficar grande ou pequena!"
percent.layout.title: "layout com percentagem de largura"
percent.layout.1: "Podes utilizar percentagem para o layout, mas isto requer mais trabalho. No exemplo seguinte, o conteudo <code>nav</code> começa a envolver de uma forma desagradável quando a janela é demasiado estreita. Resume-se ao que funciona para o teu conteúdo."
percent.layout.2: "Quando este layout é demasiado estreito, a <code>nav</code> fica apertada. Pior, não podes utilizar <code>min-width</code> na nav para corrigir, porque a coluna da direita não o irá respeitar."

media_queries.title: "media queries"
media_queries.1: "\"Responsive Design\" é a estratégia de fazer um site que \"responde\" ao browser e dispositivo onde está a ser apresentado... mostrando-se de forma sempre expectacular."
media_queries.2: "Media queries é a ferramenta mais potente para fazer isto. Vamos pegar no nosso layout que utiliza percentagens de largura e mostra-lo em uma coluna quando o browser é demasiado pequeno para ter o menu numa barra lateral:"
media_queries.3: "Agora quando redimensionas o teu browser é ainda mais fixe que nunca!"
media_queries.4: "Tada! Agora o nosso layout parece bom mesmo num browser móvel. Aqui ficam <a href=\"http://mediaqueri.es/\">alguns sites populares que utilizam media queries desta maneira</a>. Existe muito mais que consegues detectar do que <code>min-width</code> e <code>max-width</code>: verifica <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">a documentação MDN</a> para aprender mais."
media_queries.5: "Podes fazer o teu layout parecer ainda melhor no móvel utilizando <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Podes criar uma grelha de caixas que se enche o a largura do browser e envolve agradàvelmente. Isto é possivel desde á bastante tempo utilizando <code>float</code>, mas agora com <code>inline-block</code> é ainda mais fácil. Vamos olhar para exemplos de ambas as maneiras."
inline_block.hard_way.title: "A maneira dura (utilizando float)"
inline_block.hard_way.box: "Estou a flutuar!"
inline_block.hard_way.after: "Estou a utilizar clear para não flutuar para perto das caixas acima."
inline_block.easy_way.title: "A maneira fácil (utilizando inline-block)"
inline_block.easy_way.info: "Tu consegues alcançar o mesmo efeito utilizando o valor <code>inline-block</code> da propriedade <code>display</code>."
inline_block.easy_way.box: "Sou um bloco inline!"
inline_block.easy_way.after: "Neste caso não preciso utiliza o <code>clear</code>. Nice!"
inline_block.2: "Tu tens que fazer trabalho extra para <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">o IE6 e IE7 suportarem</a> o <code>inline-block</code>. Algumas vezes as pessoas falam sobre o <code>inline-block</code> disparar qualquer coisa chamada <code>hasLayout</code>, apesar de precisares saber sobre isto para suportar browsers antigos. Segue o link anterior sobre o suporte de IE6 e IE7 se estiveres curioso para aprender mais. Caso contrário, vamos continuar."

inline_block_layout.title: "layout inline-block"
inline_block_layout.1: "Podes também utilizar <code>inline-block</code> para layouts. Existem algumas coisas a ter em mente:"
inline_block_layout.caveat.1: "Os elementos <code>inline-block</code> são afectados pela propriedade <code>vertical-align</code>, que tu provávelmente queres configurar com <code>top</code>."
inline_block_layout.caveat.2: "Precisas configurar a largura de cada coluna"
inline_block_layout.caveat.3: "Existirá uma folga entre as colunas caso exista algum espaço em branco entre elas no HTML"
inline_block_layout.tada: "Tada!"

column.title: "coluna"
column.1: "Existe um novo conjunto de propriedades CSS que te deixam construir fácilmente text multi-coluna. Dá uma espreita:"
column.2: "Colunas CSS são muito recentes, portanto precisas utilizar prefixos, e não funcionará <a href=\"http://caniuse.com/#search=column\">no IE9 ou no Opera Mini</a>. Existem mais algumas pripriedades relacionadas com colunas, portanto <a href=\"http://www.quirksmode.org/css/multicolumn.html\">clica aqui para ler mais</a>. Caso contrário, seguimos para o próximo tópico."

flexbox.title: "flexbox"
flexbox.1: "O novo modo de layout <code>flexbox</code> foi composto para redefinir como nós fazemos o layout em CSS. Infelizmente a especificação tem mudado muito recentemente, portanto é implementada de forma diferente nos diferentes browsers. Contudo, gostaria de partilhar um par de exemplos para poderes saber o que vêm ai. Estes exemplos actualmente funcionam apenas na implementação flexbox do Chrome, baseada na <a href=\"http://www.w3.org/TR/css3-flexbox/\">última versão do standard</a>."
flexbox.2: "Existem por ai muitos recursos desactualizados sobre flexbox. Se queres aprender mais sobre flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">começa por aqui</a> para aprender como identificar se um recurso é actual ou não. Eu escrevi um <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">artigo detalhado utilizando a mais recente syntax</a>."
flexbox.3: "Existe muito mais que podes fazer com flexbos; estes são apenas alguns exemplos para te dar uma ideia:"
flexbox.simple.title: "Layout simples utilizando Flexbox"
flexbox.simple.1: "Flexbox é tão fácil!"
flexbox.fancy.title: "Layout Decorado utilizando Flexbox"
flexbox.fancy.1: "Vou ter 200px quando existe espaço, i vou encolher para 100px se não existir espaço, mas não menos."
flexbox.fancy.2: "Vou ter sempre 200px, independentemente do tamanho."
flexbox.fancy.3: "Vou encher até 1/3 da largura que restar."
flexbox.fancy.4: "Vou encher até 2/3 da largura que restar."
flexbox.centering.title: "Centrar utilizando Flexbox"
flexbox.centering.1: "Finalmente, é fácil centrar verticalmente qualquer coisa em CSS!"

frameworks.title: "plataformas css"
frameworks.1: "Devido ao layout CSS ser tão complicado, existem plataformas CSS por ai para ajudar a tornar mais fácil. Aqui estão algumas se quiseres verificar. Utilizar uma plataforma é uma boa ideia apenas se a plataforma realmente fizer o que precisas que o teu site faça. Não existe substituto para o conhecimento de como o CSS funciona."
frameworks.2: "E é isto! Se tens algum comentário sobre este site, por favor <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">contacta-me pelo Twitter</a>!"

about.title: "sobre este site"
about.credits: "Escrito e construido por <a href=\"http://incompl.com\">Greg Smith</a>. Desenhado por <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Trabalhamos na <a href=\"http://bocoup.com\">Bocoup</a>."