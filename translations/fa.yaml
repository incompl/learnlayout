# Farsi/Persian

rtl: true

global.title: "یادگیری پیکربندی با CSS"
global.short_title: "CSS"
global.home: "خانه"
global.toc: "فهرست مطالب"
global.next: "بعدی"
global.previous: "قبلی"
global.feedback: "گزارش خطا / بازخورد"

util.extra_credit: "توضیحات بیشتر"
util.ipsum: "نفس باد صبا مشک فشان خواهد شد/عالم پیر دگرباره جوان خواهد شد/ارغوان جام عقیقی به سمن خواهد داد/چشم نرگس به شقایق نگران خواهد شد/این تطاول که کشید از غم هجران بلبل/تا سراپرده گل نعره زنان خواهد شد/گر ز مسجد به خرابات شدم خرده مگیر/مجلس وعظ دراز است و زمان خواهد شد/ای دل ار عشرت امروز به فردا فکنی/مایه نقد بقا را که ضمان خواهد شد/ماه شعبان منه از دست قدح کاین خورشید/از نظر تا شب عید رمضان خواهد شد/گل عزیز است غنیمت شمریدش صحبت/که به باغ آمد از این راه و از آن خواهد شد/مطربا مجلس انس است غزل خوان و سرود/چند گویی که چنین رفت و چنان خواهد شد/حافظ از بهر تو آمد سوی اقلیم وجود/قدمی نه به وداعش که روان خواهد شد"
util.nav.1: "خانه"
util.nav.2: "فهرست مطالب"
util.nav.3: "پیش نویس"
util.nav.4: "تقویم"
util.nav.5: "مکان‌ها"
util.nav.6: "مخاطبان"

index.1: "این سایت پایه‌های CSS را که در پیکربندی وبسایت‌ها مورد استفاده قرار می‌گیرد آموزش می‌دهد."
index.2: "من فرض را بر آن می‌گیرم که شما از قبل می‌دانید که Selector‌ها، Property‌ها و Value‌ها چه هستند و چه معنی دارند؛ و همچنین شما باید بدانید که پیکربندی یعنی چه! و یا حداقل در حال یادگیری آن باشید. اگر که مبتدی هستید و می‌خواهید Html و CSS را فرا بگیرید من توصیه می‌کنم که از <a href=\"http://learn.shayhowe.com/html-css/\"> این لینک</a> آغاز کنید. در غیر این صورت اجازه دهید ببینیم که آیا ما می‌توانیم کمی از اضطراب شما را در پروژه ی بعدی تان کم کنیم یا نه!"
index.translator: "برگردان از <a href=\"http://mostafa.info\">مصطفی شاهوردی</a>"
index.get_started: "آغاز کنید"

no_layout.title: "بدون پیکربندی"
no_layout.1: "اگر شما یک ستون خیلی پهن از محتوا می‌خواهید، آنگاه ایرادی ندارد که از هیچ پیکربندی خاصی استفاده نکنید. اما اگر کاربر صفحه نمایشی بسیار پهن داشته باشد، آنگاه برایش خیلی دشوار خواهد بود که پس از خواندن یک خط طولانی و دراز چشمش را به عقب برگرداند تا ابتدای خط بعدی را پیدا کند. برای این که منظور من را بهتر بفهمید اندازه، پهنای پنجره‌ی مرورگر خود را تغییر اندازه بدهید!"
no_layout.2: "قبل از اینکه به حل کردن این مشکل بپردازیم، بگذارید تا کمی بیشتر به صفت بسیار مهم <code>display</code> بپردازیم."

display.title: "صفت «display»"
display.intro: "مهمترین صفت در CSS برای کنترل پیکربندی <code>display</code> است. هر عنصری، با توجه به نوعش، یک مقدار پیش فرض برای display دارد. معمولا این مقدار پیش فرض برای بیشتر عنصر‌ها <code>block</code> یا <code>inline</code> است. یک عنصر با <code>block</code> معمولا عنصر سطح بلاک خوانده می‌شود. به یک عنصر با <code>inline</code> عنصر درون خطی می‌گویند."
display.block.title: "block"
display.block: "<code>div</code> عنصر سطح بلاک استاندارد است. یک عنصر سطح بلاک از خط جدید آغاز می‌شود و از چپ و راست تا جایی که می‌تواند به کناره‌ها کشیده می‌شود. سایر عناصر معمول سطح بلاک عبارتند از <code>p</code> و <code>form</code> و در HTML5 عناصر جدیدتر  <code>header</code>، <code>footer</code>، <code>section</code> اضافه شده اند. عناصر زیاد دیگری هم وجود دارند."
display.inline.title: "inline"
display.inline.1: "<code>span</code> ‌عنصر استاندارد درون‌خطی است. یک عنصر درون‌خطی به متن درونش در هر پاراگراف می‌چسبد و آن را احاطه می‌کند.‌"
display.inline.2: "مثل این"
display.inline.3: "بدون این که برای سایر قسمت‌های پاراگراف مزاحمتی ایجاد کند. عنصر <code>a</code> رایج‌ترین عنصر درون‌خطی است، زیرا برای پیوند‌ها به کار می‌رود."
display.none.title: "none"
display.none.1: "یکی دیگر از مقادیر رایج برای display مقدار <code>none</code> است. برخی عنصرهای خاص مانند <code>script</code> از این مقدار به طور پیش‌فرض استفاده می‌‌کنند. در جاوا‌اسکریپت از این ویژگی برای پنهان نمودن پویای برخی از قسمت‌های صفحه، بدون حذف نمودن آنها استفاده می‌شود."
display.none.2: "این کار با پنهان‌سازی به کمک <code>visibility</code> تفاوت دارد. قرار دادن <code>display</code> به <code>none</code> جایی را که عنصر در آن بوده است را رزرو نمی‌کند، اما استفاده از <code>visibility: hidden;</code> یک فضای خالی را نگه خواهد داشت."
display.other.title: "سایر مقادیر برای display"
display.other: "برای display مقادیر قابل پذیرش دیگری هم وجود دارند که کاربرد‌های خاص خودشان را دارند، مثل <code>list-item</code> و <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">در اینجا لیست کاملی از این مقادیر را می‌توانید ببینید</a>. ما در باره‌ی <code>inline-block</code> و <code>flex</code> در ادامه همین آموزش صحبت خواهیم کرد."
display.extra: "همان طور که اشاره کردم، هر عنصر یک مقدار پیش فرض برای display دارد. با وجود این، شما <em>همیشه</em> می‌توانید این مقدار پیش‌فرض را بازنویسی کنید! البته دقت داشته باشید که اگر چه به طور کلی بی‌معنی خواهد بود که یک عنصر div را درون‌خطی کنیم، اما گاهی معانی خاصی مد نظر هستند، و از این ویژگی می‌توان برای اختصاصی‌سازی نمایش عناصر استفاده کرد. یک مثال متداول، درون خطی کردن عنصر‌های <code>li</code> برای نمایش لیست‌های افقی در منو‌ها است."

margin_auto.title: "margin: auto;"
margin_auto.1: "قرار دادن <code>width</code> برای یک عنصر سطح بلاک، از کشیده شدن بی‌نهایت آن به کناره‌ها جلوگیری می‌کند. آنگاه، شما می‌توانید با قرار دادن margin‌های چپ و راست به <code>auto</code> باعث شوید تا آن عنصر از نظر افقی در وسط قرار گیرد. آن عنصر، آن اندازه که شما برای آن پهنا در نظر گرفته اید را می‌پذیرد، سپس باقی فضا را به طور مساوی به margin برای طرفین خودش اختصاص می‌دهد."
margin_auto.2: "تنها مشکل زمانی رخ می‌دهد که پهنای مرورگر از آن اندازه ای که شما برای عنصر اختصاص داده اید کمتر باشد. مرورگر‌ها برای حل این مساله از یک scrollbar افقی استفاده می‌کنند که زیاد جالب به نظر نمی‌رسد. بیایید این مشکل را به شکل بهتری حل کنیم..."

max_width.title: "max-width"
max_width.1: "با استفاده از <code>max-width</code> به جای <code>width</code> در این حالت، مرورگرهای با اندازه ی کوچک، بهتر می‌توانند عمل کنند. این مساله وقتی مهم تر می‌شود که می‌خواهید یک سایت بر روی موبایل هم به خوبی کار کند. برای درک بهتر این موضوع، همین صفحه را تغییر اندازه دهید!"
max_width.2: "به هر حال، <code>max-width</code> در <a href=\"http://caniuse.com/#search=max-width\">بیشتر مرورگرهای امروزی پشتیبانی می‌شود</a> از جمله IE7 به بعد! پس برای استفاده از آن نباید نگران باشید."

box_model.title: "مدل جعبه (box-sizing)"
box_model.intro: " وقتی که داریم درباره ی پهنا حرف می‌زنیم، به یک مساله ی مهم هم باید اشاره کنیم و آن <em>مدل جعبه</em> است. وقتی که شما برای یک عنصر پهنای خاصی را در مقدار دهی می‌کنید، باید در نظر داشته باشید که احتمالا عنصر شما بزرگتر از آن خواهد شد: حاشیه و padding هم باید به آن اضافه کنید، زیرا که حاشیه و padding خارج از خود عنصر هستند. به این مثال دقت کنید، در آن پهنای دو جعبه به یک اندازه در نظر گرفته شده اند، اما نتیجه ی خروجی دو جعبه ی با اندازه ی متفاوت است."
box_model.simple: "من کوچکتر هستم"
box_model.fancy: "من بزرگتر هستم"
box_model.outro: "برای مدت‌های زیادی تنها راه حل برای این مشکل استفاده از محاسبات بود. طراحان پهنایی کمتر از آنچه را که می‌خواستند در نظر می‌گرفتند، و اندازه ی حاشیه‌ها و padding را به آن اضافه می‌کردند. خوشبختانه دیگر نیازی به این کار نیست ..."

box_sizing.title: "box-sizing"
box_sizing.1: "طی سالها، طراحان متوجه شدند که محاسبات راه حل درستی برای این کار نیست، به همین دلیل هم یک ویژگی جدید در CSS ایجاد شد به نام <code>box-sizing</code> . وقتی که شما <code>box-sizing: border-box;</code> را بر روی یک عنصر مقدار دهی می‌کنید، آنگاه حاشیه , padding برای آن عنصر دیگر پهنای آن را نمی‌افزایند.در اینجا همان مثال صفحه ی قبل را می‌بینید، اما در اینجا <code>box-sizing: border-box;</code> در هر دو عنصر مقداردهی شده است:"
box_sizing.simple: "حالا هم اندازه هستیم!"
box_sizing.fancy: "هورا!"
box_sizing.2: "از آنجایی که اینطوری خیلی بهتر است، برخی از طراحان ترجیح می‌دهند که همه ی عناصر صفحه این طوری باشند، به همین دلیل کد‌های زیر را به ابتدای کدهای خودشان اضافه می‌کنند:"
box_sizing.3: "با این کار، حتما همه ی عنصر‌های صفحه به این شکل خواهند شد."
box_sizing.4: "از آنجایی که <code>box-sizing</code> جدید است، شما باید از پیشوندهای <code>-webkit-</code> و <code>-moz-</code> برای آن استفاده کنید، همان طوری که من در این مثال‌ها همین کار را کرده ام. این تکنیک، ویژگی‌های آزمایشی را در مرورگرهای خاصی فعال می‌کند. همچنین برای <a href=\"http://caniuse.com/#search=box-sizing\">IE8 به بعد</a> بررسی بیشتری را انجام دهید."

position.title: "position"
position.intro: "برای ساخت پیکربندی‌های پیچیده تر، باید درباره ی ویژگی  <code>position</code> بیشتر صحبت کنیم. مقادیر قابل پذیرش آن اسم‌های غیر قابل به یاد ماندنی دارند و شاید لازم باشد که این صفحه را بوکمارک کنید. بیایید هر کدام را بررسی کنیم ..."
position.static.title: "static"
position.static.1: "مقدار پیش فرض <code>static</code> است. یک عنصر با <code>position: static;</code> به شکل خاصی جایگذاری نمی‌شود. یک عنصر static را <em>جایگذاری نشده</em> می‌خوانند و یک عنصر، به هر مقدار دیگری برای position را <em>جایگذاری شده</em> گویند."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> هم مثل <code>static</code> رفتار میکند، مگر آنکه ویژگی‌های اضافه ای برای آن استفاده شود."
position.relative.2: "با مقداردهی کردن <code>top</code>، <code>right</code>، <code>bottom</code>، و <code>left</code> برای یک عنصر با جایگذاری relative، می‌توان آن را از جای اصلی اش جا به جا کرد. سایر عناصر کنار این عنصر، به فضای خالی که با جا به جا شدن آن در جای اصلی اش ایجاد شده است، نفوذ نخواهند کرد."
position.fixed.title: "fixed"
position.fixed.1: "یک عنصر با جایگذاری fixed، جایگذاری اش relative است، اما نه نسبت به عنصر پدر، بلکه نسبت به تمام صفحه، یعنی viewport، که این بدان معنی است که این عنصر همواره در جایش ثابت است، حتی اگر که صفحه scroll شود. درست مانند <code>relative</code>، صفات <code>top</code>، <code>right</code>، <code>bottom</code>، و <code>left</code> به کار می‌روند."
position.fixed.2: "حتما تا الان به عنصر ثابت گوشه ی پایین سمت راست صفحه دقت کرده اید. الان  می‌توانید آن را بهتر بررسی کنید.برای آن  از اید دستورات CSS استفاده شده است:"
position.fixed.3: "یک عنصر ثابت، در صفحه، در آنجایی که باید می‌بود (و از آن جا به جا شد) هیچ فضای خالی ایجاد نمی‌کند."
position.fixed.4: "مرورگر‌های موبایل، به شکل اعجاب آوری از عنصر‌های ثابت، به شکلی متنوع پشتیبانی می‌کنند. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">در این باره می‌توانید در اینجا بیشر بیاموزید</a>."
position.fixed.example: "سلام، هنوز لازم نیست که به من توجه کنید!"
position.absolute.title: "absolute"
position.absolute.1: "مقدار <code>absolute</code> نیز مانند حالت قبل است. با این تفاوت که جایگذاری در آن وابسته به <em>نزدیک ترین پدر جایگذاری شده</em> است و نه viewport. اگر یک عنصر با جایگذاری <code>absolute</code> هیچ پدر جایگذاری شده ای نداشته باشد، آنگاه از <code>body</code> برای جایگذاری استفاده می‌کند و با scroll کردن صفحه بالا و پایین می‌کند. دقت شود که یک عنصر جایگذاری شده، به هر عنصری گفته می‌شود که در آن position هر چیزی باشد غیر از <code>static</code>."
position.absolute.2: "در اینجا یک مثال ساده داریم:"
position.absolute.relative: "مقدار <code>position</code> برای این عنصر <code>relative</code> است. اگر این برای این عنصر <code>position: static;</code> باشد، آنگاه عنصر فرزند، این عنصر را تکذیب کرده و از <code>body</code> برای جایگذاری استفاده می‌کند."
position.absolute.absolute: "جاگذاری این عنصر absolute . جایگذاری آن نسب به عنصر پدرش است."
position.absolute.3: "این ویژگی کمی ابهام دارد، اما برای ساخت پیکربندی به کمک CSS خیلی کلیدی است. در صفحه ی بعد با استفاده از <code>position</code> یک مثال عملی را پیاده سازی می‌کنیم."

position_example.title: "مثال از position"
position_example.1: "استفاده از position در یک مثال عملی گویا تر خواهد بود. در زیر یک نمونه از پیکر بندی یک صفحه ی واقعی را می‌بینید."
position_example.section.1: "با <code>margin-left</code> برای <code>section</code>‌ها این اطمینان پیدا می‌شود که برای <code>nav</code> جا به اندازه ی کافی باز شده است."
position_example.section.2: "دقت کنید که چه اتفاقی می‌افتد وقتی که صفحه ی مرورگر خود را تغییر اندازه می‌دهید. به خوبی کار می‌کند!"
position_example.2: "این مثال کار کرد، زیرا در آن container از nav بلند تر است. اگر نبود، nav از container بیرون می‌زد. در صفحات بعدی، سایر تکنیک‌های پیکربندی را مورد بررسی قرار خواهیم داد که باعث می‌شود جنبه‌های بیشتری از آن برای ما آشکار شود."
position_example.footer: "اگر شما یک header یا footer استفاده می‌کنید، اطمینان یابید که برای آنها جا به اندازه ی کافی وجود دارد! من از <code>margin-bottom</code> برای <code>body</code> استفاده می‌کنم."

float.title: "float"
float.1: "یکی دیگر از صفت‌های CSS که در پیکربندی استفاده می‌شود <code>float</code> است. از آن برای محصور کردن یک عکس با متن استفاده می‌شود، مثل این:"

clear.title: "clear"
clear.floating: "احساس شناور بودن می‌کنم!"
clear.1: "صفت <code>clear</code> برای کنترل کردن رفتار float خیلی مهم است. این دو مثال را مقایسه کنید:"
clear.2: "در این مثال عنصر <code>section</code> دقیقا بعد از <code>div</code> آمده است. اما، از آنجایی که <code>div</code> به چپ شناور است، این اتفاق می‌افتد: متن درون <code>section</code> اطراف <code>div</code> محاط می‌شود و  <code>section</code> تمام آن را احاطه می‌کند.حال اگر من می‌خواستم که <code>section</code> دقیقا بعد از عنصر شناور بیاید چه؟"
clear.3: "با استفاده از <code>clear</code> ما section را به پایین <code>div</code> شناور انتقال داده ایم. برای clear کردن عنصر‌های با مقدار شناوری <code>left</code> از <code>clear:left</code> استفاده می‌شود. و به همین ترتیب نیز برای شناوری راست استفاده می‌شود."

clearfix.title: "ترفند clearfix"
clearfix.1: "در اینجا اتفاق بدی که گاهی به هنگام استفاده از float ممکن است بیوفتد را می‌بینید:"
clearfix.2: "این عکس بزرگتر از عنصر در بر گیرنده ی آن است، و همچنین عکس float است، به همین دلیل از عنصر در بر گیرنده ی آن بیرون زده است!"
clearfix.3: "بسیار عالی! یک روش برای اصلاح آن وجود دارد، البته کمی زشت است! به آن <em>ترفند clearfix</em> می‌گویند."
clearfix.4: "بیاید CSS جدید را امتحان کنیم:"
clearfix.5: "حال ببینیم چه می‌شود:"
clearfix.6: "خیلی بهتر شد!"
clearfix.7: "این برای مرورگر‌های مدرن کار می‌کند. اگر می‌خواهید که IE6 را هم پشتیبانی کند، احتمالا باید این را هم اضافه کنید:"
clearfix.8: "همچنین کلی مرورگرهای عجیب و غریب دیگری هم وجود دارند که ممکن است به توجهات ویژه نیاز داشته باشند. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">دنیای clearfix کمی‌ ترسناک است</a>، اما این راه حل ساده، تقریبا در همه ی مرورگرهای اصلی کار می‌کند."

float_layout.title: "مثالی از پیکربندی با float"
float_layout.1: "استفاده از <code>float</code> برای انجام دادن همه ی پیکربندی خیلی رایج است. در اینجا ما همان مثال قبلی را که با <code>position</code> ساخته بودیم را آورده ایم، اما این بار با <code>float</code> آن را ساخته ایم."
float_layout.2: "این مثال هم مانند قبلی کار می‌کند. دقت کنید که ما یک <code>clearfix</code> را در container قرار داده ایم. در این مثال نیازی نیست، اما اگر <code>nav</code> از عنصر غیر شناور دراز تر بود ضروری بود."

percent.title: "پهنای درصدی"
percent.1: "درصد، یک واحد اندازه گیری است که به اندازه ی بلاک در بر گیرنده ی عنصر وابسته است. برای عکس‌های فوق العاده خوب است: در اینجا ما یک عکس را همیشه 50٪ در عنصر دربرگیرنده ی آن قرار می‌دهیم. سعی کنید که صفحه را تغییر اندازه دهید تا ببینید چه می‌شود!"
percent.2: "همچنین شما می‌توانستید از <code>min-width</code> و <code>max-width</code> استفاده کنید تا حداقل و حداکثر اندازه ای که تصویر می‌تواند بپذیرد را مشخص کنید."
percent.layout.title: "پیکربندی با اندازه‌های درصدی"
percent.layout.1: "برای پیکربندی می‌توانید از اندازه‌های درصدی هم استفاده کنید، اما این حالت کار بیشتری را می‌طلبد. در این مثال مطالب درون <code>nav</code> به شکل ناخوشایندی با تغییر اندازه ی صفحه کشیده می‌شود، حتی وقتی که صفحه خیل باریک باشد. البته خوشایند بودن و نبودن چنین حالتی به نوع محتوای شما هم وابسته است."
percent.layout.2: "وقتی که این پیکربندی خیلی باریک باشد، <code>nav</code> یک حالت له شده و فشرده ی ناخوشایندی را به خود می‌گیرد. بدتر آنکه شما از <code>min-width</code> در nav  نمیتوانید استفاده کنید تا این مشکل را برطرف کنید، زیرا ستون سمت راست از آن پیروی نمی‌کند."

media_queries.title: "media queries"
media_queries.1: "«طراحی واکنش‌گرا (responsive)» نوعی استراتژی در طراحی سایت است که به ویژگی‌های مرورگر و دستگاه «پاسخ» می‌دهد... و سعی می‌کند که خوب باشد، مهم نیست چه شرایطی حاکم باشد!"
media_queries.2: "قویترین ابزار برای این منظور media query‌ها هستند. حال بیاید، آن مثالی را که داشتیم و در آن اندازه‌ها با درصد بودند، تغییر دهیم، به طوری که اگر اندازه ی صفحه ی مرورگر خیلی باریک شد، همه چیز را در یک ستون نمایش دهد، و اگر پهنا با اندازه ی کافی بود، همانطور مثل حالت قبل باشد:"
media_queries.3: "حال اگر اندازه ی صفحه ی مرورگر را تغییر بدهید، خیلی جالب خواهد بود!"
media_queries.4: "بسیار عالی! حالا این پیکربندی خیلی عالی خواهد بود، حتی در موبایل‌ها! در اینجا <a href=\"http://mediaqueri.es/\">چند سایت معروف که از mdia query‌ها به همین شکل استفاده می‌کنند</a> را می‌توانید بیابید. علاوه بر <code>min-width</code> و <code>max-width</code> چیزهای زیاد دیگیری هم هستند که می‌توانند مورد استفاده قرار گیرند: <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">مستندات MDN</a> را برای اطلاعات بیشتر بررسی کنید:"
media_queries.5: "همچنین می‌توانید برای بهتر کردن نمایش کدهای خودتان در موبایل‌ها از <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a> استفاده کنید."

inline_block.title: "inline-block"
inline_block.1: "می‌توان یک جدول از جعبه‌ها ساخت، به طوری که صفحه ی مرورگر را به شکل افقی پر می‌کنند. این کار را برای مدت طولانی فقط با استفاده از <code>float</code> انجام می‌دادند، اما هم اکنون با <code>inline-block</code> راحت تر هم شده است! در مثال زیر هر دوی این روش‌ها را بررسی می‌کنیم."
inline_block.hard_way.title: "راه سخت با استفاده از float"
inline_block.hard_way.box: "من شناور هستم!"
inline_block.hard_way.after: "من از clear استفاده می‌کنم تا در کنار جعبه‌های بالا چیده نشوم"
inline_block.easy_way.title: "راه راحت تر، استفاده از inline-block"
inline_block.easy_way.info: "با استفاده از قرار داده <code>inline-block</code> به عنوان مقدار برای <code>display</code> می‌توان به همان نتیجه رسید."
inline_block.easy_way.box: "من یک بلاک درون خطی هستم!"
inline_block.easy_way.after: "دیگر نیازی ندارم که از <code>clear</code> استفاده کنم! چه خوب!"
inline_block.2: "برای بررسی‌ها بیشتر باید به  <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 and IE7 support</a>، قسمت <code>inline-block</code> سر بزنید. بعضی وقت‌ها از <code>inline-block</code> به  <code>hasLayout</code> یاد می‌شود، پس شما فقط نیاز دارید که از پشتیبانی آن در مرورگر‌های قدیمی آگاه شوید. اگر می‌خواهید، لینک قبلی در رابطه با IE6 و IE7 را دنبال کنید.در غیر این صورت پیش می‌رویم!"

inline_block_layout.title: "پیکربندی با inline-block"
inline_block_layout.1: "همچنین می‌توانید از  <code>inline-block</code> برای پیکربندی‌های استفاده کنید. چند مورد کوچک هستند که باید در نظر داشته باشید:"
inline_block_layout.caveat.1: "عنصر‌های <code>inline-block</code> از  <code>vertical-align</code> تاثیر می‌پذیرند، که احتمالا باید برای حل آن از <code>top</code> استفاده کنید."
inline_block_layout.caveat.2: "پهنای هر ستون باید تنظیم شود."
inline_block_layout.caveat.3: "اگر در بین کد‌های HTML هر فاصله ای زده شود، آنگاه بین ستون‌ها یک فضای خالی ایجاد خواهد شد."
inline_block_layout.tada: "بسیار عالی!"

column.title: "column"
column.1: "یک صفت جدید CSS هست که به شما این اجازه را می‌دهد که متن چند ستونی داشته باشید، ببینید:"
column.2: "ستون‌های CSS خیلی جدید هستند، پس باید آنها را با پیشوند استفاده کنید، همچنین در <a href=\"http://caniuse.com/#search=column\">IE8 به قبل و Opera Mini </a> کار نمی‌کند. همچنین چند صفت دیگر مربوط به ستون‌ها هستند که از <a href=\"http://www.quirksmode.org/css/multicolumn.html\">اینجا</a> قابل دسترسی هستند. اگر مشتاق به آنها نیستید، به بخش بعدی برویم."

flexbox.title: "flexbox"
flexbox.1: "حالت پیکربندی با<code>flexbox</code> برای بازسازی روش‌های پیکربندی با CSS ساخته شده است. متاسفانه این امر اخیرا دستخوش تغییرات زیادی شده است، و به همین خاطر در مرورگرهای مختلف، به شکل‌های مختلفی پیاده سازی شده است. اما همچنان، من علاقه مند هستم تا برخی مثال‌ها را با شما به اشتراک بگذارم تا بدانید که چه تکنیکی در آینده در پیش رو است. این مثال‌ها، در حال حاضر فقط با پیاده سازی flexbox در Chrome با توجه به <a href=\"http://www.w3.org/TR/css3-flexbox/\">آخرین استاندارد</a> کار می‌کنند."
flexbox.2: "مستندات تاریخ گذشته ی فراوانی در باره flexbox وجود دارند. اگر می‌خواهید در باره flexbox بیشتر بیاموزید، <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">از اینجا شروع کنید</a> تا بفهمید که آیا یک منبع به روز است یا خیر. من . <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">یک مقاله ی مفصل، با جدید ترین دستورات</a> در این زمینه نوشته ام."
flexbox.3: "کارهای فراوان دیگری می‌توان با flexbox انجام داد; اینها چند نمونه هستند:"
flexbox.simple.title: "یک پیکربندی ساده با Flexbox"
flexbox.simple.1: "Flexbox خیلی آسان است!"
flexbox.fancy.title: "یک پیکربندی شیک با Flexbox"
flexbox.fancy.1: "I will be 200px when there is room, and I will shrink down to 100px if there is not room, but no smaller."
flexbox.fancy.2: "من همواره 200px خواهم بود، مهم نیست که چه باشد no matter what."
flexbox.fancy.3: "من تا 1/3 از پهنای باقی مانده را پر می‌کنم."
flexbox.fancy.4: "من تا 2/3 از پهنای باقی مانده را پر می‌کنم."
flexbox.centering.title: "وسط چینی با flexbox"
flexbox.centering.1: "در آخر، وسط چینی عمودی خیلی راحت است!"

frameworks.title: "فریموورک‌های css"
frameworks.1: "از آنجایی که پیکربندی با CSS خیلی فریبنده است و ریزه کاری‌های فراوانی دارد، فریموورک‌های زیادی برای آن درست شده اند تا کار را راحت کنند. در اینجا برخی از آنها را می‌توانید ببینید. استفاده از فریموورک‌ها تنها زمانی فکر خوبی است ک همان کاری را انجام دهد که شما می‌خواهید؛ و هیچ جایگزینی برای یادگیری CSS به شمار نمی‌آیند."
frameworks.2: "همین! اگر شما هر گونه بازخوردی برای این سایت دارید لطفا <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">من را در توئیتر آگاه کنید</a>!"

about.title: "در باره این سایت"
about.credits: "ساخته شده توسط <a href=\"http://incompl.com\">Greg Smith</a>. طراحی شده توسط <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. ما در <a href=\"http://bocoup.com\">Bocoup</a> کار می‌کنیم."

