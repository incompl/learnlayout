# العربية

rtl: true

global.title: "تعلم التصميم باستخدام CSS"
global.short_title: "CSS"
global.home: "الرئيسية"
global.toc: "الفهرس"
global.next: "التالي"
global.previous: "السابق"
global.feedback: "مشاكل / تغذية راجعة"

util.extra_credit: "ملاحظة إضافية"
util.ipsum: "لوريم إيبسوم هو ببساطة نص شكلي (بمعنى أن الغاية هي الشكل وليس المحتوى) ويُستخدم في صناعات المطابع ودور النشر. كان لوريم إيبسوم ولايزال المعيار للنص الشكلي منذ القرن الخامس عشر عندما قامت مطبعة مجهولة برص مجموعة من الأحرف بشكل عشوائي أخذتها من نص، لتكوّن كتيّب بمثابة دليل أو مرجع شكلي لهذه الأحرف. خمسة قرون من الزمن لم تقضي على هذا النص، بل انه حتى صار مستخدماً وبشكله الأصلي في الطباعة والتنضيد الإلكتروني. انتشر بشكل كبير في ستينيّات هذا القرن مع إصدار رقائق \"ليتراسيت\" البلاستيكية التي تحتوي على مقاطع من هذا النص، وعاد لينتشر مرة أخرى مؤخراَ مع ظهور برامج النشر الإلكتروني مثل \"ألدوس بايج مايكر\" والتي حوت أيضاً على نسخ من نص لوريم إيبسوم."
util.nav.1: "الرئيسية"
util.nav.2: "قائمة الوجبات"
util.nav.3: "الأرشيف"
util.nav.4: "التوقيت"
util.nav.5: "الاتجاهات"
util.nav.6: "اتصل بنا"

index.1: "هذا الموقع يقوم بتعليمك أساسيات لغة CSS، أو ما تعرف بلغة التنسيق، والتي تستخدم في تصميم الكثير من المواقع الإلكترونية"
index.2: "يُفترض أنك ملم ببعض الأشياء العامة في css، مثل المحددات، والخصائص. أيضًا، يُفضل أن تكون مهتمًا بأمور تصميم المواقع. إذا كنت تود تعلم ال HTML، و CSS من البداية؛ يمكنك زيارة : <a href=\"http://learn.shayhowe.com/html-css/\">الموقع الإلكتروني التالي</a>. أما لو كانت لديك خبرة فيهما؛ فيُمكنك البدء في هذه الدروس!."
index.translator: "ترجمة: <a href = \"mailto:amsammour@gmail.com\">Ahmed Sammour</a>"
index.get_started: "البداية"

no_layout.title: "لا تصميم!"
no_layout.1: "عدم وجود تصميم في الصفحة يشبه إلى حد كبير، وضع جميع المحتويات في عمود واحد. ومع ذلك؛ فإن جعل نافذة المتصفح عريضة جدًا، هو أمر متعب جدًا للقراءة؛ لأن المستخدم يضطر بعد الانتهاء من قراءة السطر، إلى الانتقال من أقصى يسار الصفحة، إلى أقصي يمين الصفحة. جرب تكبير، وتصغير المتصفح؛ لمعرفة المقصود!."
no_layout.2: "قبل إصلاح هذه المشكلة؛ ينبغي أن تتأكد من معرفتك التعامل مع الخاصية المهمة <code>display</code>. الخواص في CSS هي الوحدة الأساسية، وهي التي تُمكنك من تنسيق، وتصميم العناصر في صفحات الويب."

display.title: "خاصية \"display\""
display.intro: "خاصية <code>display</code>، هي أكثر خاصية مهمة في CSS، وخاصة في أمور التحكم في تصميم المواقع. كل عنصر في الموقع، يحتوي على خاصية <code>display</code> افتراضية، وتعتمد قيمة الخاصية على العنصر نفسه. القيمة الافتراضية لمعظم العناصر هي <code>block</code>، أو <code>inline</code>."
display.block.title: "block"
display.block: "<code>div</code> هو العنصر الأساسي في تصميم المواقع، وقيمة الخاصية <code>display</code> الخاصة به تساوي: block. ومن أهم مميزات العناصر التي تمتلك هذه الخاصية أنها تبدأ في سطر جديد، وتمتد من أقصى يمين نافذة المتصفح، إلى أقصى اليسار. ومن الأمثلة الأخرى على هذه العناصر في لغة HTML5: <code>p</code>، و<code>form</code>، و<code>section</code>، و<code>footer</code>، و<code>header</code>."
display.inline.title: "inline"
display.inline.1: "عنصر <code>span</code> هو العنصر الأساسي الذي تكون قيمة <code>display</code> الخاصة به تساوي inline. أي عنصر يحمل القيمة الأخيرة يُسمى inline element. ومن خصائص هذه العناصر أنها تمكن من تضمين النصوص داخل الفقرات."
display.inline.2: "مثل هذا"
display.inline.3: "من دون قطع سياق الفقرة. عنصر <code>a</code> هو أكثر العناصر التي تُستخدم لهذا الغرض، والتي نستخدمها بكثرة في الوصلات. "
display.none.title: "none"
display.none.1: "أحد القيم المهمة الأخرى هي <code>none</code>. بعض العناصر تستخدم هذه القيمة، وأشهر الأمثلة على ذلك عنصر <code>script</code>؛ والذي يستخدم لتضمين كود جافا سكريبت داخل الصفحات. يمكن استخدام هذه القيمة في جافا سكريبت لإخفاء، أو إظهار عناصر معينة."
display.none.2: "يختلف ذلك عن خاصية <code>visibility</code>؛ حيث أننا عندما نُعيّن قيمة none لخاصية <code>display</code>؛ فإننا نقوم بتحميل محتوى الصفحة كما لو أن العنصر غير موجود. أما <code>visibility: hidden;</code>؛ فتقوم بإخفاء العنصر فقط، ويظل أثر العنصر موجودًا في الصفحة."
display.other.title: "قيم أخرى"
display.other: "هناك قيم أخرى لخاصية <code>display</code>. مثل قيمة <code>list-item</code>، و قيمة <code>table</code>، وقيمة <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">هذه قائمة بكل قيم خاصية display</a>. سنقوم بشرح القيمتين: <code>inline-block</code>، و<code>flex</code> لاحقًا."
display.extra: "كما ذكرنا أعلاه؛ كل عنصر له قيمة <code>display</code> افتراضية. وعلى كل حال، يمكن <em>دائمًا</em> تغيير القيمة القديمة، بقيمة أخرى."

margin_auto.title: "توسيط العناصر"
margin_auto.1: "يُمكنك ضبط العرض الخاص بأي عنصر وذلك باستخدام خاصية <code>width</code>؛ وسيمنع العنصر من أن يمتد من أقصى اليمين، إلى أقصى اليسار. أيضًا، يمكن ضبط الهوامش؛ لجعل العنصر متوسط الصفحة، باستخدام خاصية <code>margin</code>، وذلك بجعل القيمة تساوي <code>auto</code>. "
margin_auto.2: "المشكلة الوحيدة التي ستحدث، هي إذا حاولت عرض الصفحة على متصفح ما، وكان عرض المتصفح أضيق من عرض العنصر ذاته. سيقوم المتصفح بحل ذلك من خلال إضافة شريط scrollbar أفقي. لنقم بتطوير الأمر قليلًا."

max_width.title: "max-width"
max_width.1: "استخدام خاصية <code>max-width</code> بدلًا من خاصية <code>width</code> في هذا الموقف؛ سيجعل المتصفح يتحكم بفعالية أكثر مع الشاشات الصغيرة. يعتبر هذا الموضوع مهمًا، إذا كنت تود جعل الموقع مستخدمًا بسهولة على الجوال. قم بتكبير، وتصغير المتصفح لرؤية الفرق. "
max_width.2: "بالمناسبة، خاصية <code>max-width</code> <a href=\"http://caniuse.com/#search=max-width\">مدعومة في جميع المتصفحات</a>، ومن ضمنها إنترنت إكسبلورر 7+؛ لذا لا داعي للقلق من هذا الأمر."

box_model.title: "box model"
box_model.intro: "بينما تحدثنا عن خاصية width، كان يتوجب التنويه إلى أهم مشكلة لهذه الخاصية، وهي عندما تقوم بضبط العرض الخاص بعنصر ما، سيظهر العنصر أكبر من الحجم الذي قمت بضبطه. وتفسير الأمر، هو أن وجود حواشي العنصر (padding)، وحدود العنصر (border) ستقوم بتمديد عرض العنصر إلى ما بعد الحد الذي قمت بضبطه. انظر إلى المثال التالي؛ حيث يوجد عنصران، وبنفس قيمة العرض، ولكن مع اختلاف حقيقي بين عرض العنصرين."
box_model.simple: "أنا العنصر الصغير!"
box_model.fancy: "وأنا الكبير!"
box_model.outro: "حل هذه المشكلة هو حل رياضي. حيث يقوم مطورو صفحات الويب باستخدام CSS، بتحديد قيمة أصغر من التي يريدونها فعليًا، والتي تساوي القيمة الأولية، مطروحًا منها قيمة الحواشي، والحدود. من حسن الحظ، لن نحتاج لهذا بعد الآن!."

box_sizing.title: "خاصية box-sizing"
box_sizing.1: "يمكن اعتبار العناصر الموجودة ضمن كود html عبارة عن صناديق. ونستخدم مصطلح box-model للتعبير عن تصميم كل عنصر في الصفحة. لهذا السبب وُجدت خاصية <code>box-sizing</code>. يتكون box-model من أربع أشياء: هامش خارجي، وإطار، وهامش داخلي، ومحتوى العنصر نفسه. المثال التالي يوضح كيفية استخدام خاصية <code>box-sizing: border-box;</code>"
box_sizing.simple: "نحن بنفس الحجم الآن."
box_sizing.fancy: "رائع!"
box_sizing.2: "الأمر الآن أفضل، أليس كذلك؟. غالبًا ما يريد مطورو الويب جعل جميع العناصر تبدو بهذه الطريقة. ولتحقيق ذلك، يقوم المطورون بكتابة الكود التالي:"
box_sizing.3: "هذا الكود يضمن أن جميع العناصر الموجودة في الصفحة، مُحجّمة بشكل ذكي."
box_sizing.4: "ولأن <code>box-sizing</code> هي خاصية جديدة نسبيًا؛ فينبغي عليك استخدام <code>-webkit-</code> و <code>-moz-</code> كما هو واضح في هذه الأمثلة. هذه الميزة، توفر خواص لا تزال تحت التجربة، أيضًا، ينبغي أن تأخذ بالحسبان أن هذه الخاصية تعمل على <a href=\"http://caniuse.com/#search=box-sizing\">إنترنت إكسبلورر +8</a>."

position.title: "التموضع"
position.intro: " لغرض إنشاء تصميم صفحات معقدة؛, ينبغي أن نناقش خاصية <code>position</code>. هذه الخاصية لها العديد من القيم، وهذه القيم من الصعب تذكرها. لنقم بالمرور عليها واحدة، تلو الأخرى. ويفضل أن تضع هذه الصفحة بالتحديد في مفضلتك؛ لتتمكن من الرجوع إليها بسهولة مستقبلًا."
position.static.title: "static"
position.static.1: "<code>static</code> هي القيمة الافتراضية. العنصر الثابت يمكن اعتباره <em>بدون موضع</em> 
والعنصر الذي يملك أي قيمة أخرى يمكن اعتباره <em>عنصرًا محددًا بموضع</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> تملك نفس صفات <code>static</code> تقريبًا. إلا إذا قمتَ بإضافة بعض الخصائص الأخرى."
position.relative.2: "يمكن إضافة بعض الصفات الأخرى لهذه القيمة، مثل <code>top</code>، <code>right</code>، <code>bottom</code>، و <code>left</code>. هذه الصفات ستجعل العنصر مُعدّلًا عن الوضع الأصلي. أي محتوى آخر لا يمكن تعديله ليملئ أي فراغ يتركه العنصر الأخير."
position.fixed.title: "fixed"
position.fixed.1: "نعني بذلك أن العنصر سيكون ثابتًا؛ بمعنى أنه سيتم تحديده بالنسبة لعرض الشاشة، وهذا سيجعل العنصر ثابتًا في نفس المكان مهما قمت بتحريك الفارة. يمكن تحقيق ذلك باستخدام الخصائص التالية: <code>relative</code>، و<code>top</code>، و<code>right</code>، و<code>bottom</code>، و<code>left</code>."
position.fixed.2: " متأكد من أنك قد لاحظت أن العنصر الثابت في الزاوية اليمنى السفلى اليسرى من الصفحة. حسنًا، لم لا تلق نظرة عليه الآن؟. كود الcss التالي هو الذي جعل العنصر السابق في هذا المكان."
position.fixed.3: "العنصر الثابت لا يترك فراغًا في المكان الذي يتواجد به في الصفحة."
position.fixed.4: "متصفحات الأجهزة المحمولة لديها دعم ضعيف لموضوع العناصر الثابتة. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">ألق نظرة على المشكلة هنا</a>."
position.fixed.example: "مرحبًا!. أنا عنصر ثابت لا أتحرك."
position.absolute.title: "absolute"
position.absolute.1: "قيمة <code>absolute</code> هي أكثر قيمة صعبة الاستخدام. تُستخدم هذه القيمة تقريبًا مثل القيمة <code>fixed</code> باستثناء أمر واحد وهو .<em>أنه يتم تحديد القيمة بالنسبة إلى أقرب عنصر</em>، وذلك بدلًا من تحديدها بالنسبة لعرض الشاشة. استخدام هذه الخاصية مع أي عنصر دون وجود عنصر قريب؛ فإن الموقع سيعتبر أقرب عنصر هو جسم الصفحة (body)."
position.absolute.2: "هذا مثال بسيط"
position.absolute.relative: "هذا العنصر تم تحديده بواسطة أقرب عنصر له. لو كان هذا العنصر يملك خاصية <code>position: static;</code> فإنه سيتم تحديد موضعه حتما بالنسبة إلى جسم الصفحة."
position.absolute.absolute: "هذا العنصر يملك خاصية absolute. هذا يعني أنه تم تحديد موقعه نسبة إلى أقرب عنصر  له."
position.absolute.3: "هذه الأمور صعبة بعض الشيء، ولكنها ضرورية جدًا لتصميم صفحات الويب. في الصفحات القادمة سنستخدم خاصية  <code>position</code> في أمثلة واقعية أكثر."

position_example.title: "مثال على خاصية position"
position_example.1: "هذا المثال واقعي جدًا. ويبدو قريبًا لتصميم صفحة ويب واقعية."
position_example.section.1: "استخدام خاصية <code>margin-left</code> لكل قسم <code>section</code> يضمن أن هناك هامشًا مناسبًا لكل عنصر. عدا ذلك؛ سنجد العناصر متداخلة مع بعضها البعض."
position_example.section.2: "لاحظ الفرق عندما تقوم بتضغير أو تكبير متصفحك. إنه يعمل بشكل رائع الآن!"
position_example.2: "هذا المثال يعمل بشكل جيد لسبب منطقي، وهو أن المحتوى (container) أطول من الشريط العمودي في يسار الشاشة (nav). لو لم يكن كذلك؛ فهذا يعني أن الشريط سيتجاوز حدوده ليدخل في مساحة المحتوى. في الصفحات القادمة سنتعلم بعض تقنيات التصميم، والتي لكل منها إيجابيات، وسلبيات."
position_example.footer: "إذا كنت تستخدم رأس، أو ذيل صفحة ثابت، تأكد أن هناك مساحة كافية له!. تم وضع خاصية <code>margin-bottom</code> في جسم الصفحة <code>body</code>."

float.title: "float"
float.1: "هذه خاصية أخرى شائعة الاستخدام، وتستخدم بشكل واسع في تصميم صفحات الويب. خاصية Float تهدف أساسًا لجعل النص ملتفًا حول الصور هكذا:"

clear.title: "clear"
clear.floating: "أشعر أنني أطير فوق العناصر الأخرى!."
clear.1: "خاصية <code>clear</code> مهمة جدًا للتحكم في طبيعة خاصية float. لاحظ الفرق بين المثالين التاليين"
clear.2: "في هذه الحالة، عنصر <code>section</code> هو في الحقيقة بعد العنصر <code>div</code>. ومع ذلك،  فإن العنصر <code>div</code> موجود في يسار الشاشة. إليك تفسير ما حصل: النص الموجود في عنصر <code>section</code> ملتف حول العنصر <code>div</code>، وأما العنصر <code>section</code> فإنه ملتف على كامل الصفحة. ماذا لو أردنا أن يظهر العنصر <code>section</code> بعد العنصر الآخر؟"
clear.3: "باستخدام هذه الخاصية <code>clear</code> قمنا بتحريك القسم أسفل العنصر <code>div</code>. استخدم القيمة <code>left</code> لجعل العناصر في اليسار. كما يمكنك استخدام القيم: <code>right</code>، و<code>both</code>."

clearfix.title: "خدعة clearfix"
clearfix.1: "هذا أمر سيء يمكن أن يحصل عند استخدام خاصية float:"
clearfix.2: "أوه لا ... هذه الصورة أطول من العنصر الذي يحتوي عليها. ومع أنها تحتوي على خاصية float؛ إلا أنها تجاوزت حدود العنصر الذي يحتوي عليها!."
clearfix.3: "حسنًا. هناك طريقة بالطبع لحل ذلك. لكنه حل بشع!. يُسمى هذا الحل ب <em>clearfix خدعة</em>."
clearfix.4: "لنجرب إضافة هذا الكود:"
clearfix.5: "لنر الآن ماذا سيحدث:"
clearfix.6: "أفضل بكثير!"
clearfix.7: "هذا الحل يعمل فقط في المتصفحات الحديثة. إذا كنت تريد أن تدعم المتصفحات القديمة مثل إنترنت إكسبلورر 6 لهذا الحل؛ قم بالآتي:"
clearfix.8: "هناك متصفحات قليلة لا تدعم الطريقة بشكل جيد، وتتطلب منك الانتباه. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">عالم هذه الخدعة مخيف حقًا</a>، لكن هذا الحل البسيط فعّال مع غالبية المتصفحات الشهيرة."

float_layout.title: "مثال تصميم باستخدام float"
float_layout.1: "من الشائع جدًا تصميم مواقع ويب كاملة باستخدام خاصية <code>float</code>. هذا نفس التصميم الذي قمنا به باستخدام خاصية  <code>position</code>، ولكن باستخدام خاصية <code>float</code> بدلًا منها."
float_layout.2: "هذا المثال يعمل تمامًا كالمثال السابق. لاحظ أننا قمنا بكتابة <code>clearfix</code> في المحتوى (container). قد لا نحتاج لذلك في هذا المثال، لكنه سيكون مجديًا في حال كان الشريط <code>nav</code> أطول من المحتوى الآخر."

percent.title: "العرض المئوي"
percent.1: "النسبة المئوية هي وحدة قياس تستخدم في تحديد أبعاد العنصر. يكون استخدام النسب المئوية رائعًا عند إدراج الصور. هنا مثال على صورة تأخذ 50% من حجم العنصر الذي يحتوي عليها. ما يعني أنه مهما تغير حجم العنصر، فإن الصورة ستأخذ نصف العرض."
percent.2: "بإمكانك أيضًا استخدام <code>min-width</code> و <code>max-width</code> لتحديد أقل عرض، أو أكبر عرض يمكن للصورة أن تأخذه!."
percent.layout.title: "تصميم الصفحات باستخدام العرض المئوي"
percent.layout.1: "يمكنك استخدام النسب المئوية في تصميم صفحات الويب، لكن ذلك سيتطلب منك وقتًا أكثر. في المثال التالي، يكون محتوى العنصر <code>nav</code> ملتفًا بطريقة جيدة عندما تكون نافذة المتصفح ضيقة."
percent.layout.2: "عندما يكون التصميم ضيقًا جدًا، يصبح العنصر <code>nav</code> غير ظاهر تقريبًا. والأمر الأسوأ، هو أنك لا تستطيع استخدام خاصية  <code>min-width</code> في العنصر nav؛ لأن العمود الأيمن لن يقبل هذه الخاصية."

media_queries.title: "استخدام استعلامات media"
media_queries.1: "\"التصميم المرن، أو المطاط\" هو استراتيجية لجعل الموقع \"يستجيب\" للمتصفح، والجهاز الذي يتم عرض الموقع منه. وذلك من خلال جعل الموقع يظهر بشكل رائع، مهما كان المتصفح، أو الجهاز الذي تقوم بالاستعراض منه."
media_queries.2: "استعلامات media هي أقوى أداة لتحقيق هذا الأمر. لنأخذ المثال الذي قمنا بتصميم صفحة باستخدام العرض المئوي، ولنضعها في عمود واحد، ثم نشاهد كيف ستبدو عندما يكون المتصفح صغيرًا جدًا."
media_queries.3: "الآن عندما تقوم بتكبير أو تصغير المتصفح، سيصبح شكل الصفحة رائعًا أكثر!."
media_queries.4: "أوه! الأن تبدو الصفحة رائعة عند التصفح من الجوال. هنا ستجد <a href=\"http://mediaqueri.es/\">بعض المواقع الشهيرة التي تستخدم استعلامات media بهذه الطريقة</a>. هناك الكثير الكثير يمكنك اكتشافه. الق نظرة على <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">شرح شبكة موزيلا للمطورين</a> لمعرفة المزيد."
media_queries.5: "يمكنك جعل موقعك يبدو أكثر جمالًا عند استخدام أجهزة الجوال، والأجهزة اللوحية وذلك باستخدام وسم <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "يمكنك إنشاء شبكة من المربعات التي تملأ عرض المتصفح وتلتف حول بعضها بشكل جيد. كان ذلك ممكن في السابق باستخدام خاصية  <code>float</code>، لكن الآن سنستخدم خاصية <code>inline-block</code>، وستكتسف أنها أسهل بكثير. العناصر التي تملك خاصية <code>inline-block</code> هي بالضبط كالعناصر التي تحمل خاصية <code>inline</code>، مع فرق أن العناصر الأولى يمكن أن تأخذ طولًا، وعرضًا محددين. لنلق نظرة على مثالين يشرحان كل طريقة على حدة."
inline_block.hard_way.title: "الطريقة الصعبة (استخدام float)"
inline_block.hard_way.box: "أنا أطير الآن!"
inline_block.hard_way.after: "أنا أستخدم خاصية clear."
inline_block.easy_way.title: "الطريقة السهلة (استخدامinline-block)"
inline_block.easy_way.info: "بإمكانك تحقيق نفس الهدف باستخدام القيمة <code>inline-block</code> مع الخاصية <code>display</code>."
inline_block.easy_way.box: "أنا عنصر مُضمن!"
inline_block.easy_way.after: "لا أحتاج لاستخدام <code>clear</code> في هذه الحالة. جميل!"
inline_block.2: "ينبغي عليك الاطلاع على بعض الأمور الإضافية في <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">أمور دعم إنترنت إكسبلورر 6، و7</a> لخاصية <code>inline-block</code>. انظر الروابط السابقة لمعرفة كيفية دعم المتصفحات القديمة مثل IE6 و IE7. عدا ذلك؛ دعنا نكمل!."

inline_block_layout.title: "التصميم باستخدام inline-block"
inline_block_layout.1: "بإمكانك أيضًا استخدام خاصية <code>inline-block</code> لتصميم الصفحات. هناك بضعة أمور ينبغي أن تأخذها بعين الاعتبار:"
inline_block_layout.caveat.1: "العناصر التي لها خاصية <code>inline-block</code> تتأثر بالخاصية <code>vertical-align</code>، وينبغي عليك تحديدها غالبًا ب <code>top</code>."
inline_block_layout.caveat.2: "يجب عليك تحديد عرض كل عمود في ال"
inline_block_layout.caveat.3: "سيكون هناك فراغ بين الأعمدة، إذا كانت توجد مسافات فاصلة في كود الhtml"
inline_block_layout.tada: "رائع!"
column.title: "العمود"
column.1: "هناك العديد من الخصائص التي يمكنك استخدامها، والتي تجعل النص مُنسقًا في شكل أعمدة. ألق نظرة:"
column.2: "استخدام الأعمدة في css حديث نسبيًا، فربما لا يعمل <a href=\"http://caniuse.com/#search=column\">مع إنترنت إكسبلورر9، وأوبرا ميني</a>. هناك بعض الخصائص المتعلقة باستخدام الأعمدة، <a href=\"http://www.quirksmode.org/css/multicolumn.html\">انظر هنا لمعرفة المزيد</a>. عدا ذلك؛ دعنا نكمل."

flexbox.title: "تصميم flexbox"
flexbox.1: "يمكننا تصميم صفحات الويب باستخدام وحدة تُسمى <code>flexbox</code> ،وهي وحدة عصرية ساهمت في إعادة صياغة تصميم صفحات الويب. مع الأسف، تغيرت بعض الأمور مع كثرة المتصفحات، والخصائص التي توفرها. ولكن مع ذلك، سنقوم بمشاركة بعض الأمثلة لتوضيح المفهوم. هذه الأمثلة تعمل حاليًا فقط على  <a href=\"http://caniuse.com/flexbox\">بعض المتصفحات</a> التي تستخدم <a href=\"http://www.w3.org/TR/css3-flexbox/\">آخر إصدار من flexbox</a>."
flexbox.2: "هناك الكثير من إصدارات flexbox غير المدعومة. إذا كنت تود تعلم المزيد حول هذه الوحدة,،<a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">ابدأ من هنا</a> لمعرفة إذا ما كان الأمر مدعومًا أم لا. قمنا بكتابة <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">مقالة مفصلة لشرح كيفية التعامل مع هذه الوحدة</a>."
flexbox.3: "هناك امور كثيرة يمكنك فعلها مع وحدة flexbox. هذه بعض الأمثلة لتوضيح الفكرة:"
flexbox.simple.title: "تصميم بسيط باستخدام flexbox"
flexbox.simple.1: "استخدام flexbox سهل جدًا"
flexbox.fancy.title: "تصميم رائع باستخدام flexbox"
flexbox.fancy.1: "سيكون حجم هذا العنصر 200 بيكس إذا كان هناك فراغ مناسب، وسيتقلص إلى 100 بيكسل في حال عدم وجود فراغ. ولن يكون أصغر من 100 بيكسل."
flexbox.fancy.2: "سيكون هذا العنصر دائمًا بحجم 200 بيكسل، مهما حدث."
flexbox.fancy.3: "سيملأ هذا العنصر ثلث المساحة المتبقية"
flexbox.fancy.4: "سيملأ هذا العنصر ثُلثي المساحة المتبقية"
flexbox.centering.title: "التوسيط باستخدام flexbox"
flexbox.centering.1: "أخيرًا، من السهل جدًا توسيط عنصر ما باستخدام css."

frameworks.title: "أُطر عمل css"
frameworks.1: "لأن تصميم الصفحات باستخدام css مُجهد نوعًا ما؛ يوجد هناك أُطر عمل تجعل من أمر التصميم سهلًا. نعني بأُطر العمل أي الأكواد التي قام مطورون بكتابتها سابقًا، وبدلًا من إعادة كتابة الأكواد من جديد؛ فإننا نستخدم أُطر العمل في توفير الوقت والجهد. هنا ستجد بعضًا من أُطر العمل الشهيرة. يُرجى اختيار إطار العمل المناسب، والذي يمكنه تسهيل مهمتك في تصميم الصفحات، والذي يؤدي الغرض الخاص. بالطبع لا غنى عن معرفتك بأساسيات css حتى تتمكن من استخام هذه الأُطر."
frameworks.2: "هذا كان كل شيء! إذا كانت لديك أي استفسارات، أو مشاكل بخصوص هذا الموقع، تفضل<a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\"> بإعلامنا بذلك.</a>!"

about.title: "عن هذا الموقع"
about.credits: "تم كتابته، وبناءه بواسطة: <a href=\"http://incompl.com\">غريغ سميث</a>. تصميم: <a href=\"http://www.isaacdurazo.com/\">إسحاق دورازو</a>. نحن نعمل في شركة <a href=\"http://bocoup.com\">Bocoup</a>."