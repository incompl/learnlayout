# Deutsch

global.title: "Layouten mit CSS"
global.short_title: "CSS"
global.home: "Home"
global.toc: "Inhaltsverzeichnis"
global.next: "Weiter"
global.previous: "Zurück"
global.feedback: "Probleme / Feedback"

util.extra_credit: "Danksagung"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Home"
util.nav.2: "Taco Menu"
util.nav.3: "Getränke"
util.nav.4: "Öffnungszeiten"
util.nav.5: "Lageplan"
util.nav.6: "Kontakt"

index.1: "Diese Seite erläutert die CSS-Grundlagen, die für sämtliche Weblayouts benötigt werden."
index.2: "Ich gehe davon aus, dass du bereits eine Ahnung davon hast, was Selektoren, Eigenschaften und Werte sind. Vermutlich hast du ebenso ein Grundwissen vom Layouten mit CSS, obwohl es dich vielleicht manchmal auf die Palme treibt. Wenn du HTML und CSS von Grund auf lernen möchtest, empfehle ich dir <a href=\"http://learn.shayhowe.com/html-css/\">diesen Beginner’s Guide</a>, <a href=\"http://jendryschik.de/wsdev/einfuehrung/\"diese Einführung</a> oder <a href=\"http://www.little-boxes.de/little-boxes-teil1-online.html\">dieses Buch</a>. Ansonsten hoffe ich, dir einigen Ärger bei deinem nächsten Projekt ersparen zu können."
index.translator: "Übersetzt durch <a href=\"https://github.com/mi1980ge\">mi1980ge</a>, <a href=\"http://www.kristinaschneider.com/\">Kristina Schneider</a>, <a href=\"http://www.chruezundquer.ch\">Christian Zumbrunnen</a>"
index.get_started: "Los geht’s"

no_layout.title: "Kein Layout"
no_layout.1: "Überhaupt kein Layout zu haben ist akzeptabel, wenn du lediglich eine große Spalte mit Inhalt füllen möchtest. Wenn allerdings ein Besucher deiner Website sein Browserfenster maximiert, wird das Lesen für ihn irgendwie unangenehm. Denn nach jeder Zeile müssen seine Augen den Anfang der nächsten Zeile wieder suchen. Vergrößere dieses Fenster, dann siehst du, was ich meine."
no_layout.2: "Bevor wir uns um dieses Problem kümmern, müssen wir sicherstellen, dass wir die sehr wichtige Eigenschaft <code>display</code> richtig verstehen."

display.title: "Die Eigenschaft \"display\""
display.intro: "<code>display</code> ist die wichtigste CSS-Eigenschaft zur Steuerung des Layouts. Jedes HTML-Element hat einen vom Elementtyp abhängigen Standardwert für \"display\". Für die meisten Elemente ist das entweder <code>block</code> oder <code>inline</code>."
display.block.title: "block"
display.block: "<code>div</code> ist das neutrale Block-Element. Ein Block-Element beginnt immer in einer neuen Zeile und wird so breit wie möglich. Weitere gebräuchliche Block-Elemente sind Überschriften <code>h1</code> bis <code>h6</code>, Absätze <code>p</code> oder Formulare <code>form</code>. In HTML5 sind neue Block-Elemente hinzugekommen, zum Beispiel <code>header</code>, <code>footer</code> und <code>section</code>."
display.inline.title: "inline"
display.inline.1: "<code>span</code> ist das neutrale Inline-Element. Ein Inline-Element kann beispielsweise Text in einem Absatz umfließen"
display.inline.2: "z. B. so"
display.inline.3: "ohne den Textfluss im Absatz zu stören. Das <code>a</code>-Element ist das gebräuchlichste Inline-Element weil es für Links verwendet wird."
display.none.title: "none"
display.none.1: "Ein weiterer gebräuchlicher Wert für \"display\" ist <code>none</code>. Einige spezielle Elemente, wie <code>script</code>, nutzen <code>none</code> standardmäßig. Es wird häufig in JavaScript verwendet um Elemente ein- und auszublenden ohne sie tatsächlich zu löschen und neu erstellen zu müssen."
display.none.2: "Davon zu unterscheiden ist <code>visibility</code>. Während die Eigenschaft <code>display</code> <code>none</code> an der Stelle wo das Element gewesen wäre keinen Freiraum lässt, hinterlässt <code>visibility: hidden;</code> einen leeren Platzhalter."
display.other.title: "Weitere display Werte"
display.other: "Es gibt eine Anzahl eher exotischer Werte für \"display\", z. B. <code>list-item</code> and <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Hier findest du eine vollständige Liste</a>. Mit den Werten <code>inline-block</code> und <code>flex</code> werden wir uns später noch beschäftigen."
display.extra: "Wie ich erwähnt habe, besitzt jedes Element einen Standardwert. Dieser lässt sich aber <em>immer</em> überschreiben. Während es keinen Sinn macht ein inline div zu erstellen, lässt sich diese aber Möglichkeit ausnutzen um einem Element einen passenden Display-Wert zu geben. Ein typisches Beispiel ist, Listenelemente mit <code>display: inline</code> zu versehen um ein horizontales Navigationsmenü zu erstellen."

margin_auto.title: "margin: auto;"
margin_auto.1: "Indem man die Breite (<code>width</code>) eines Block-Elements definiert, verhindert man, dass es sich nach rechts und links bis zum Rand des umgebenden Containers ausbreitet. Durch Setzen des rechten und linken Außenabstands (margin) auf <code>auto</code> lässt sich das Element horizontal zentrieren. Das Element nimmt so die definierte Breite an und teilt den verbleibenden Außenabstand gleichmäßig auf."
margin_auto.2: "Nur wenn das Browserfenster schmaler wird als unser Element breit ist, ergibt sich ein Problem. Der Browser behebt dies, indem er der Seite eine horizontale Bildlaufleiste (scrollbar) hinzufügt. Das lässt sich verbessern."

max_width.title: "max-width"
max_width.1: "Die Situation bessert sich wenn wir anstelle von <code>width</code> <code>max-width</code> verwenden. Das ist wichtig damit unsere Seite auch auf Mobilgeräten gut nutzbar ist. Ändere die Fenstergröße dieser Seite um zu sehen, was ich meine!"
max_width.2: "Übrigens: <code>max-width</code> wird von <a href=\"http://caniuse.com/#search=max-width\">von allen wichtigen Browsern unterstützt</a> inklusive IE7+. Du kannst es daher unbeschwert einsetzen."

box_model.title: "Das Box Model"
box_model.intro: "Wenn wir über die Breite von HTML-Elementen sprechen, müssen wir auch über die damit zusammenhängenden Probleme sprechen: Das <em>box model</em>. Denn wenn du die Breite eines Elements festlegst, kann es durchaus sein, dass das Element größer wird, als du wolltest, denn der Rahmen (border) und Innenabstand (padding) werden das Element über die definierte Breite hinaus vergrößern. Schau dir das folgende Beispiel an in welchem zwei Elemente mit dem selben Wert in <code>width</code> trotzdem verschiedene Breiten erhalten."
box_model.simple: "Ich bin schmaler …"
box_model.fancy: "und ich größer!"
box_model.outro: "Seit Generationen löst man dieses Problem mit Mathematik: CSS-Autoren verwendeten in ihren Stylesheets einen kleineren Wert für <code>width</code> als erwünscht, indem sie die Werte von <code>padding</code> und <code>border</code> davon subtrahierten. Glücklicherweise ist dies heutzutage nicht mehr nötig."

box_sizing.title: "box-sizing"
box_sizing.1: "Über die Zeit haben Leute festgestellt, dass Mathematik nicht allzu lustig ist. So wurde eine neue CSS-Eigenschaft namens <code>box-sizing</code> geschaffen. Wenn man einem Element die Eigenschaft <code>box-sizing: border-box;</code> gibt, werden die Werte von <code>padding</code> und <code>border</code> nicht mehr der Breite hinzugerechnet. Hier noch einmal das Beispiel der vorherigen Seite aber nun mit <code>box-sizing: border-box;</code> für beide Element:"
box_sizing.simple: "Wir haben jetzt die gleiche Größe!"
box_sizing.fancy: "Hurra!"
box_sizing.2: "Weil dies so viel besser ist, gibt es CSS-Autoren die möchten, dass sich alle Elemente auf allen ihren Seiten so verhalten. Dazu verwenden sie dieses CSS auf allen ihren Seiten:"
box_sizing.3: "Damit wird sichergestellt, dass die Größe aller Elemente auf diese intuitivere Weise definiert werden kann."
box_sizing.4: "Weil <code>box-sizing</code> ziemlich neu ist, sollte man die vendor-prefixes <code>-webkit-</code> und <code>-moz-</code> benützen, wie ich es in diesen Beispielen getan habe. Mit dieser Technik können die experimentellen Eigenschafen für spezifische Browser freigeschaltet werden. Ebenfalls ist zu beachten, dass dies erst ab <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a> funktioniert."

position.title: "position"
position.intro: "Um komplexere Layouts zu erstellen, müssen wir über die <code>position</code>-Eigenschaft reden. Sie hat mehrere mögliche Werte, deren Namen keinen Sinn machen und unmöglich zu merken sind. Lass sie uns nacheinander durchgehen. Aber vielleicht solltest du diese Seite in deinen Bookmarks speichern."
position.static.title: "static"
position.static.1: "<code>static</code> ist der Standardwert. Ein Element mit <code>position: static;</code> wird auf keine besondere Art positioniert. Ein Element mit diesem Wert wird als <em>nicht positioniert</em> bezeichnet und ein Elemement mit jedem anderen Wert für die Position als <em>positioniert</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> verhält sich genau wie <code>static</code> außer es werden weitere Eigenschaften gesetzt."
position.relative.2: "Setzt man die Eigenschaften <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> eines relativ positionten Elementes passt sich dessen Position relativ zu seiner normalen Position an. Der restliche Inhalt wird nicht angepasst um die Lücke, die das Element hinterlassen hat, zu füllen."
position.fixed.title: "fixed"
position.fixed.1: "Ein fixiertes Element wird relativ zum Viewport platziert. Das heißt, das Element bleibt an der selben Stelle, auch wenn die Seite gescrollt wird. Wie bei <code>relative</code> werden die Eigenschaften <code>top</code>, <code>right</code>, <code>bottom</code> und <code>left</code> benutzt"
position.fixed.2: "Sicher hast du das fixierte Element in der unteren rechten Ecke dieser Seite bemerkt. Hiermit erlaube ich dir, ihm deine Aufmerksamkeit zu schenken. Hier ist der CSS Code, der es da hingebracht hat:"
position.fixed.3: "Ein fixiertes Element hinterlässt keine Lücke, wo es normalerweise auf der Seite wäre."
position.fixed.4: "Mobile Browser unterstützen fixed erstaunlich schlecht. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Hier erfährst du mehr über diese Situation</a>."
position.fixed.example: "Hallo! Ignorier mich erst einmal."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> ist der kniffeligste position-Wert. <code>absolute</code> verhält sich wie <code>fixed</code> aber relativ zum <em>nächten positionierten Ancestor</em> statt relativ zum Viewport. Hat ein absolut positioniertes Element keinen positionierten Ancestor, benutzt es den document body und bewegt sich auch mit der gescrollten Seite. Zur Erinnerung: Ein \"positioniertes\" Element ist eines das als Position irgendeinen Wert außer <code>static</code> hat."
position.absolute.2: "Hier ist ein Beispiel:"
position.absolute.relative: "Dieses Element ist relativ positioniert. Wäre es <code>position: static;</code> würde sein absolut positionieres child ausbrechen und am document body ausgerichtet."
position.absolute.absolute: "Dieses Element ist absolut positioniert. Es wird relativ zum Elternelement positioniert."
position.absolute.3: "Dieser Kram ist schwierig, aber es ist wichtig um großartige CSS Layouts zu erstellen. Auf der nächsten Seite benutzen wir <code>position</code> in einem praktischeren Beispiel."

position_example.title: "position Beispiel"
position_example.1: "Dieser Positions-Kram macht wahrscheinlich mit einem praktischen Beispiel mehr Sinn. Unten siehst du ein realisches Seitenlayout."
position_example.section.1: "Der <code>margin-left</code> Stil der <code>section</code> stellt den Platz für das <code>nav</code>-Element sicher."
position_example.section.2: "Schau was passiert wenn du das Browserfenster verkleinerst. Funktioniert super!"
position_example.2: "Dieses Beispiel funktioniert nur, weil der Container höher ist als die Navigation. Wäre das nicht so, würde die Navi über ihren Container hinausragen. Auf den folgenden Seiten besprechen wir Techniken, die ihre eigenen Stärken und Schwächen haben."
position_example.footer: "Wenn du einen fixierten Header oder Footer verwendest, stell sicher, dass du Platz dafür hast! Ich habe ein <code>margin-bottom</code> auf den <code>body</code> angewendet."

float.title: "float"
float.1: "Eine weitere Eigenschaft, die für Layouts verwendet wird, ist <code>float</code>. Float ist dazu vorgesehen Text um Bilder fließen zu lassen:"

clear.title: "clear"
clear.floating: "I feel like I'm floating!"
clear.1: "Die <code>clear</code> Eigenschaft kontrolliert das Verhalten von floats. Vergleiche ein mal diese beiden Beispiele:"
clear.2: "Hier kommt das <code>section</code>-Element zwar nach dem <code>div</code>. Aber weil das <code>div</code> nach links floated, passiert folgendes: Der Text in der <code>section</code> fließt um das <code>div</code> herum, und die <code>section</code> umschließt das ganze. Wie bekommen wir die <code>section</code> nun dazu, auch tatsächlich nach dem gefloateten Element zu erscheinen?"
clear.3: "Mit Hilfe der <code>clear</code>-Eigenschaft haben wir die <code>section</code> nun unter das <code>div</code> geschoben. Der Wert <code>left</code> hebt das Umfließen um Elemente, die nach links gefloatet sind, auf. Das funktioniert auch für nach rechts gefloatete Elemente mit <code>right</code>, oder für beide Seiten mit <code>both</code>."

clearfix.title: "Der clearfix hack"
clearfix.1: "Es gibt da dieses nervige Problem, das bei der Verwendung von floats auftreten kann:"
clearfix.2: "Ups … dieses Bild ist größer als das Element, das es umschließt, und es ist gefloated, deshalb wächst es über den Rand des <code>div</code> hinaus!"
clearfix.3: "Buh. Das können wir geradebiegen, allerdings ist die Methode nicht besonders sauber. Sie nennt sich <em>clearfix hack</em>."
clearfix.4: "Versuchen wir mal, diese Zeilen hinzuzufügen:"
clearfix.5: "Mal sehen, was passiert:"
clearfix.6: "Schon viel besser!"
clearfix.7: "Das funktioniert in modernen Browsern. Um auch IE6 zu unterstützen, musst Du noch diese Zeilen hinzufügen:"
clearfix.8: "Ein paar exotischere Browser brauchen noch mal ein bisschen extra Zuwendung. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">Die clearfix-Welt ist ziemlich ausufernd</a>, aber diese einfache Lösung reicht für die allermeisten modernen Browser vollkommen aus."

float_layout.title: "Float Layout Beispiel"
float_layout.1: "Oft werden ganze Layouts mit <code>float</code> realisiert. Hier ist das gleiche Layout, das wir mit <code>position</code> gemacht haben. Nur diesmal haben wir <code>float</code> benutzt."
float_layout.2: "Dieses Beispiel funktioniert genau wie das letzte. Beachte, dass wir einen <code>clearfix</code> auf den Container angewendet haben. Das ist zwar in diesem Beispiel nicht notwendig, wäre es aber wenn <code>nav</code> länger wäre als der nicht gefloatete Inhalt."

percent.title: "Breiten in Prozent"
percent.1: "Prozent ist eine Maßeinheit relativ zum umgebenden Block. Es ist großartig für Bilder: hier machen wir ein Bild das immer 50% so breit ist wie sein Container. Mach das Browserfenster kleiner und schau, was passiert!"
percent.2: "Du könntest sogar <code>min-width</code> und <code>max-width</code> verwenden, um einzuschränken wie klein oder groß das Bild wird."

percent.layout.title: "Layout mit prozentualen Breiten"
percent.layout.1: "Du kannst Prozent für Layouts verwenden, aber das braucht mehr Arbeit.In diesem Beipiel bricht der Inhalt von <code>nav</code> unbefriedigend um, wenn es zu schmal wird. Es kommt immer darauf an, was am besten mit deinem Inhalt funktioniert."
percent.layout.2: "Wird das Layout zu schmal, wird <code>nav</code> zerquetscht. Noch schlimmer ist, dass du nicht <code>min-width</code> verwenden kannst, um das zu vermeiden, weil die rechte Spalte sich nicht daran halten würde."

media_queries.title: "media queries"
media_queries.1: "\"Responsive Design\" nennt sich die Vorgehensweise eine Site zu bauen, dass sie dem Browser oder Gerät auf welchem sie angeschaut wird antwortet (\"responds\")… und immer großartig aussieht."
media_queries.2: "Media queries sind das mächtigste Werkzeug um dies zu ermöglichen. Lasst uns unser Layout mit prozentualen Breiten nehmen und es einspaltig darstellen sobald das Browserfenster zu klein für ein Menü in der Sidebar wird:"
media_queries.3: "Wenn du jetzt deine Browserfenstergröße änderst, passiert etwas ziemlich Cooles…"
media_queries.4: "Tada! Nun schaut unser Layout sogar auf mobilen Geräten super aus. Hier findest du <a href=\"http://mediaqueri.es/\">einige populäre Seiten, welche Mediaqueries auf diese Weise nutzen.</a>. Es lässt sich noch weit mehr als <code>min-width</code> und <code>max-width</code> auslesen: Schau in der <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">the MDN Documentation</a> nach um mehr zu lernen."
media_queries.5: "Mit Hilfe von <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a> kannst du dein Layout auf mobilen Geräten sogar noch besser ausschauen lassen."
inline_block.title: "inline-block"
inline_block.1: "Du kannst ein Boxen-Gitter erstellen, welches die Browserbreite ausfüllt und hübsch umbricht. Dies war schon geraume Zeit mit Hilfe von <code>float</code> möglich, aber jetzt mit <code>inline-block</code> ist es noch einfacher. Lass uns Beispiele für beide Vorgehensweisen anschauen."
inline_block.hard_way.title: "Der mühsame Weg (mit float)"
inline_block.hard_way.box: "Ich \"floate!\""
inline_block.hard_way.after: "Ich nutze \"clear \" damit ich nicht neben die über mir liegende Box \"floate\"."
inline_block.easy_way.title: "Die einfache Art (mit inline-block)"
inline_block.easy_way.info: "Du kannst das Gleiche erreichen mit dem Wert <code>inline-block</code> für <code>display</code>."
inline_block.easy_way.box: "Ich bin ein inline block!"
inline_block.easy_way.after: "I benötige kein <code>clear</code>. Cool, oder?"
inline_block.2: "Für den <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 und IE7</a> braucht es extra Anstrengungen um <code>inline-block</code> zu unterstützen. Manchmal sprechen die Leute davon, dass es etwas braucht um bei einem<code>inline-block</code> etwas namens <code>hasLayout</code> zu provozieren. Darüber brauchst du nur Bescheid zu wissen, falls du alte Browser unterstützen willst. Folge dem vorherigen Link über IE6 und IE7 Support wenn du mehr lernen willst. Andernfalls lass uns weiter machen."

inline_block_layout.title: "inline-block Layout"
inline_block_layout.1: "<code>inline-block</code> lässt sich auch für Layouts nutzen. Ein paar Dinge muss man dabei im Blick behalten:"
inline_block_layout.caveat.1: "<code>inline-block</code> Elemente werden von der Eigenschaft <code>vertical-align</code> betroffen. Wahrscheinlich soll sie <code>top</code> sein."
inline_block_layout.caveat.2: "Du musst jeder Spalte eine Breite geben."
inline_block_layout.caveat.3: "Falls im HTML-Code Leerzeichen dazwischen sind, erzeugt das eine Lücke zwischen den Spalten."
inline_block_layout.tada: "Tada!"

column.title: "Spalten"
column.1: "Es gibt eine neue Gruppe von CSS-Eigenschaften, die es uns einfach machen mehrspaltige Texte zu erstellen. Schau es dir an:"
column.2: "CSS columns (Spalten) sind ganz neu. Du musst also vendor-prefixes verwenden, und es wird bis <a href=\"http://caniuse.com/#search=column\"> IE9 und im Opera Mini</a> nicht funktionieren. Es gibt einige weitere spalten-spezifische CSS-Eigenschaften. <a href=\"http://www.quirksmode.org/css/multicolumn.html\">Klick hier um mehr darüber zu lesen</a>. Ansonsten: weiter zu nächsten Thema."

flexbox.title: "flexbox"
flexbox.1: "Der neue <code>flexbox</code> Layout Modus macht sich auf, die Art, wie wir Layouts in CSS erstellen neu zu definieren. Unglücklicherweise hat sich die Spezifikation in letzter Zeit sehr verändert. Dadurch wird es in verschiedenen Browsern ganz unterschiedlich umgesetzt. Trotzdem möchte ich ein paar Beispiele zeigen, damit du eine Ahnung hast, was kommen wird. Momentan implementiert einzig Google Chrome die <a href=\"http://www.w3.org/TR/css3-flexbox/\">neueste Version des Standards.</a>."
flexbox.2: "Es gibt massenhaft veraltete flexbox Ressourcen überall im Netz. Wenn du mehr über flexbox wissen willst, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">beginne hiermit</a> um zu lernen wie du erkennen kannst, ob eine Information aktuell ist. Ich habe selber einen <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">ausführlichen Artikel zur neuesten Verion der Syntax</a> geschrieben."
flexbox.3: "Es gibt noch viel mehr, was du mit Flexbox erreichen kannst. Dies sind nur ein paar Beispiele um dir einen Vorgeschmack zu geben:"
flexbox.simple.title: "Einfaches Layout mit Flexbox"
flexbox.simple.1: "Flexbox ist so einfach!"
flexbox.fancy.title: "Originelles Layout mit Flexbox"
flexbox.fancy.1: "Ich werde 200px breit sein wenn es dafür genügend Platz hat und auf 100px zusammenschrumpfen wenn nicht. Aber noch schmaler werde ich nicht werden."
flexbox.fancy.2: "Ich bleibe unter allen Umständen 200px breit."
flexbox.fancy.3: "Ich werde 1/3 der restlichen Breite einnehmen."
flexbox.fancy.4: "Ich werde 2/3 der restlichen Breite einnehmen."
flexbox.centering.title: "Zentrieren mit Hilfe von Flexbox"
flexbox.centering.1: "Und schließlich ist es einfach etwas mit Hilfe von CSS vertikal zu zentrieren!"

frameworks.title: "CSS Frameworks"
frameworks.1: "Weil Layouten mit CSS so trickreich ist, gibt es zahlreiche CSS Frameworks, die dir die Arbeit erleichtern. Hier sind ein paar, falls du sie ausprobieren möchtest. Ein Framework zu nutzen ist nur eine gute Idee, wenn es genau das tut, was auch Deine Website tun soll. Frameworks sind kein Ersatz dafür zu verstehen, wie CSS funktioniert."
frameworks.2: "Das wär's! Wenn du irgend eine Rückmeldung zu dieser Seite hast <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">lass es mich bitte via Twitter wissen.</a>!"

about.title: "Über diese Site"
about.credits: "Geschrieben und umgesetzt durch <a href=\"http://incompl.com\">Greg Smith</a>. Design von <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Wir arbeiten für <a href=\"http://bocoup.com\">Bocoup</a>."
