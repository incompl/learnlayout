# Dutch / Netherlands

global.title: "Leer CSS Layout"
global.short_title: "CSS"
global.home: "Home"
global.toc: "Inhoudsopgave"
global.next: "Volgende"
global.previous: "Vorige"
global.feedback: "Issues / Terugkoppeling"

util.extra_credit: "extra credit"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Home"
util.nav.2: "Taco Menu"
util.nav.3: "Lijst met concepten"
util.nav.4: "Uren"
util.nav.5: "Richtingen"
util.nav.6: "Contact"

index.1: "Deze website leert je de CSS fundamenten die gebruikt worden in de layout van elke website."
index.2: "Ik ga ervan uit dat je al bekend bent met selectors, properties en values. Daarbij weet je ook al het één en ander omtrent layout, maar vind je dat je het nog niet volledig onder de knie hebt wat nog regelmatig tot frustraties kan leiden. Als je de beginselen van HTML en CSS wilt leren, bekijk dan <a href=\"http://learn.shayhowe.com/html-css/\">deze handleiding</a>. Ben je hier al ver vooruit, laten we dan eens kijken of we je frustraties kunnen wegnemen bij je volgende project."
index.translator: "Vertaald door Marc Stalfoort"
index.get_started: "Aan de slag"

no_layout.title: "geen layout"
no_layout.1: "Helemaal geen layout hebben is nagenoeg voldoende als het doel is om alle content in één grote kolom te hebben. Echter als de gebruiker het browser scherm erg breed maakt, komt dit de leesbaarheid niet ten goede. Na elke regel moeten de ogen van de gebruiker een heel eind van rechts naar links om bij de volgende regel uit te komen. Probeer het eens om te zien wat ik bedoel!"
no_layout.2: "Voordat we dit probleem gaan oplossen, laten we eerst eens aandachtig naar de belangrijke <code>display</code> property kijken."

display.title: "de \"display\" property"
display.intro: "<code>display</code> is CSS's meest belangrijke property om controle over de layout te krijgen. Elk element heeft een standaard display waarde afhankelijk van welk type element het is. De standaard voor de meeste elementen is <code>block</code> of <code>inline</code>. Een block element is doorgaans aangemerkt als een block-level element. Een inline element daarentegen wordt altijd aangemerkt als inline element."
display.block.title: "block"
display.block: "<code>div</code> is het standaard block-level element. Een block-level element begint op een nieuwe regel en rekt uit zover het kan van links naar rechts. Andere bekende block-level elementen zijn <code>p</code> en <code>form</code>. Sinds HTML5 zijn daar bijvoorbeeld ook <code>header</code>, <code>footer</code>, <code>section</code> aan toegevoegd en zo zijn er nog meer."
display.inline.title: "inline"
display.inline.1: "<code>span</code> is het standaard inline element. Een inline element kan tekst omvatten binnen een paragraaf."
display.inline.2: "zoals dit"
display.inline.3: "zonder de flow van de paragraaf te beïnvloeden. Het <code>a</code> element is het meest voorkomende inline element, aangezien je deze voor links kunt gebruiken."
display.none.title: "none"
display.none.1: "Een ander veel voorkomende display waarde is <code>none</code>. Verschillende speciale elementen zoals <code>script</code> gebruiken deze als standaard. Het is gebruikelijk binnen JavaScript om elementen te verbergen en tonen zonder ze daadwerkelijk te verwijderen en opnieuw aan te maken door middel van deze waarde."
display.none.2: "Dit verschilt ten opzichte van de <code>visibility</code> property. Het zetten van de <code>display</code> naar <code>none</code> zal het element als niet bestaand aanmerken in de opmaak van de pagina. <code>visibility: hidden;</code> daarentegen zal het element verbergen en de ruimte in beslag nemen alsof het element wel zichtbaar was."
display.other.title: "andere display waardes"
display.other: "Er zijn nog meerdere, soms zelfs exotische, display waardes zoals <code>list-item</code> en <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Hier is een uitgebreide lijst</a>. We zullen <code>inline-block</code> en <code>flex</code> later behandelen."
display.extra: "Zoals ik al eerder zei, heeft elk element een standaard display type. Echter, dit is <em>altijd</em> te overschrijven! Hoewel het niet veel zin zou hebben om een inline div te maken, is er wel de mogelijkheid om de display van elementen met een bepaalde semantiek aan te passen. Een veelgebruikt voorbeeld is <code>li</code> elementen inline maken om een horizontaal menu samen te stellen."

margin_auto.title: "margin: auto;"
margin_auto.1: "Door het zetten van een <code>width</code> op een block-level element zal deze niet volledig uitgerekt worden van links tot aan rechts binnen zijn container. Hierna kan je, door middel van het zetten van de linker en rechter marges op <code>auto</code>, het element horizontaal centreren binnen die container. Het element zal de width aannemen zoals gespecificeerd en de resterende ruimte zal evenredig over beide marges verdeeld worden."
margin_auto.2: "Het probleem dat zich voor kan doen als het browser venster smaller is dan de width van het element, zal de browser dit oplossen door een horizontale scrollbalk te tonen. Dit is op te lossen..."

max_width.title: "max-width"
max_width.1: "Door gebruik te maken van de <code>max-width</code> property in plaats van de <code>width</code> in deze situatie, zal dit de afhandeling van de browser op kleine vensters verbeteren. Dit is belangrijk als een website ook goed werkbaar moet zijn voor mobiel. Verklein je browser venster om het uit te vinden!"
max_width.2: "Trouwens, de <code>max-width</code> property is <a href=\"http://caniuse.com/#search=max-width\">ondersteund door alle grote browsers</a> waaronder IE7+, dus je hoeft niet bang te zijn om het te gebruiken."

box_model.title: "box model"
box_model.intro: "Nu we het over de width hebben, zullen we het ook over de grootste kanttekening hebben: de <em>box model</em>. Als je de width van een element zet, dan kan deze groter lijken dan de waarde die je hebt vastgelegd. De border en padding van het element rekken zich uit buiten de gespecificeerde width. Kijk naar het volgende voorbeeld waar 2 elementen met dezelfde width waardes uiteindelijk verschillend eruit zien als resultaat."
box_model.simple: "Ik ben kleiner..."
box_model.fancy: "En ik ben groter!"
box_model.outro: "Al generaties lang ligt de oplossing van dit probleem in de wiskunde. CSS auteurs hebben altijd een kleinere width waarde geschreven waar de padding en de border van afgetrokken waren. Gelukkig is dit tegenwoordig niet meer nodig..."

box_sizing.title: "box-sizing"
box_sizing.1: "Van al die generaties realiseerden men dat wiskunde niet altijd leuk is, en zo is een nieuwe CSS property <code>box-sizing</code> in het leven geroepen. Als je <code>box-sizing: border-box;</code> op een element zet, zal de padding en de border geen invloed meer uitoefenen op de width. Hier is het voorbeeld van de vorige pagina, maar met de <code>box-sizing: border-box;</code> op beide elementen:"
box_sizing.simple: "We zijn nu even breed!"
box_sizing.fancy: "Hooray!"
box_sizing.2: "Aangezien dit veel beter is, willen sommige mensen dit op alle elementen op alle pagina's toepasbaar hebben. Zulke mensen zetten het volgende als CSS op hun pagina's:"
box_sizing.3: "Dit garandeert dat alle elementen altijd op deze meer intuïtieve manier hun afmetingen krijgen."
box_sizing.4: "Aangezien <code>box-sizing</code> relatief nieuw is, zal je de prefixes <code>-webkit-</code> en <code>-moz-</code> voor nu nog moeten gebruiken, zoals te zien is in de voorbeelden. Deze techniek maakt het mogelijk om experimentele features in specifieke browsers te gebruiken. Let wel, ondersteuning voor deze property gaat al vanaf <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Met het oog op meer complexere layouts, zullen we de <code>position</code> property gaan bekijken. Het heeft een aantal verschillende waardes, de naamgeving is niet altijd even duidelijk en intuïtief en zijn soms moeilijk te onthouden. We gaan ze één voor één behandelen, dus wellicht is het verstandig om deze pagina te bookmarken."
position.static.title: "static"
position.static.1: "<code>static</code> is de standaard waarde. Een element met <code>position: static;</code> is niet op een speciale manier gepositioneerd. Een static element gaat onder de noemer <em>niet gepositioneerd</em> in tegenstelling tot een element met een andere waarde die als <em>gepositioneerd</em> wordt bestempeld."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> gedraagt zich hetzelfde als <code>static</code> tenzij je nog een aantal extra properties opneemt."
position.relative.2: "Het zetten van de <code>top</code>, <code>right</code>, <code>bottom</code>, en <code>left</code> properties van een relative gepositioneerd element zal ervoor zorgen dat de positie aangepast wordt ten opzichte van zijn originele positie. Andere content zal niet aangepast worden om te zien of dit in de overgebleven ruimte past."
position.fixed.title: "fixed"
position.fixed.1: "Een fixed element is relatief gepositioneerd ten opzichte van de viewport, wat inhoud dat dit element altijd op dezelfde plek staat ongeacht of de pagina wordt gescrold. Net als met <code>relative</code> worden de <code>top</code>, <code>right</code>, <code>bottom</code>, en <code>left</code> properties gebruikt."
position.fixed.2: "Ik ben er zeker van dat het fixed element in de hoek rechtsonder van de pagina niet onopgemerkt is gebleven. Hierbij krijg je toestemming om ernaar te kijken. Hieronder de CSS om dit te bewerkstelligen:"
position.fixed.3: "Een fixed element laat geen ruimte achter in de pagina waar het normaal gesproken zou hebben gestaan."
position.fixed.4: "Mobiele browsers hebben verrassend genoeg erg wankele support voor de fixed property. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Leer hier meer over deze situatie</a>."
position.fixed.example: "Hallo! Nog geen aandacht aan me besteden."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> is de lastigste waarde voor position. <code>absolute</code> gedraagt zich net als <code>fixed</code> behalve deze relatief tot <em>de dichtsbijzijnde gepositioneerde voorouder element</em> in tegenstelling tot relatief in de viewport. Als een absolute gepositioneerd element geen gepositioneerde voorouders heeft, dan wordt de document body gebruikt en zal het mee scrollen met de pagina. Voor de duidelijkheid, een \"positioned\" element is een element wiens positie alles is behalve <code>static</code>."
position.absolute.2: "Hier is een eenvoudig voorbeeld:"
position.absolute.relative: "Dit element is relative gepositioneerd. Als dit element <code>position: static;</code> was, zou het absolute gepositioneerde kind ontsnappen en relatief gepositioneerd worden ten opzichte van de document body."
position.absolute.absolute: "Dit element is absolute gepositioneerd. Het is relatief gepositioneerd ten opzichte van zijn parent."
position.absolute.3: "Het is lastige materie, maar wel essentieel voor het maken van grote CSS layouts. Op de volgende pagina gebruiken we <code>position</code> in een meer praktisch voorbeeld."

position_example.title: "position voorbeeld"
position_example.1: "Genoeg over al die gepositioneerde elementen, het wordt doorgaans toch altijd duidelijker met een praktisch voorbeeld. Hieronder een realistische pagina layout."
position_example.section.1: "De <code>margin-left</code> style voor <code>section</code>s zorgt ervoor dat er genoeg ruimte is voor het <code>nav</code> element."
position_example.section.2: "Let op wat er gebeurt als je je browser venster verkleint of vergroot. Het werkt goed!"
position_example.2: "Dit voorbeeld werkt goed omdat de container groter is dan de nav. Als dat niet zo was, zou de nav buiten de container vallen ofwel uit de flow treden. In de komende pagina's nemen we andere layout technieken onder de loep met verschillende voor- en nadelen."
position_example.footer: "Als je een fixed header of footer gebruikt, zorg er wel voor dat er ruimte voor is! Ik heb een <code>margin-bottom</code> op de <code>body</code> gezet."

float.title: "float"
float.1: "Nog een CSS property die gebruikt kan worden voor layout is <code>float</code>. Float is bedoeld om tekst rondom afbeeldingen te laten lopen, zoals hieronder:"

clear.title: "clear"
clear.floating: "Ik ben lekker aan het float'en!"
clear.1: "De <code>clear</code> property is belangrijk voor het controleren van het gedrag van floats. Vergelijk de volgende twee voorbeelden:"
clear.2: "In dit geval is het <code>section</code> element eigenlijk na de <code>div</code>. Hoewel de <code>div</code> ge-float is naar links, is het volgende aan de hand: de tekst in de <code>section</code> wordt rondom de <code>div</code> ge-float en de <code>section</code> omhelst het geheel. Wat als we nu de <code>section</code> na het floated element zouden willen tonen?"
clear.3: "Doordat <code>clear</code> gebruikt wordt, hebben we nu het section element onder de floated <code>div</code> kunnen krijgen. Om elementen te clear'en die links ge-float zijn maak je gebruik van de <code>left</code> waarde. Daarnaast zijn er ook nog <code>right</code> en <code>both</code> als waardes."

clearfix.title: "de clearfix hack"
clearfix.1: "Hier is een raar, slecht ding dat soms kan gebeuren als floats worden gebruikt:"
clearfix.2: "Ow ow... deze afbeelding is groter dan het containing element en het is ge-float, dus het breekt uit de flow van de container!"
clearfix.3: "Boe. Er is een manier om dit te fixen, maar het is een lelijke. Ook wel genaamd de <em>clearfix hack</em>."
clearfix.4: "Laten we eens proberen om deze nieuwe CSS toe te voegen:"
clearfix.5: "Eens kijken wat er nu gebeurt:"
clearfix.6: "Veel beter!"
clearfix.7: "Dit werkt in moderne browsers. Als je ook support voor IE6 nodig hebt, zul je het volgende nodig hebben:"
clearfix.8: "Er zijn exotische browsers die iets meer aandacht nodig hebben. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">De wereld van clearfixing is nogal schrikaanjagend</a>, maar deze eenvoudige oplossing werkt in de meeste browsers van deze tijd."

float_layout.title: "float layout voorbeeld"
float_layout.1: "Het is heel gebruikelijk om een volledige layout met <code>float</code> te doen. Hier is dezelfde layout zoals we die al eerder met <code>position</code> gemaakt hadden, alleen nu met <code>float</code>."
float_layout.2: "Dit voorbeeld werkt net als de laatste. Let wel dat we <code>clearfix</code> op de container hebben gezet. In dit geval is het niet nodig, maar als het <code>nav</code> element langer zou zijn dan de niet-floated elementen moet het wel."

percent.title: "width in percentages"
percent.1: "Percentage is een meeteenheid relatief ten opzichte van het containing element. Het is perfect voor afbeeldingen: hier zetten we de width van de afbeelding op altijd 50% van de width van de container. Verklein je browser om te zien wat er gebeurt!"
percent.2: "Je kan zelfs gebruik maken van <code>min-width</code> en <code>max-width</code> om de afmetingen van de afbeelding te limiteren!"
percent.layout.title: "percentage width layout"
percent.layout.1: "Je kan percentages gebruiken voor layout, maar dit kan resulteren in meer werk. In dit voorbeeld, het <code>nav</code> element begint op een onvriendelijke manier te wrappen als het scherm te smal wordt. Het komt erop neer wat het beste werkt voor de content die erin komt."
percent.layout.2: "Als deze layout te smal wordt, zal het <code>nav</code> element geplet worden. Erger nog, je kunt geen <code>min-width</code> gebruiken om de nav te fixen omdat de rechter kolom het niet zal respecteren."

media_queries.title: "media queries"
media_queries.1: "\"Responsive Design\" is de strategie in het maken van een site die \"reageert\" naar de browser en het apparaat waar het op getoond wordt... zodoende er super uit te zien ongeacht alles."
media_queries.2: "Media queries is de meest krachtige tool om dit te bewerkstelligen. We nemen onze percentage layout erbij en passen het aan naar het tonen van één kolom als de browser te smal is om het menu in de sitebar te tonen:"
media_queries.3: "Als je nu je browser gaat verkleinen of vergroten is het nog cooler dan ooit!"
media_queries.4: "Tada! Nu ziet onze layout er ook goed uit op mobiele browsers. Hier zijn <a href=\"http://mediaqueri.es/\">verschillende populaire sites die media queries inzetten om een dergelijk resultaat te behalen</a>. Er is zoveel meer om te detecteren naast <code>min-width</code> en <code>max-width</code>: bekijk de <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">MDN documentatie</a> wat er verder nog mogelijk is."
media_queries.5: "Je kan je layout er zelfs nog beter uit laten zien op mobiel door <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a> te gebruiken."

inline_block.title: "inline-block"
inline_block.1: "Je kan een raster van boxen maken die de breedte van de browser netjes vult en wrapt wanneer nodig is. Dit is al heel lang mogelijk door gebruik te maken van <code>float</code>, maar nu met <code>inline-block</code> is dit nog eenvoudiger geworden. Laten we eens kijken naar voorbeelden van beide benaderingen."
inline_block.hard_way.title: "The Hard Way (met float)"
inline_block.hard_way.box: "Ik ben aan het float'en!"
inline_block.hard_way.after: "Ik maak gebruik van clear zodat ik niet float naast bovenstaande boxen."
inline_block.easy_way.title: "The Easy Way (met inline-block)"
inline_block.easy_way.info: "Je kan hetzelfde effect bereiken door de <code>inline-block</code> waarde te zetten op de <code>display</code> property."
inline_block.easy_way.box: "Ik ben een inline block!"
inline_block.easy_way.after: "Ik hoef de <code>clear</code> niet te gebruiken in deze situatie. Nice!"
inline_block.2: "Je moet wel wat extra werk doen voor <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 en IE7 support</a> met <code>inline-block</code>. Soms praten mensen over <code>inline-block</code> die <code>hasLayout</code> activeert, maar dit is alleen van toepassing als support voor oudere browsers gewenst is. Bekijk bovenstaande link als je meer wilt weten over IE6 en IE7 support. Anders, laten we vooral doorgaan."

inline_block_layout.title: "inline-block layout"
inline_block_layout.1: "Je kan <code>inline-block</code> ook gebruiken voor layouts. Echter, zijn er wel een aantal punten om in je achterhoofd te houden:"
inline_block_layout.caveat.1: "<code>inline-block</code> elementen worden beïnvloed door de <code>vertical-align</code> property, die je zeer waarschijnlijk naar <code>top</code> wilt zetten."
inline_block_layout.caveat.2: "Je moet de width van elke kolom zetten"
inline_block_layout.caveat.3: "Er zal een gat ontstaan tussen de kolommen als er elke vorm van witruimte tussen ze zit in de HTML"
inline_block_layout.tada: "Tada!"

column.title: "column"
column.1: "Er is een nieuwe set aan CSS properties die je op een eenvoudige manier multi-column tekst laat maken. Laten we eens kijken:"
column.2: "CSS column is nog erg nieuw, dus je zal wel prefixes moeten gebruiken en het zal niet werken <a href=\"http://caniuse.com/#search=column\">in IE9 of in Opera Mini</a>. Er zijn nog meer column gerelateerde properties, zoals <a href=\"http://www.quirksmode.org/css/multicolumn.html\">column-count, column-fill, etc.</a>. Als je klaar bent met absorberen van deze nieuwe functionaliteit, laten we vooral doorgaan naar het volgende onderwerp."

flexbox.title: "flexbox"
flexbox.1: "De nieuwe <code>flexbox</code> layout mode is gereed om de manier hoe we layouts in CSS doen opnieuw te definiëren. Helaas is de specificatie de laatste tijd vaak gewijzigd, waardoor verschillende browsers verschillende implementaties hebben gedaan. Maar toch wil ik een aantal voorbeelden met je delen zodat je in kan zien wat er te wachten staat. Deze voorbeelden werken vooralsnog alleen op de Chrome flexbox implementatie, gebaseerd op de <a href=\"http://www.w3.org/TR/css3-flexbox/\">laatste versie van de standaard</a>."
flexbox.2: "Er zijn veel gedateerde flexbox resources verspreid. Als je meer wilt leren over flexbox <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">start hier</a> en leer onder andere hoe een nieuwe of gedateerde resource te ontdekken. Ik heb een <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">gedetailleerd artikel gebaseerd op de laatste syntax</a> geschreven."
flexbox.3: "Er is zoveel meer wat je met flexbox kan doen, hier een paar voorbeelden om je een idee te geven:"
flexbox.simple.title: "Eenvoudige Layout met Flexbox"
flexbox.simple.1: "Flexbox is zo simpel!"
flexbox.fancy.title: "Fancy Layout met Flexbox"
flexbox.fancy.1: "Ik zal 200px zijn als er meer ruimte is, en ik zal krimpen tot 100px als er geen ruimte meer is maar niet kleiner dan dat."
flexbox.fancy.2: "Ongeacht alles, zal ik altijd 200px zijn."
flexbox.fancy.3: "Ik zal 1/3 van de resterende width opvullen."
flexbox.fancy.4: "Ik zal 2/3 van de resterende width opvullen."
flexbox.centering.title: "Centreren met Flexbox"
flexbox.centering.1: "Eindelijk is het makkelijk om iets verticaal te centreren in CSS!"

frameworks.title: "css frameworks"
frameworks.1: "Omdat CSS layout zo lastig is, zijn er CSS frameworks beschikbaar om het eenvoudiger te maken. Hier zijn er een aantal als je ze wilt proberen. Het gebruik van een framework is alleen een goed idee als het doet wat je site moet gaan doen. Ze zijn niet een vervanger om te weten hoe CSS werkt."
frameworks.2: "Dit was het! Elke vorm van terugkoppeling over deze site kan je me <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">laten weten via Twitter</a>!"

about.title: "over deze website"
about.credits: "Gedocumenteerd en ontwikkeld door <a href=\"http://incompl.com\">Greg Smith</a>. Design door <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Wij werken bij <a href=\"http://bocoup.com\">Bocoup</a>."
