# Traditional Chinese

global.title: "學習 CSS 版面配置"
global.short_title: "CSS"
global.home: "首頁"
global.toc: "目錄"
global.next: "下一頁"
global.previous: "上一頁"
global.feedback: "意見回饋"

util.extra_credit: "補充說明"
util.ipsum: "天布麼次，今親他利用或母電氣能真友老久來進登出總形：國大系思樂麼問做去將地樹作、維你我們，師為什那，會輕步省生一們些的間海學了；能大作以電回球地現廠美馬方，別到最刻親個神故靜西招國老北氣反大育發商告味必資始定可對謝度的！找謝對環的片他這下：母來感從還，叫我火教會經神送兒沒業是地場色是身收但進經道。媽兒們有先他怕雖發形的手最出在個是我不引最引現小企是而？一子很及女種走？他傳樣會當工視各過男二年傳，但式希叫裡上優經的友定你……不前空國會世解，也斯他不體裡一光車別？加去命最點著如推著人所間國作感我觀，可場是過入指待說，理求面輕美事福出過白到片不是的快究是漸片力男創北一落我成不，精能等動張色輪酒、吃理站毒上出一，黃時回趣吃然，意小童提，到苦際一出如遊軍現媽濟手喜……現結從過計不太聞經是她！變連事成通，中財陸呢十母裝有他成綠上童不個。"
util.nav.1: "首頁"
util.nav.2: "關於我們"
util.nav.3: "產品資訊"
util.nav.4: "服務項目"
util.nav.5: "作品展示"
util.nav.6: "聯絡我們"

index.1: "本站將會教你如何利用 CSS 來設計網頁版面配置(Layout)。"
index.2: "我假設你已經了解CSS選取器 (Selector)、屬性 (Property) 和屬性值 (Value) 是什麼，而且你可能也知道所謂「版面配置」到底在講什麼，然而你也知道學會這些知識可能不是件容易的事。如果你想要從頭開始學習 HTML 和 CSS 的話，建議你可以看一下<a href=\"http://learn.shayhowe.com/html-css/\">這篇教學文章</a>。"
index.translator: "本文由 <a href=\"http://blog.miniasp.com/\" target=\"_blank\">Will 保哥</a> 翻譯，歡迎造訪 <a href=\"https://www.facebook.com/will.fans\" target=\"_blank\">Will 保哥的技術交流中心</a><br><br>"
index.get_started: "開始學習"

no_layout.title: "沒有版面配置"
no_layout.1: "如果你只想把所有內容都塞進網頁裡，那麼不用設定任何版面配置當然也可以。然而，如果你使用寬螢幕或超大螢幕瀏覽網頁的話，在閱讀網頁的過程中就會有點困擾，因為每讀完一行，你的視覺焦點要從螢幕最右邊到移動到最左邊，才能開始看第二行的文字。你調整一下瀏覽器視窗大小你就知道我意思了！"
no_layout.2: "在解決這個問題之前，我們必須先確認大家都了解 CSS 裡面一個重要 <code>display</code> 屬性。"

display.title: "關於 \"display\" 屬性"
display.intro: " <code>display</code> 是設計 CSS 版面配置中最重要的屬性，每個 HTML 元素都有一個預設的 display 值，不同的元素屬性會有不同的預設值。大部分元素的 display 屬性，預設值通常是 <code>block</code> 或 <code>inline</code> 其中一個。若該元素的 display 屬性被標示為 block 就被稱為「區塊元素」，若被標示為 inline 就稱為「行內元素」。"
display.block.title: "block"
display.block: " <code>div</code> 是一個標準的區塊元素。一個區塊元素會讓其內容從新的一行開始顯示，並盡可能的撐滿容器。其他常用的區塊元素包括 <code>p</code> 、 <code>form</code> 以及一些 HTML5 新出現的元素，例如：<code>header</code> 、 <code>footer</code> 、 <code>section</code> 等等。"
display.inline.title: "inline"
display.inline.1: " <code>span</code> 是一個標準的行內元素。一個行內元素可以在段落中"
display.inline.2: "像這樣"
display.inline.3: "包裹一些文字片段，透過 CSS 點綴其樣式，且不會打亂段落原本的版面配置。 <code>a</code> 元素是最常見的行內元素，它可以被用作超連結之用。"
display.none.title: "none"
display.none.1: "另一個常用的 display 值是 <code>none</code> 。有一些特殊的元素 display 預設值會套用 <code>none</code> 屬性值，例如 <code>script</code> 元素就是個典型的例子。<code>display:none</code> 通常會搭配 JavaScript 一起使用，我們可以透過 JavaScript 動態修改元素的 display 屬性，用以隱藏或顯示該元素，而不是將元素從頁面中刪除或重建。"
display.none.2: "<code>display</code> 和 <code>visibility</code> 屬性不一樣，把 <code>display</code> 設定成 <code>none</code> 不會保留元素原本該顯示的空間，但是 <code>visibility: hidden;</code> 會讓元素的內容看不見，但會保留原本內容應該顯示的空間，只是看不到內容而已。"
display.other.title: "其他 display 值"
display.other: "還有很多其他的 display 值，例如 <code>list-item</code> 和 <code>table</code>  等等，<a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">這裡有一份詳細的列表</a>，你可以連進去查看完整的屬性值清單。稍後我們會探討 <code>inline-block</code> 和 <code>flex</code> 這兩個屬性。"
display.extra: "就像我之前說過的，每個元素都有一個預設的 display 屬性，不過你可以<em>隨時隨地</em>地覆蓋這個屬性值。雖然我們把 div 修改成一個「行內元素」好像還蠻怪的，不過實務上來說我們會把某些元素修改掉預設的 display 屬性，好讓它可以呈現有特定語義的元素。其中比較常見的例子就是把 <code>li</code> 元素修改成 inline，以便我們將該元素正確地呈現在水平的選單上。"

margin_auto.title: "margin: auto;"
margin_auto.1: "設定區塊元素的 <code>width</code> 屬性，可以避免該元素從左到右撐滿容器，然後你可以設定左右外邊距（margin-left 與 margin-right）為 <code>auto</code> 來使其水平居中。元素在顯示的時候，只會顯示到你所指定的寬度，然後剩餘的寬度平均的散落在左右兩邊的邊距上。"
margin_auto.2: "唯一的問題是，當瀏覽器視窗寬度比元素的寬度還要窄時，瀏覽器就會出現水平捲軸。讓我們接著來改進這個狀況......"

max_width.title: "關於 max-width 屬性"
max_width.1: "使用 <code>max-width</code> 替代 <code>width</code> 可以更完美的處理當瀏覽器視窗小於元素寬度的情況，這點在行動裝置上顯得更為重要，你現在就可以調整瀏覽器視窗大小看看這頁的變化！"
max_width.2: "另外，<code>max-width</code> 屬性幾乎在<a href=\"http://caniuse.com/#search=max-width\">所有的主流瀏覽器</a>都有支援（包括 IE7+ 以後版本），所以各位可以不用擔心有瀏覽器相容性的問題。"

box_model.title: "關於 Box Model（區塊模型）"
box_model.intro: "在我們在討論 CSS 寬度時，不得不提到關於 <em>Box Model</em> 的議題。當你設定了元素的寬度，實際顯示的元素卻能夠超出你的設定：因為元素的邊框（margin）和內距（padding）會撐開元素。看看下面的例子，我們設定了兩個樣式，這兩個樣式擁有相同寬度設定，但最後元素顯示的實際寬度卻不太一樣。"
box_model.simple: "我小一些..."
box_model.fancy: "我比較大！"
box_model.outro: "以前的人，大多人的解決方法都是靠數學運算，也就是負責撰寫 CSS 的人通常會設定比他實際想要得寬度還小一些，然後減去已知的內距和邊框的寬度。感謝主，你現在不需要再這麼做了..."

box_sizing.title: "關於 box-sizing 屬性"
box_sizing.1: "經過了幾個世代的轉變，人們意識到自己運算出元素的寬度實在很無趣，所以終於出現了一個叫做 <code>box-sizing</code> 的 CSS 屬性。當你設定一個元素樣式為 <code>box-sizing: border-box;</code>，這個元素的內距和邊框將不會增加元素本身的寬度。我們用跟上一頁一樣的例子，但我們將兩個元素都設定了 <code>box-sizing: border-box;</code> ："
box_sizing.simple: "我們現在一樣大小了！"
box_sizing.fancy: "喔耶！"
box_sizing.2: "這樣寫好像沒有幫助多少，有些 CSS 開發人員想要將這個屬性套用到所有元素上，此時你可以將以下 CSS 樣式套用在頁面上："
box_sizing.3: "這樣可以確保所有元素的寬度都可以用比較直觀的方式來定義。"
box_sizing.4: "因為 <code>box-sizing</code> 算是個比較新的屬性，所以你還應該還是要加上我之前在例子中使用的 <code>-webkit-</code> 和 <code>-moz-</code> 前綴（Prefixes），這樣才能啟用特定瀏覽器實驗中的 CSS 特性。請記得該屬性從 <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a> 之後就開始支援。"

position.title: "關於 position 屬性"
position.intro: "為了設計出更複雜的版面配置，我們需要探討關於 <code>position</code> 這個屬性。它有一大堆的屬性值，且這些屬性值不但很難懂，也特別難記憶。讓我們一個一個介紹吧，不過也建議你把這頁加入到我的最愛（書籤）裡。"
position.static.title: "static"
position.static.1: " <code>static</code> 是預設值。任何套用 <code>position: static;</code> 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的配置自動排版在頁面上，所有其他的屬性值都代表該元素會被定位在頁面上。"
position.relative.title: "relative"
position.relative.1: " <code>relative</code> 表現的和 <code>static</code> 一樣，除非你增加了一些額外的屬性。"
position.relative.2: "在一個設定為 <code>position: relative</code> 的元素內設定 <code>top</code> 、 <code>right</code> 、 <code>bottom</code> 和 <code>left</code> 屬性，會使其元素「相對地」調整其原本該出現的所在位置，而不管這些「相對定位」過的元素如何在頁面上移動位置或增加了多少空間，都不會影響到原本其他元素所在的位置。"
position.fixed.title: "fixed"
position.fixed.1: "固定定位（<code>position: fixed</code>）的元素會相對於瀏覽器視窗來定位，這意味著即便頁面捲動，它還是會固定在相同的位置。和 <code>relative</code> 一樣，我們會使用 <code>top</code> 、 <code>right</code> 、 <code>bottom</code> 和 <code>left</code> 屬性來定位。"
position.fixed.2: "我相信你已經注意到頁面右下角的固定定位元素，你現在可以注意看一下，這裡有它所使用的 CSS 樣式："
position.fixed.3: "固定定位元素不會保留它原本在頁面應有的空間，不會跟其他元素的配置互相干擾。"
position.fixed.4: "令人驚訝的是，行動版裝置上的瀏覽器對 <code>fixed</code> 的支援度比想像的還差很多。<a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">學習關於此問題的相關文章</a>."
position.fixed.example: "哈囉～ 先不要太關注我！"
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> 應該是最弔詭的 position 屬性值。<code>absolute</code> 與 <code>fixed</code> 的行為很像，不一樣的地方在於 <code>absolute</code> 元素的定位是在他所處上層容器的相對位置。如果這個套用 <code>position: absolute</code> 的元素，其上層容器並沒有「可以被定位」的元素的話，那麼這個元素的定位就是相對於該網頁所有內容（也就是 &lt;body&gt; 元素）最左上角的絕對位置，看起來就是這張網頁的絕對位置一樣，所以當你的畫面在捲動時，該元素還是會隨著頁面捲動。請記得，只有套用 <code>position: static</code> 的元素屬於「不會被特別定位」的元素，套用 <code>static</code> 以外的屬性值都算是「可以被定位」的元素。"
position.absolute.2: "這裡有一個簡單的例子："
position.absolute.relative: "這個元素是相對定位的，如果它是 <code>position: static;</code>，那麼它的子元素如果套用「絕對定位」的話，就會跳過它，並直接參考 body 元素的相對位置。"
position.absolute.absolute: "這個元素被設定成絕對定位（<code>position: absolute;</code>），它會相對於它的父元素進行定位（相對於父元素的絕對定位）。"
position.absolute.3: "這部分確實比較難以理解，但它是讓你可以設計出一個良好 CSS 版面配置的必要知識。下一頁我們將會使用 <code>position</code> 來做出更實務的範例。"

position_example.title: "更完整的 position 範例"
position_example.1: "透過實務範例可以幫助我們更加理解 <code>position</code> 的用法，如下範例是一個實際的網頁版面配置："
position_example.section.1: " <code>section</code> 元素的 <code>margin-left</code> 樣式確保有足夠的空間容納 <code>nav</code> 元素。"
position_example.section.2: "你可以看看當你調整瀏覽器視窗大小時發生了什麼事，版面配置的效果還不錯！"
position_example.2: "這個例子可以運作是因為 container 比 nav 元素還高，如果容器比 nav 元素還低的話，nav 就會溢出（overflow）到容器外面。在接下來的單元，我們會探討其他的版面配置技術，它們也都各有優劣。"
position_example.footer: "如果你使用了一個固定定位（<code>position: fixed</code>）的頁首或頁尾，請確保有足夠的空間來顯示它們！我在這個例子裡，在 <code>body</code> 元素的樣式上加了 <code>margin-bottom</code> 屬性，並預留了 120px 的空間。"

float.title: "關於 float 屬性"
float.1: "另一個會在版面配置中使用的 CSS 屬性是 <code>float</code> 。<code>float</code> 可用於實現文繞圖，如下："

clear.title: "關於 clear 屬性"
clear.floating: "我感覺好像我在漂浮！"
clear.1: "若想控制 <code>float</code> 元素的行為，了解 <code>clear</code> 屬性是非常重要的，請比較以下兩個例子："
clear.2: "這個例子的 <code>section</code> 元素實際上是在 <code>div</code> 之後，然而因為 <code>div</code> 元素會浮動到左邊，所以變成了這樣：這個 <code>section</code> 元素的內容漂浮在 <code>div</code> 旁邊，並且 <code>section</code> 元素反而把所有東西包起來了。如果我們想讓 <code>section</code> 出現在這些 <code>float</code> 元素之後呢？"
clear.3: "使用 <code>clear</code> 我們就可以將這個 <code>section</code> 區塊移到浮動元素 <code>div</code> 的下方，你可以在這個 <code>section</code> 元素加上一個 <code>clear: left;</code> 來宣告清空所有標示 <code>float: left;</code> 的元素，也可以用 <code>clear: right;</code> 或 <code>clear: both;</code> 來清空 <code>float: right;</code> 或同時清除 <code>float: left</code> 與 <code>float: right</code> 的浮動元素。"

clearfix.title: "clearfix 密技"
clearfix.1: "在使用 <code>float</code> 的時候經常會遇到一個奇怪且糟糕的事："
clearfix.2: "喔，不 ...... 這個圖片比包含它的元素還高，而且它是浮動的，於是它就溢出到了容器外面！"
clearfix.3: "是的，有個方法可以解決這個問題，不過這方式還蠻髒的，它叫做 <em>clearfix 密技（hack）</em>."
clearfix.4: "讓我們加入一些新的 CSS 樣式："
clearfix.5: "我們現在來看看發生了什麼事："
clearfix.6: "好多了！"
clearfix.7: "這個密技可以用在現代的瀏覽器上，但如果你還想支援 IE6，你就必須加入如下樣式："
clearfix.8: "某些特別的瀏覽器可能需要注意，<a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">clearfixing 的世界是很可怕的</a>，但這個簡單的密技可以套用在這些主流瀏覽器上。"

float_layout.title: "float 版面配置範例"
float_layout.1: "完全使用 <code>float</code> 來實現頁面的版面配置是很常見的。這裡有個我之前用 <code>position</code> 實現的版面配置例子，但這次我使用 <code>float</code> 來實現。"
float_layout.2: "這個例子和之前那個例子的結果一模一樣。請注意我們在容器上放了一個 <code>clearfix</code> 密技上去，原本在這個例子中是不需要的，但是當 <code>nav</code> 比這些「固定的」的內容（也就是那些沒有套用 <code>float</code> 的內容）還要高時就需要了。"

percent.title: "百分比寬度"
percent.1: "百分比是一種相對於目前容器元素寬度的單位。它對圖片很有用：如下我們讓圖片寬度永遠等於容器寬度的 50%，請試著將頁面縮小來看看效果！"
percent.2: "你甚至還能同時使用 <code>min-width</code> 與 <code>max-width</code> 來限制圖片的最大或最小寬度！"


percent.layout.title: "百分比寬度的版面配置"
percent.layout.1: "你可以用百分比做版面配置，但是這需要更多的工作。在下面的例子中，當視窗寬度很窄時 <code>nav</code> 的內容就會被擠壓得非常難看。總之，你要選一種最合適你內容的方式來排版。"
percent.layout.2: "當版面配置很窄時， <code>nav</code> 就會被擠扁。更糟的是，你不能在 nav 上使用 <code>min-width</code> 屬性來改善這個問題，因為視窗太小時，右邊的那欄的內容還是會壓到 <code>nav</code> 上面。"

media_queries.title: "媒體查詢（media queries）"
media_queries.1: "「響應式設計（Responsive Design）」是一種讓網站針對不同的瀏覽器和上網裝置「響應」不同顯示效果的策略，讓網站不管在任何情況下都能完美呈現！"
media_queries.2: "「媒體查詢」是完成「響應式設計」最強大的工具。讓我們使用百分比寬度來做版面配置，然後當瀏覽器寬度小到無法容納側邊欄中的選單時，把版面配置顯示成一欄："
media_queries.3: "當你調整瀏覽器視窗大小時，版面配置比以前更酷了！"
media_queries.4: "太棒了！我們現在的版面配置在行動版瀏覽器上也可以表現得很優異。這裡有一些<a href=\"http://mediaqueri.es/\">同樣使用了媒體查詢的知名網站</a>。在 <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">MDN 文件</a>中你還可以學到更多有關媒體查詢的知識。"
media_queries.5: "你還可以使用 <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a> 讓你的版面配置在行動裝置的瀏覽器上呈現得更完美。"

inline_block.title: "display: inline-block"
inline_block.1: "你可以建立一堆區塊自動填滿瀏覽器，在過去很長的一段時間大家都使用 <code>float</code> 來做流動式的自動排版，但現在你可以選擇 <code>display: inline-block</code> 來實作，這方法會更加簡單。使用 <code>display: inline-block</code> 的元素就像 <code>display: inline</code> 的元素一樣，但你可以設定 <code>width</code> 與 <code>height</code> 屬性。讓我們看看以下的例子："
inline_block.hard_way.title: "困難的方法（使用 float）"
inline_block.hard_way.box: "我在漂浮！"
inline_block.hard_way.after: "我使用 <code>clear</code>，所以我不會浮動到上面那堆盒子的旁邊。"
inline_block.easy_way.title: "容易的方法（使用 inline-block）"
inline_block.easy_way.info: "你可以用 <code>display: inline-block;</code> 來實現相同效果。"
inline_block.easy_way.box: "我是一個行內元素（inline-block）"
inline_block.easy_way.after: "這次我不需要用 <code>clear</code> 屬性了。讚！"
inline_block.2: "要使用 <code>inline-block</code> 你得額外做些事來支援 <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 和 IE7</a>。有些時候人們談到 <code>inline-block</code> 會觸發所謂 <code>hasLayout</code> 的東西，你只需要知道那是用來支援舊版 IE 瀏覽器用的。如果你對此很感興趣，可以在上面那個<a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">超連結</a>中找到更詳細的資訊。否則我們就繼續下去吧。"

inline_block_layout.title: "使用 inline-block 版面配置"
inline_block_layout.1: "你可以使用 <code>inline-block</code> 進行版面配置，但有一些事情你必須記得："
inline_block_layout.caveat.1: " <code>vertical-align</code> 會影響到 <code>inline-block</code> 元素，你可能會把它的值設定為 <code>top</code>。"
inline_block_layout.caveat.2: "你需要設定每一欄的寬度。"
inline_block_layout.caveat.3: "在 HTML 原始碼中，如果元素之間有空白字元，那麼欄與欄之間會產生間隔。"
inline_block_layout.tada: "太棒了！"

column.title: "column"
column.1: "有一組新的 CSS 屬性可以幫你輕鬆的實現多欄文字的版面配置。你看："
column.2: "CSS3 Multiple Columns 是很新的標準，所以你需要使用針對不同瀏覽器專用的前綴，並且它不支援 <a href=\"http://caniuse.com/#search=column\">IE9 以下和 Opera Mini 版本</a>。還有許多和 cloumn-* 相關的屬性，<a href=\"http://www.quirksmode.org/css/multicolumn.html\">點擊這裡瞭解更多</a>。否則讓我們進入下一個主題。"

flexbox.title: "flexbox"
flexbox.1: "新的 <code>flexbox</code> 技術重新定義了使用 CSS 版面配置的方法。遺憾的是 flexbox規範最近的變動過多，導致不同瀏覽器之間對它的實作也有所差異，不過我仍想分享一些例子來讓你知道即將發生的改變。這些例子目前只能運作在有實作<a href=\"http://www.w3.org/TR/css3-flexbox/\">最新版標準</a>的<a href=\"http://caniuse.com/flexbox\">某些瀏覽器</a>上。"
flexbox.2: "網路上有不少過時的 flexbox 資料，如果你想瞭解更多有關 flexbox 的內容，可以<a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">從這裡</a>學習如何辨識資料是否過時。我也寫過一份<a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">關於最新語法的詳細文章</a>。"
flexbox.3: "你還可以使用 flexbox 做到更多版面配置的技巧，這裡只是一些讓你瞭解概念的例子而已："
flexbox.simple.title: "使用 Flexbox 配置簡單的版面"
flexbox.simple.1: "Flexbox 好簡單！"
flexbox.fancy.title: "使用 Flexbox 配置複雜的版面"
flexbox.fancy.1: "空間足夠的時候，我的寬度是 200px；如果空間不足，我會變窄到 100px，但不會再更窄了"
flexbox.fancy.2: "無論如何我的寬度一直都會是 200px"
flexbox.fancy.3: "我會佔滿剩餘寬度的 1/3"
flexbox.fancy.4: "我會佔滿剩餘寬度的 2/3"
flexbox.centering.title: "使用 Flexbox 配置居中的版面"
flexbox.centering.1: "CSS 總算有了一種可以簡單完成的版面垂直置中的方法了！"

frameworks.title: "CSS 框架"
frameworks.1: "因為 CSS 版面配置有點難用，市面上有不少 CSS 框架可以用來配置版面，這裡有整理一些讓你參考。要使用框架幫你進行版面配置，只有當這個框架真正符合你需求時，使用框架才是個好主意，然而了解 CSS 的運作方式是無可取代的。"
frameworks.2: "就這樣！如果你對本站有任何反饋，請在 <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">Twitter</a> 上聯繫我！"

about.title: "關於本站"
about.credits: "本站由 <a href=\"http://incompl.com\">Greg Smith</a> 撰寫與架設，由 <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a> 設計。我們在 <a href=\"http://bocoup.com\">Bocoup</a> 工作。"
