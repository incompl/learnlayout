# Brazilian Portuguese

global.title: "Aprenda Layout com CSS"
global.short_title: "CSS"
global.home: "Início"
global.toc: "Sumário"
global.next: "Próximo"
global.previous: "Anterior"
global.feedback: "Erros / Sugestões"

util.extra_credit: "bônus"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Início"
util.nav.2: "Taco Menu"
util.nav.3: "Rascunhos"
util.nav.4: "Horas"
util.nav.5: "Direções"
util.nav.6: "Contato"

index.1: "Este site ensina os fundamentos de CSS que são utilizados em qualquer layout de sites na Web."
index.2: "Suponho que você saiba o que são seletores, propriedades e valores. Provavelmente também sabe alguma coisa sobre layout, mas ainda seja uma atividade que incomoda você. Caso você queira aprender HTML e CSS desde o início, é bom dar uma olhada <a href=\"http://learn.shayhowe.com/html-css/\">neste tutorial</a>. Se este não for o seu caso, vamos ver se conseguimos livrar você do estresse no seu próximo projeto."
index.translator: "Traduzido por <a href=\"http://leobalter.github.io\">Leo Balter</a>, <a href=\"http://www.betomuniz.com\">Beto Muniz</a> e <a href=\"http://www.thiagoq.com\">Thiago Quintino</a>"
index.get_started: "Começar"

no_layout.title: "sem layout"
no_layout.1: "Não ter um layout pode parecer aceitável se tudo o que você queira seja apenas uma coluna de conteúdo. Mesmo assim, se um usuário estiver utilizando o navegador expandido em uma tela muita larga, isso se torna ruim para ler: depois de cada linha seus olhos percorrem uma longa distancia até o início da próxima linha. Redimensione a janela do seu navegador para entender o que estou dizendo!"
no_layout.2: "...antes de corrigirmos este problema, vamos ter certeza de que estamos claros sobre a importante propriedade <code>display</code>."

display.title: "a propriedade \"display\""
display.intro: "<code>display</code> é a propriedade mais importante do CSS para controlar o layout. Cada elemento tem um valor padrão para o <code>display</code> dependendo de seu tipo. O valor padrão na maioria dos elementos é normalmente <code>block</code> ou <code>inline</code>. Um elemento com valor <code>block</code> é chamado de elemento de nível de bloco ou apenas elemento de bloco. Um elemento com valor <code>inline</code> é sempre chamado de elemento de linha."
display.block.title: "block"
display.block: "<code>div</code> é o exemplo de bloco mais comum. O elemento de bloco sempre começa em uma nova linha e se expande pra esquerda e direita o tanto quanto for possível. Outros elementos de bloco comuns são <code>p</code> e <code>form</code>, e agora no HTML5 temos: <code>header</code>, <code>footer</code>, <code>section</code> e outros."
display.inline.title: "inline"
display.inline.1: "<code>span</code> é o elemento de linha padrão. Um elemento de linha pode preencher algum texto dentro de um parágrafo"
display.inline.2: "como esse"
display.inline.3: "sem quebrar o fluxo daquele parágrafo. O elemento <code>a</code> é o elemento de linha mais comum, já que ele é utilizado para links."
display.none.title: "none"
display.none.1: "Outro valor comum do <code>display</code> é o <code>none</code>. Alguns elementos específicos como o <code>script</code> utilizam este valor por padrão. Ele é normalmente utilizado através do JavaScript para esconder e exibir elementos sem realmente os remover nem recriar."
display.none.2: "Ele é bem diferente de <code>visibility</code>. Marcando o <code>display</code> com o valor <code>none</code> vai exibir a página como se o elemento não existisse. Com <code>visibility:hidden</code> o elemento fica invisível, porém ele permanece ocupando o espaço em que estaria totalmente visível."
display.other.title: "outros valores da propriedade display"
display.other: "Existem vários outros valores diferentes para o display, tais como: <code>list-item</code> e <code>table</code>. <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/CSS/display\">Veja aqui a listagem de todos</a>. Ainda vamos discutir sobre <code>inline-block</code> e <code>flex</code> mais adiante."
display.extra: "Como mencionei, cada elemento possui um tipo padrão de display. No entanto, você <em>sempre</em> poderá substituí-los! Embora não faça sentido uma <code>div</code> no modo de linha, você pode fazer isso para personalizar a visualização de elementos com semânticas particulares. Um exemplo comum é aplicar <code>display:inline</code> no elemento <code>li</code> para menus horizontais."

margin_auto.title: "margin: auto;"
margin_auto.1: "Definir a largura (<code>width</code>) de um elemento de bloco previne que ele se estique para as pontas do elemento onde está contido tanto pra esquerda quanto para a direita. Logo, você pode modificar as margens à esquerda e à direita em automático - <code>auto</code> - para centralizar o elemento horizontalmente aonde está contido. O elemento vai ocupar a largura especificada, então o espaço restante será dividido igualmente entre as duas margens."
margin_auto.2: "O problema que pode ocorrer é quando a janela do navegador é menor que a largura do elemento. O browser resolve isso criando uma barra de rolagem horizontal na página. Vamos melhorar isso..."

max_width.title: "max-width"
max_width.1: "Utilizando <code>max-width</code> no lugar de <code>width</code> nessa situação melhora como o navegador lida com janelas pequenas. Isso é importante quando se está fazendo um site para dispositivos móveis. Redimensione esta página e veja o que acontece!"
max_width.2: "A propósito, a propriedade <code>max-width</code> é <a href=\"http://caniuse.com/#search=max-width\">suportada pela maioria dos navegadores</a> incluindo IE7+, ou seja, não tenha medo de aplicá-la."

box_model.title: "O box model"
box_model.intro: "Enquanto falamos de largura, também devemos falar sobre o maior problema da propriedade <code>width</code>: o <em>box model</em>. Quando você define a largura de um elemento, este elemento pode parecer maior do que o definido: as bordas - <code>border</code> - e o preenchimento - <code>padding</code> - vão esticar o elemento além da largura definida. Veja o exemplo a seguir que demonstra dois elementos com os mesmos valores para a largura <code>width</code>, porém com tamanhos diferentes."
box_model.simple: "Sou menor..."
box_model.fancy: "E eu sou maior!"
box_model.outro: "Por gerações, a solução para esse problema tem sido a matemática. Os autores de CSS sempre escreviam simplesmente um valor de largura menor do que queria, subtraindo o valor do <code>padding</code> e <code>border</code>. Felizmente, você não precisa mais fazer isso..."

box_sizing.title: "box-sizing"
box_sizing.1: "Com o tempo, as pessoas perceberam que aquela matemática não era interessante. Logo, criaram uma propriedade do CSS chamada <code>box-sizing</code>. Quando você define <code>box-sizing: border-box;</code> em um elemento, os valores do <code>padding</code> e do <code>border</code> não são adicionados em sua largura. Aqui está o mesmo exemplo da página anterior, porém com a propriedade <code>box-sizing: border-box;</code> aplicada nos dois elementos:"
box_sizing.simple: "Temos o mesmo tamanho agora!"
box_sizing.fancy: "Legal!"
box_sizing.2: "Já que isso é bem melhor, algumas pessoas definem que todos os elementos em suas páginas funcionem dessa forma. Alguns escrevem o seguinte CSS em suas páginas:"
box_sizing.3: "Isso assegura que todos os elementos serão dimensionados da maneira mais intuitiva."
box_sizing.4: "Uma vez que a propriedade <code>box-sizing</code> é muito nova, é recomendado utilizar os \"vendor prefixes\" <code>-webkit-</code> e <code>-moz-</code> por enquanto, como foram demonstrados nos exemplos. E tenha em mente que essa propriedade é somente <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Com a finalidade de desenvolvermos layouts mais complexos, precisamos discutir sobre a propriedade <code>position</code>. Esta propriedade possui diversos valores possíveis e seus nomes não fazem sentido e são impossíveis de lembrar. Vamos ver um por um, mas talvez seja bom você também marcar esta página."
position.static.title: "static"
position.static.1: "o valor <code>static</code> é o valor padrão de todos os elementos HTML. Um elemento com <code>position: static;</code> não se posiciona de maneira especial, seria o mesmo que dizer que o elemento <em>não</em> tem posição definida ou então que um elemento com o atributo <code>position</code> definido seria <em>posicionado</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> se comporta igualmente ao <code>static</code>, a menos que se adicione propriedades extras no estilo do elemento."
position.relative.2: "Definindo as propriedades <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code> em um elemento <em>position:relative</em> o ajustamos em relação à posição atual dele. Outros conteúdos não vão se ajustar para se encaixarem em qualquer espaço deixado por esse elemento."
position.fixed.title: "fixed"
position.fixed.1: "Um elemento fixo - <code>fixed</code> - é posicionado relativamente ao \"viewport\", isso significa que ele sempre ficará no mesmo lugar mesmo que haja rolagem na página. Assim como o <code>relative</code>, as propriedades <code>top</code>, <code>right</code>, <code>bottom</code> e <code>left</code> também são utilizadas."
position.fixed.2: "Tenho certeza que você notou um elemento fixo no canto direito da tela, estou te dando a permissão de observá-lo agora, e aqui está o CSS aplicado a ele:"
position.fixed.3: "Um elemento fixo não deixa espaço vazio onde ele seria inserindo normalmente no documento."
position.fixed.4: "Navegadores de dispositivos móveis são bastante instavéis ao lidar com o valor <code>fixed</code>. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Saiba mais sobre o assunto aqui</a>."
position.fixed.example: "Oi! Não se importe comigo ainda."
position.absolute.title: "absolute"
position.absolute.1: "O valor <code>absolute</code> é o mais complicado. Este valor se comporta como o <code>fixed</code>, porém tendo como referência a <em>posição do elemento relativo mais próximo</em> de onde está contido, ao invés do viewport. Se um elemento <em>position:absolute</em> não possuir elementos ancestrais posicionados relativamente, ele utilizará o <code>body</code> como referência."
position.absolute.2: "Aqui está um simples exemplo:"
position.absolute.relative: "Este elemento está com <code>position:relative</code>. Se este elemento tivesse com <code>position: static;</code>, seu elemento filho escaparia e se posicionaria em relação ao elemento <code>body</code> do documento"
position.absolute.absolute: "Este elemento é <code>position:absolute</code>. E é posicionado em relação ao seu elemento pai."
position.absolute.3: "Este é um assunto complicado, mas é essencial para estruturação de layouts em HTML com CSS. Na próxima página, vamos utilizar a propriedade <code> position</code> em um exemplo mais prático."

position_example.title: "exemplo de position"
position_example.1: "A propriedade position irá fazer mais de sentido neste exemplo prático. Abaixo temos um exemplo realístico de um layout de uma página."
position_example.section.1: "A propriedade <code>margin-left</code> do elemento <code>section</code> garante que não há espaço a ser preenchido pelo elemento <code>nav</code>. Senão os elementos de absolutos e estáticos iriam sobrepor."
position_example.section.2: "Observe o que acontece quando você redimensiona seu navegador. Ele funciona muito bem!"
position_example.2: "Este exemplo funciona porque o container é maior que o nav. Se não fosse, o nav vazaria do bloco que o envolve. Nas próximas páginas vamos discutir outras técnicas para estruturação HTML e que também possuem diferentes prós e contras."
position_example.footer: "Se você utilizar um cabeçalho ou um rodapé fixo, verifique se há espaço pra isso! Eu coloquei um <code>margin-bottom</code> no elemento <code>body</code>."

float.title: "float"
float.1: "Outra propriedade CSS utilizada para o layout é o <code>float</code>. O Float serve pra quebrar o texto ao redor de imagens, como isso:"

clear.title: "clear"
clear.floating: "Parece que estou flutuando!"
clear.1: "A propriedade <code>clear</code> é importante para controlar o comportamento de elementos flutuantes. Compare estes dois exemplos:"
clear.2: "Nesse caso, o elemento <code>section</code> está declarado depois do elemento <code>div</code>. No entanto, como o elemento <code>div</code> está definido como <code>float:left</code> o que acontece é: o texto dentro do elemento <code>section</code> envolve o elemento <code>div</code> e no fim o elemento <code>section</code> envolve tudo. Mas e se quiséssemos o elemento <code>section</code> depois do elemento <code>div</code>?"
clear.3: "Utilizando a propriedade <code>clear</code> nós agora movemos essa sessao pra baixo da <code>div</code> flututante. Você utiliza o valor <code>left</code> para limpar elementos flutuando à esquerda. E você também pode limpar para a direita com <code>right</code> e para ambas - <code>both</code> as direções."

clearfix.title: "macete do clearfix"
clearfix.1: "Há algo ruim que pode acontecer quando se utiliza elementos flutuantes:"
clearfix.2: "Ops... esta imagem é maior do que o elemento que a contém, e é por isso que ela estoura os limites dele.!"
clearfix.3: "Relaxa. Existe uma maneira de corrigir isto, mas é feio. É chamado <em>macete do clearfix</em>."
clearfix.4: "Vamos tentar adicionar esse novo CSS:"
clearfix.5: "Agora vamos ver o que acontece:"
clearfix.6: "Bem melhor!"
clearfix.7: "Isso funciona para navegadores modernos. Se você precisa dar suporte ao IE6, adicione o seguinte:"
clearfix.8: "Existem outros navegadores exóticos que exigem uma atenção extra. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">O mundo do \"clearfixing\" é bem assustador</a>, mas esta solução simples irá trabalhar para a grande maioria dos navegadores atuais."

float_layout.title: "exemplo de layout flutuante"
float_layout.1: "É muito comum construir layouts inteiros utilizando apenas o <code>float</code>. Aqui está o mesmo layout que fizemos com a propriedade <code>position</code>, mas com a propriedade <code>float</code> sendo utilizada para posicionar os blocos."
float_layout.2: "Este exemplo se comporta exatamente como o anterior. Observe que aplicamos a técnica de <code>clearfix</code> no container. Isto não é necessário neste exemplo, mas seria se o <code>nav</code> fosse maior que o conteúdo não flutuante."

percent.title: "width com porcentagem"
percent.1: "A unidade de porcentagem no CSS é relativa ao bloco onde o elemento está contido. É ótimo para imagens: aqui mostramos uma imagem que sempre terá 50% da largura de seu container. Redimensione a janela do seu navegador para ver o que acontece!"
percent.2: "Você também poderia utilizar <code>min-width</code> e <code>max-width</code> para limitar o máximo e o mínimo de largura que a imagem poderia ter."
percent.layout.title: "layout com porcentagem de largura"
percent.layout.1: "Você pode utilizar porcentagem para estruturar uma página, mas isso exigirá bastante trabalho. No exemplo abaixo, o elemento <code>nav</code> começa a se quebrar na medida em que a tela fica menor. Tudo se resume ao que funciona para o seu conteúdo."
percent.layout.2: "Quando esse layout é muito estreito, o <code>nav</code> fica esmagado. Pior, não podemos utilizar <code>min-width</code> para corrigir isso, pois a coluna à direita não respeitaria isso."

media_queries.title: "media queries"
media_queries.1: "\"Design Responsivo\" é uma técnica que faz com que sua página \"responda\" para o navegador e dispositivo no qual o conteúdo é exibido... para parecer incrível não importe como."
media_queries.2: "Media Queries são as ferramentas mais poderosas para fazer isso. Vamos usar nosso layout que possui larguras baseadas em percentagens e fazê-lo exibir uma única coluna quando o navegador for muito pequeno, permitindo que o menu caiba na barra lateral:"
media_queries.3: "Agora, quando você redimensionar seu navegador fica muito bacana!"
media_queries.4: "Pronto! Agora nosso layout está ótimo até em navegadores de dispositivos móveis. Aqui estão <a href=\"http://mediaqueri.es/\">alguns sites populares que utilizam media queries dessa forma</a>. Há muito mais que você pode detectar além de <code>min-width</code> e <code>max-width</code>: consulte a <a href=\"https://developer.mozilla.org/pt-BR/docs/CSS/Media_queries\">documentação da MDN</a> para aprender mais."
media_queries.5: "Você pode fazer seu layout ficar melhor ainda em dispositivos móveis utilizando a <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta tag: viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Você pode criar um grid de caixas que preenchem a largura do navegador e quebram suavemente. Isso tem sido possível por muito tempo utilizando o <code>float</code>, mas agora com o valor <code>inline-block</code> da propriedade <code>display</code> é bem mais fácil. Vejamos exemplos de ambas as abordagens."
inline_block.hard_way.title: "O modo difícil (com float)"
inline_block.hard_way.box: "Estou flutuando!"
inline_block.hard_way.after: "Estou utilizando a propriedade <code>clear</code>, logo não flutuo ao lado das outras caixas."
inline_block.easy_way.title: "O modo fácil (com inline-block)"
inline_block.easy_way.info: "É possível obter o mesmo efeito utilizando o valor <code>inline-block</code> da propriedade <code>display</code>."
inline_block.easy_way.box: "Eu sou um inline-block!"
inline_block.easy_way.after: "E eu não preciso utilizar <code>clear</code> neste caso. Show de bola!"
inline_block.2: "Para utilizar o <code>display:inline-block</code> você precisará de um pouco mais de trabalho para dar <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">suporte ao IE6 e IE7</a>. Algumas vezes as pessoas falam sobre o <code>inline-block</code> ativando algo chamado <code>hasLayout</code>, mas você só precisa saber sobre isso para dar suporte a navegadores antigos. Veja o link anterior sobre o suporte ao IE6 e IE7 se estiver curioso para aprender mais. Se não, vamos continuar."

inline_block_layout.title: "layout com inline-block"
inline_block_layout.1: "Você também pode usar <code>inline-block</code> para estruturar páginas. Existem algumas coisas para se lembrar:"
inline_block_layout.caveat.1: "Elementos <code>inline-block</code> são afetados pela propriedade <code>vertical-align</code>, caso você queira colocar juntamente com o valor <code>top</code>;"
inline_block_layout.caveat.2: "Você precisa definir a largura de cada coluna;"
inline_block_layout.caveat.3: "Haverá espaçamento entre as colunas caso exista espaço em branco entre elas no HTML."
inline_block_layout.tada: "Pronto!"

column.title: "column"
column.1: "Aqui temos um novo grupo de propriedades CSS que permite facilmente fazer várias colunas de texto. Dê uma olhada:"
column.2: "CSS columns é bem recente, então você precisa utilizar vendor-prefixes, e não funcionará nos navegadores <a href=\"http://caniuse.com/#search=column\">IE9 e Opera Mini</a>. Há outras propriedades relacionadas a colunas, <a href=\"http://www.quirksmode.org/css/multicolumn.html\">clique aqui</a> para saber mais. Se não, vamos para o próximo assunto."

flexbox.title: "flexbox"
flexbox.1: "O novo modo de layout <code>flexbox</code> está pronto para redefinir como fazemos layouts com CSS. Infelizmente a especificação mudou bastante recentemente, então ele está implementado de forma diferente em diversos navegadores. Ainda assim, eu gostaria de compartilhar alguns exemplos para que você saiba o que está por vir. Esses exemplos só funcionam em <a href=\"http://caniuse.com/flexbox\">alguns navegadores</a> que utilizam a <a href=\"http://www.w3.org/TR/css3-flexbox/\">última versão do padrão</a>."
flexbox.2: "Há vários recursos desatualizados sobre flexbox por aí. Se você quiser saber mais sobre Flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">comece aqui</a> para aprender como identificar se o recurso é atual ou não. Eu também escrevi um <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">artigo detalhado com a última versão do padrão</a>."
flexbox.3: "Há muito mais coisas que você pode fazer com flexbox; estes são apenas alguns exemplos para te dar uma ideia:"
flexbox.simple.title: "Layout simples com Flexbox"
flexbox.simple.1: "Flexbox é tão fácil!"
flexbox.fancy.title: "Layout simpático com Flexbox"
flexbox.fancy.1: "Terei 200px de largura enquanto houver espaço, mas diminuirei para 100px de largura caso não haja espaço, mas não menos."
flexbox.fancy.2: "Terei sempre 200px de largura, nada me afetará."
flexbox.fancy.3: "Vou ocupar 1/3 da largura restante."
flexbox.fancy.4: "Vou ocupar 2/3 da largura restante."
flexbox.centering.title: "Centralização com Flexbox"
flexbox.centering.1: "Finalmente, é muito simples centralizar um elemento verticalmente com CSS!"

frameworks.title: "frameworks de css"
frameworks.1: "Criar layouts com CSS pode ser um pouco complicado, entretanto, existem alguns frameworks de CSS que facilitam isso. Abaixo segue uma lista de alguns para você conferir. Utilizar um framework só é uma boa ideia se o framework realmente fizer o que você precisa para o seu site. Mas eles não substituem o conhecimento sobre o funcionamento do CSS."
frameworks.2: "É isso! Se você tiver qualquer feedback sobre este site, por favor <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">me avise no Twitter</a>!"


about.title: "sobre"
about.credits: "Escrito e construído por <a href=\"http://incompl.com\">Greg Smith</a>. Design de <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Nós trabalhamos na <a href=\"http://bocoup.com\">Bocoup</a>."
