# Italian

global.title: "Imparare l'impaginazione con i CSS"
global.short_title: "CSS"
global.home: "Home"
global.toc: "Sommario"
global.next: "Avanti"
global.previous: "Indietro"
global.feedback: "Problemi / Feedback"

util.extra_credit: "informazioni extra"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Home"
util.nav.2: "Taco Menu"
util.nav.3: "Lista delle Bozze"
util.nav.4: "Hours"
util.nav.5: "Directions"
util.nav.6: "Contatti"

index.1: "Questo sito insegna le basi CSS utilizzate per l'impaginazione di qualsiasi sito web."
index.2: "Suppongo che tu sappia già cosa siano i selettori, le proprietà e i valori. E probabilmente sai già qualcosa sull'impaginazione, sebbene sia un'attività che ti fa rodere il fegato. Se vuoi imparare HTML e CSS da zero, dovresti consultare <a href=\"http://learn.shayhowe.com/html-css/\">questo tutorial</a>. Altrimenti, vediamo se possiamo risparmiarti un po' di nervosismo nel tuo prossimo progetto."

index.translator: "Traduzione a cura di <a href=\"http://github.com/NKjoep\">Andrea D.</a>, revisione <a href=\"https://github.com/trumbitta\">William Ghelfi</a>"
index.get_started: "Inizia"

no_layout.title: "no layout"
no_layout.1: "Non avere nessun layout va anche bene se quel che vuoi è una unica colonna di contenuti. Tuttavia, se un utente allarga di molto la finestra del browser, diventa fastidiosa da leggere: dopo ciascuna riga di testo i tuoi occhi devono scorrere troppo a lungo da destra a sinistra per arrivare alla riga successiva. Prova a ridimensionare il tuo browser per vedere con i tuoi occhi cosa intendo!"

no_layout.2: "Prima di risolvere questo problema, assicuriamoci di avere ben chiara l'importante proprietà <code>display</code>."

display.title: "la proprietà \"display\""
display.intro: "<code>display</code> è la più importante proprietà CSS per il controllo dell'impaginazione. Ciascun elemento ha un valore predefinito di display a seconda del tipo di elemento di cui si tratta. Il valore predefinito per la maggior parte degli elementi è solitamente <code>block</code> oppure <code>inline</code>. Un elemento block è spesso chiamato elemento block-level. Un elemento inline è chiamato inline e basta."
display.block.title: "block"
display.block: "<code>div</code> è l'elemento block-level di base. Un elemento block-level inizia su una nuova riga e si allunga da sinistra a destra più che può. Altri elementi block-level comuni sono <code>p</code> e <code>form</code>, in nuovi di HTML5 <code>header</code>, <code>footer</code>, <code>section</code>, e altri."
display.inline.title: "inline"
display.inline.1: "<code>span</code> è l'elemento inline di base. Un elemento inline può anche racchiudere del testo all'interno un paragrafo"
display.inline.2: "come questo"
display.inline.3: "senza disturbare il flusso di quel paragrafo. L'elemento <code>a</code> è il più comune elemento inline, poiché lo utilizzi per i link."
display.none.title: "none"
display.none.1: "Un altro valore comune di display è <code>none</code>. Alcuni elementi specializzati come <code>script</code> lo usano come valore predefinito. È utilizzato comunemente con JavaScript per nascondere e far riapparire elementi senza doverli davvero eliminare per poi ricrearli subito dopo."
display.none.2: "È differente da <code>visibility</code>. Impostare <code>display</code> a <code>none</code> farà in modo che la pagina venga disegnata come se l'elemento non esistesse. <code>visiblity: hidden;</code> nasconderà l'elemento, ma l'elemento occuperà comunque lo spazio che avrebbe occupato se fosse stato completamente visibile."
display.other.title: "altri valori di display"
display.other: "Ci sono un sacco di valori più esotici per display, come <code>list-item</code> e <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Qui una lista esaustiva</a>. Parleremo di <code>inline-block</code> e <code>flex</code> più avanti."
display.extra: "Come dicevo, ciascun elemento ha un tipo di display predefinito. Tuttavia, potrai <em>sempre</em> sovrascriverlo! Sebbene cose come fare un div inline non abbiano poi molto senso, potrai comunque usarlo per personalizzare la visualizzazione di elementi che hanno un preciso significato. Un esempio comune è rendere inline degli elementi <code>li</code> per ottenere menù orizzontali."

margin_auto.title: "margin: auto;"
margin_auto.1: "Impostare la <code>width</code> di un elemento block-level gli impedirà di allargarsi fino ai limiti del suo contenitore da sinistra a destra. Successivamente, potrai impostare i margini sinistro e desto a <code>auto</code> per centrare orizzontalmente quell'elemento all'interno del suo contenitore. L'elemento assumerà la larghezza che hai specificato, quindi lo spazio rimanente sarà diviso equamente tra i due margini."
margin_auto.2: "Il solo problema che si verifica è quando la finestra del browser è più stretta della larghezza del tuo elemento. Il browser risolverà la situazione creando una barra di scorrimento orizzontale sulla pagina. Miglioriamo la situazione..."

max_width.title: "max-width"
max_width.1: "Usando <code>max-width</code> invece di <code>width</code> in questa situazione, migliorerà la gestione di finestre piccole da parte del browser. Ciò è importante quando si sta costruendo un sito per dispositivi mobile. Ridimensiona questa pagina per provare!"
max_width.2: "Tra l'altro, <code>max-width</code> è <a href=\"http://caniuse.com/#search=max-width\">supportato da tutti i maggiori browser</a> incluso IE7+ quindi non devi aver paura di utilizzarlo."

box_model.title: "il box model"
box_model.intro: "Quando parliamo di larghezza, dovremmo parlare del suo più grande limite: il <em>box model</em>. Quando imposti la larghezza di un elemento, l'elemento potrebbe in effetti apparire più grande del valore impostato: i bordi e il padding dell'elemento, lo allargheranno oltre il valore specificato. Guarda l'esempio seguente, in cui due elementi con lo stesso valore di width finiscono per avere differenti misure."
box_model.simple: "Io sono più piccolo..."
box_model.fancy: "E io sono più grande!"
box_model.outro: "Per generazioni, la soluzione a questo problema è stata la matematica. Gli autori di CSS hanno sempre scritto valori di larghezza più piccoli di quelli che avrebbero voluto, sottraendo il padding e i bordi. Fortunatamente, tu non devi più farlo..."

box_sizing.title: "box-sizing"
box_sizing.1: "Nel corso delle generazioni, ci siamo resi conto che la matematica non è divertente, per cui una nuova proprietà chiamata <code>box-sizing</code> è stata creata. Quando imposti <code>box-sizing: border-box;</code> su un elemento, il padding e i bordi di quell'elemento non aumenteranno più la sua larghezza. Ecco lo stesso esempio della pagina precedente, ma con <code>box-sizing: border-box;</code> su entrambi gli elementi:"
box_sizing.simple: "Ora abbiamo le stesse dimensioni!"
box_sizing.fancy: "Urrà!"
box_sizing.2: "Giacché questo metodo è di gran lunga migliore, alcuni autori preferiscono che tutti gli elementi delle loro pagine si comportino in questa maniera. Tali autori usano il seguente codice CSS per le loro pagine:"
box_sizing.3: "Ciò garantisce che tutti gli elementi siano sempre dimensionati in questa maniera più intuitiva."
box_sizing.4: "Dato che <code>box-sizing</code> è abbastanza nuovo, per adesso dovresti usarlo con i prefissi <code>-webkit-</code> e <code>-moz-</code>, come ho fatto in questi esempi. Questa tecnica attiva le funzionalità sperimentali specifiche per i browser. Tieni a mente che è per <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Per poter fare impaginazioni più complesse, dobbiamo discutere della proprietà <code>position</code>. Ha un mucchio di possibili valori, e i loro nomi non hanno senso e sono impossibili da ricordare. Vediamoli uno per uno, ma forse è meglio se aggiungi anche questa pagina ai preferiti."
position.static.title: "static"
position.static.1: "<code>static</code> è il valore predefinito. Un elemento con <code>position: static;</code> non è posizionato in nessun modo particolare. Un elemento statico è detto <em>non posizionato</em> e un elemento con <code>position</code> impostata a qualunque altro valore è detto <em>posizionato</em>"
position.relative.title: "relative"
position.relative.1: "<code>relative</code> si comporta allo stesso modo di <code>static</code> a meno che si aggiungano alcune proprietà extra."
position.relative.2: "Impostare le proprietà <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code> di un elemento posizionato relativamente farà sì che esso risulti spostato dalla sua normale posizione. Gli altri contenuti non si infileranno negli spazi lasciati liberi dall'elemento in questione."
position.fixed.title: "fixed"
position.fixed.1: "Un elemento fisso è posizionato relativamente all'area visualizzata della finestra, il che significa che rimarrà sempre nello stesso posto anche quando la pagina viene scorsa. Così come per <code>relative</code>, vengono utilizzate le proprietà <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code>."
position.fixed.2: "Son sicuro che avrai notato l'elemento fisso nell'angolo in basso a destra della pagina. Ora hai il mio permesso di prestargli attenzione. Qui il codice CSS che lo posiziona laggiù:"
position.fixed.3: "Un elemento fisso non lascia del vuoto nel punto della pagina in cui normalmente sarebbe dovuto essere."
position.fixed.4: "I browser dei dispositivi mobile hanno un supporto soprendentemente traballante per <code>fixed</code>. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Scopri di più sulla situazione qua</a>."
position.fixed.example: "Ciao! Non prestarmi attenzione ancora."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> è il valore di position più complicato. <code>absolute</code> si comporta come fixed tranne per il fatto che si riferisce al <em>più vicino elemento di livello superiore posizionato</em> invece che alla porzione di finestra visibile. Se un elemento posizionato in maniera assoluta non ha un elemento di livello superiore posizionato, utilizza il body del documento, e comunque si muoverà insieme allo scorrimento della pagina. Ricorda, gli elementi \"posizionati\" sono quelli che hanno un qualsiasi valore di position tranne <code>static</code>."
position.absolute.2: "Qui un piccolo esempio:"
position.absolute.relative: "Questo elemento è posizionato relativamente. Se questo elemento avesse <code>position: static;</code> il suo figlio posizionato in maniera assoluta sarebbe scappato via e sarebbe stato posizionato relativamente al body del documento."
position.absolute.absolute: "Questo elemento è posizionato in maniera assoluta. È posizionato relativamente all'elemento che lo contiene."
position.absolute.3: "Questa roba è complicata, ma è essenziale per creare impaginazioni CSS grandiose. Nella prossima pagina useremo <code>position</code> in un esempio più pratico."

position_example.title: "esempio di position"
position_example.1: "Queste cose di position potrebbero avere un pochino più di senso in un esempio pratico. Qui sotto ecco un layout di pagina realistico."
position_example.section.1: "Lo stile di <code>margin-left</code> per le <code>section</code> fa sì che ci sia spazio per il <code>nav</code>. Se così non fosse gli elementi absolute e static si sovrapporrebbero."
position_example.section.2: "Guarda cosa succede se ridimensioni il tuo browser. Funziona bene!"
position_example.2: "Questo esempio funziona perché il contenitore è più alto di nav. Se non lo fosse, nav sborderebbe fuori dal suo contenitore. Nelle pagine a venire discuteremo altre tecniche di impaginazione con differenti pro e contro."
position_example.footer: "Se utilizzi una testata o un footer posizionati fissi, assicurati che ci sia abbastanza spazio per loro! Io metto un <code>margin-bottom</code> nel <code>body</code>."

float.title: "float"
float.1: "Un'altra proprietà css utilizzata per impaginare è <code>float</code>. Float è utilizzato sulle immagini per fare in modo che il testo gli si avvolga intorno, come qui:"

clear.title: "clear"
clear.floating: "Mi sento come se galleggiassi!"
clear.1: "La proprietà <code>clear</code> è importante per controllare il comportamento dei float."
clear.2: "In questo caso, <code>section</code> in realtà si trova dopo il <code>div</code>. Tuttavia, dato che <code>div</code> sta flottando a sinistra, ecco cosa accade: il testo in <code>section</code> si disponde attorno a <code>div</code> e <code>section</code> circonda il tutto. E se volessimo far comparire <code>section</code> dopo l'elemento flottante?"
clear.3: "Usando <code>clear</code> abbiamo spostato adesso questa sezione al di sotto del <code>div</code> flottante. Usa il valore <code>left</code> per sgomberare gli elementi flottanti a sinistra. Puoi anche usare <code>right</code> e <code>both</code>"

clearfix.title: "the clearfix hack"
clearfix.1: "Qui c'è una strana, brutta cosa che a volte succede usando i float:"
clearfix.2: "Uh oh... queta immagine è più alta dell'elemento che la contiene, e sta flottando, quindi sta sbordando fuori dal suo contenitore!"
clearfix.3: "Bleah. C'è un modo per correggere, ma è brutto. È chiamato il <em>clearfix hack</em>."
clearfix.4: "Proviamo aggiungendo questo nuovo CSS:"
clearfix.5: "Adesso vediamo cosa succede:"
clearfix.6: "Molto meglio!"
clearfix.7: "Questo funziona con i browser moderni. Se vuoi supportare IE6 dovrai aggiungere il seguente codice:"
clearfix.8: "Ci sono browser esotici che potrebbero richiedere attenzione extra. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">Il mondo del clearfix è piuttosto spaventoso</a>, ma questa semplice soluzione funzionerà per la maggior parte dei browser di oggi."

float_layout.title: "esempio di impaginazione float"
float_layout.1: "È molto comune realizzare interi layout usando il <code>float</code>. Qui c'è lo stesso layout che abbiamo precedentemente fatto con <code>position</code>, ma utilizzando invece <code>float</code>."
float_layout.2: "Questo esempio funziona come il precedente. Notare che abbiamo messo un <code>clearfix</code> nel contenitore. Non è necessario in questo esempio, ma lo sarebbe stato se <code>nav</code> fosse stato più lungo degli altri elementi contenuti non flottanti."

percent.title: "width percentuale"
percent.1: "La percentuale è una unità di misura relativa al blocco contenitore. Va benissimo per le immagini: qui mettiamo un'immagine che sia sempre il 50% della larghezza del suo contenitore. Prova a rimpicciolire la pagina per vedere cosa accade!"
percent.2: "Potresti anche eventualmente usare <code>min-width</code> e <code>max-width</code> per limitare quanto diventi grande o piccola l'immagine!"
percent.layout.title: "width percentuale nell'impaginazione"
percent.layout.1: "Puoi utilizzare le percentuali per l'impaginazione, ma ciò richiede più lavoro. In questo esempio, il contenuto di <code>nav</code> inizia ad essere sgradevole quando la finestra è troppo stretta. Sotto la spiegazione del funzionamento."
percent.layout.2: "Quando la finestra è troppo stretta, <code>nav</code> viene schiacciato. Ancor peggio, non puoi utilizzare <code>min-width</code> su nav per correggerlo, perchè la colonna destra non lo rispetterebbe."

media_queries.title: "media query"
media_queries.1: "Il \"Responsive Design\" è la strategia secondo cui si realizza un sito web che \"risponda\" al browser e al dispositivo sul quale è visualizzato... cercando di mantenerlo gradevole in qualsiasi situazione."
media_queries.2: "Le media query sono lo strumento più potente per farlo. Prendiamo il nostro layout che usa le larghezze in percentuale e facciamo che sia visualizzato ad una sola colonna quando il browser è troppo piccolo per contenere il menù della barra laterale:"
media_queries.3: "Adesso quando ridimensioni il tuo browser è più figo che mai!"
media_queries.4: "Tadàn! Adesso il nostro layout è magnifico anche sui browser dei dispositivi mobile. Qui ci sono <a href=\"http://mediaqueri.es/\">alcuni siti famosi che utilizzano le media query nella stessa maniera</a>. Puoi basarti su molte altre proprietà oltre a <code>min-width</code> e <code>max-width</code>: consulta <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">la documentazione su MDN</a> per saperne di più."
media_queries.5: "Puoi fare in modo che il tuo layout si veda ancora meglio sul mobile utilizzando <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Puoi creare una griglia di box che riempiano tutta la larghezza del browser e che si disponga piacevolmente. Ciò è stato possibile per lungo tempo usando i <code>float</code>, ma adesso con <code>inline-block</code> è molto più facile. Gli elementi <code>inline-block</code> sono come gli <code>inline</code> ma in più possono avere una larghezza e una altezza. Vediamo gli esempi di entrambi gli approcci."
inline_block.hard_way.title: "Il Modo Difficile (usando float)"
inline_block.hard_way.box: "Sto flottando!"
inline_block.hard_way.after: "Sto usando clear così non mi dispongo di fianco ai box qui sopra."
inline_block.easy_way.title: "Il Modo Facile (usando inline-block)"
inline_block.easy_way.info: "Puoi ottenere lo stesso effetto utilizzando il valore <code>inline-block</code> della proprietà <code>display</code>."
inline_block.easy_way.box: "Sono un blocco inline!"
inline_block.easy_way.after: "In questo caso non ho bisogno di utilizzare <code>clear</code>. Bene!"
inline_block.2: "Ti toccherà del lavoro extra se vuoi che <code>inline-block</code> <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">funzioni con IE6 e IE7</a>. Qualche volta qualcuno parla del fatto che <code>inline-block</code> scatena qualcosa chiamato <code>hasLayout</code>, ti serve saperlo solo nel caso tu voglia la compatibilità con browser vecchi. Segui il link precedente riguardo il supporto di IE6 e IE7 se sei curioso di saperne di più. Altrimenti, continuiamo."

inline_block_layout.title: "layout inline-block"
inline_block_layout.1: "Puoi anche utilizzare <code>inline-block</code> per l'impaginazione. Ecco alcune cose da tenere a mente:"
inline_block_layout.caveat.1: "Gli elementi <code>inline-block</code> sono soggetti alla proprietà <code>vertical-align</code>, che vorrai probabilmente impostare a <code>top</code>"
inline_block_layout.caveat.2: "Devi impostare la larghezza di ciascuna colonna"
inline_block_layout.caveat.3: "Ci sarà un vuoto tra le colonne se c'è un qualsiasi carattere di spazio tra loro nel sorgente HTML"
inline_block_layout.tada: "Tadàn!"

column.title: "column"
column.1: "C'è una nuova serie di proprietà CSS che ti consentiranno facilmente di ottenere del testo multi-colonna. Guarda:"
column.2: "CSS column è nuovissimo, quindi c'è da utilizzare i prefissi, e non funziona <a href=\"http://caniuse.com/#search=column\">con IE9 o con Opera Mini</a>. Ci sono alcune altre proprietà relative a column, quindi <a href=\"http://www.quirksmode.org/css/multicolumn.html\">clicca qua per leggere di più</a>. Altrimenti, dritti al prossimo argomento."

flexbox.title: "flexbox"
flexbox.1: "La nuova modalità di impaginazione, <code>flexbox</code>, è sulla buona strada per riuscire a ridefinire come impaginiamo con i CSS. Sfortunatamente la specifica ha subito molti cambiamenti di recente, quindi è stata implementata in maniera differente dai diversi browser. Comunque, vorrei condividere un paio di esempi in modo da sapere con cosa avremo a che fare. Questi esempi attualmente funzionano solo <a href=\"http://caniuse.com/flexbox\">con alcuni browser</a> che fanno uso  <a href=\"http://www.w3.org/TR/css3-flexbox/\">delle ultime specifiche</a>."
flexbox.2: "Ci sono molte fonti non aggiornate riguardanti flexbox. Se desideri saperne di più su flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">inizia qui</a> per imparare a distinguere le fonti aggiornate da quelle che invece non lo sono più. Inoltre ho scritto <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">un articolo dettagliato che utilizza l'ultima sintassi</a>."
flexbox.3: "Con flexbox puoi fare molto di più; questi sono solo alcuni esempi per darti un'idea:"
flexbox.simple.title: "Impaginazione semplice utilizzando Flexbox"
flexbox.simple.1: "Flexbox è proprio facile!"
flexbox.fancy.title: "Impaginazione fantasiosa con Flexbox"
flexbox.fancy.1: "Io rimarrò 200px quando c'è spazio, e mi rimpicciolirò fino a 100px se non ce n'è, ma non andrò oltre."
flexbox.fancy.2: "Io rimarrò sempre 200px, non importa cosa succede."
flexbox.fancy.3: "Io riempirò 1/3 della larghezza rimanente"
flexbox.fancy.4: "Io riempirò 2/3 della larghezza rimanente"
flexbox.centering.title: "Centratura con Flexbox"
flexbox.centering.1: "Finalmente, è facile centrare verticalmente qualcosa con i CSS!"

frameworks.title: "framework css"
frameworks.1: "Dato che l'impaginazione con i CSS è così complessa, ci sono diversi framework CSS là fuori che aiutano a renderla semplice. Qui ne trovi alcuni se vuoi dargli un'occhiata. Usare un framework è una buona idea solamente quando il framework fa esattamente ciò che ti è necessario per il tuo sito. Di sicuro non si sostituiscono alla conoscenza di come funzionano i CSS."
frameworks.2: "È tutto! Se hai dei feedback riguardanti questo sito, per favore <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">fammelo sapere via Twitter</a>!"

about.title: "info su questo sito"
about.credits: "Scritto e costruito da <a href=\"http://incompl.com\">Greg Smith</a>. Design a cura di <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Noi lavoriamo per <a href=\"http://bocoup.com\">Bocoup</a>."
