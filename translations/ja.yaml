# Japanese

global.title: "CSSレイアウトを学ぶ"
global.short_title: "CSS"
global.home: "ホーム"
global.toc: "コンテンツ一覧"
global.next: "次へ"
global.previous: "前へ"
global.feedback: "問題 / フィードバック"

util.extra_credit: "応用"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "ホーム"
util.nav.2: "タコスメニュー"
util.nav.3: "人気順"
util.nav.4: "営業時間"
util.nav.5: "行き方"
util.nav.6: "連絡先"

index.1: "このサイトでは、ウェブサイトのレイアウトに関するCSSの基礎を学ぶことができる。"
index.2: "CSSのセレクタ/プロパティ/値について、ある程度の知識がある事を前提として書かれている。ところで、このサイトを見ている人の中には、既に少なからずレイアウトの知識がある人もいるだろう。そんな君でも、何か新しい発見があるかもしれない。HTMLやCSSについて初級レベルから学びたい君は、<a href=\"http://learn.shayhowe.com/html-css/\">チュートリアル</a>が参考になる。そうでなければ、次に君がプロジェクトに携わるとき、その苛立ちを少しでも我々が軽減できるかどうか、このサイトを見てほしい。"
index.translator: ""
index.get_started: "開始"

no_layout.title: "No Layout (レイアウト無し)"
no_layout.1: "ウェブサイトなんて、文章や画像などのコンテンツをブラウザの横幅一杯引き延ばし、縦１列に並べるだけで十分だ。だから、レイアウトなんて必要ない。そう君は考えるかもしれない。でも、ブラウザの幅を大きくしているユーザが君のサイトを見たらどう思うだろう？読むのが大変だと不平を言うかもしれない。何せ、次の行を読もうとするたびに、目線を右端から左端に戻さなくてはならないのだから。君のブラウザの横幅を広げて、このページを見てくれ。そうすれば、私の言いたい事が分かるだろう。"
no_layout.2: "さて。この問題の前に、CSSでレイアウトを作るのに重要となる、<code>display</code>プロパティについて見ていきたい。"

display.title: "\"display\"プロパティ"
display.intro: "<code>display</code>は、CSSでレイアウトを作る上で最も重要となるプロパティだ。要素の種類により、displayプロパティのデフォルト値が規定されている。デフォルト値は、<code>block</code>や<code>inline</code>が一般的だ。displayがblockの要素は、しばしばブロックレベル要素と呼ばれる。displayがinlineの要素は、単純にインライン要素と呼ばれる。"
display.block.title: "block"
display.block: "<code>div</code>は代表的なブロックレベル要素だ。ブロックレベル要素は新しい行に配置される。そして、ブラウザサイズに応じて、可能な限り左右に引き延ばされる。<code>p</code>や<code>form</code>もブロックレベル要素だ。HTML5で新しく追加された<code>header</code>、<code>footer</code>、<code>section</code>などもブロックレベル要素である。"
display.inline.title: "inline"
display.inline.1: "<code>span</code>は代表的なインライン要素だ。インライン要素は文章中に、文字列の一部として埋め込むことがきる。"
display.inline.2: "このように"
display.inline.3: "、文章の体裁を崩さない。<code>a</code>要素もインライン要素だ。他のページへのリンクするのに、君はいつもこれを使うだろう？"
display.none.title: "none"
display.none.1: "その他、よく使われるものとして<code>none</code>がある。<code>script</code>のような特殊な要素は、これがデフォルト値だ。JavaScriptで要素の表示・非表示を切り替えるのに使われたりする。要素を本当に削除したり再生成したりせず、display値を切り替えるのだ。"
display.none.2: "これは、<code>visibility</code>とは異なる。ある要素の<code>display</code>を<code>none</code>にすると、その要素は存在していないものとして扱われ、画面が構築される。<code>visibility: hidden;</code>は、その要素を非表示にするだけで、要素自体は存在しているとして扱われる。なので、その要素が表示されているときと同様に、表示領域が確保される。"
display.other.title: "他のdisplay値"
display.other: "他にも、魅力的なdisplay値がたくさんある。例えば、<code>list-item</code>や<code>table</code>だ。<a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">これがその完全なリストだ</a>。<code>inline-block</code>と<code>flex</code>については、後半で説明する。"
display.extra: "既に言及したように、全ての要素はデフォルトのdisplay値を持っている。だが、君はそれを<em>いつでも</em>overrideする事ができる! とは言うものの、div要素のdisplayをinlineにすることに、さして意味はないだろう。特別なセマンティクスを持つ要素のdisplayをカスタマイズすると便利だ。例えば、水平メニューを作るのに、<code>li</code>要素をinlineにするなどである。"

margin_auto.title: "margin: auto;"
margin_auto.1: "ブロックレベル要素の<code>width</code>を設定すると、要素のコンテナが左右に引き延ばされなくなる。また、左右のマージンを<code>auto</code>にすると、左右中央に要素を配置できる。要素のwidthは設定した値になるから、残りのスペースは左右のマージン間で均等に分配される。"
margin_auto.2: "ただし、ブラウザの幅が要素の幅より狭くなると、問題が起こってしまう。ブラウザは、水平スクロールバーを生成して解決しようとしているが。この状況をもっと良くしよう..."

max_width.title: "max-width"
max_width.1: "そんなときは、<code>width</code>の代わりに、<code>max-width</code>を使ってみよう。すると、ブラウザのサイズが小さい時の操作性も向上するだろう。携帯用のサイトを作るときには、特に重要だ。確認のため、ブラウザのサイズを変えながら、このページを見てくれ!"
max_width.2: "ともかく、<code>max-width</code>は、IE7+を含む<a href=\"http://caniuse.com/#search=max-width\">主要なブラウザでサポートしている</a>。だから、どんどん使ってくれてかまわない。"

box_model.title: "ボックスモデル"
box_model.intro: "これまで、我々はwidthについて議論してきた。だから、widthの大きな落とし穴である、<em>ボックスモデル</em>についてそろそろ話そう。要素のwidthを設定しても、実際の幅が設定した値より大きくなってしまう場合がある: 要素のborderとpaddingの値が、設定したwidthに加算されて引き延ばされてしまうんだ。以下の例を見てみよう。同じwidthを持つ二つの要素が結果的に異なるサイズで表示される。"
box_model.simple: "私は小さい..."
box_model.fancy: "そして、僕は大きい!"
box_model.outro: "長い間、この問題の解決策は、計算をする事だけだった。CSSを書く人は、実際に設定したいwidthの値より、いつも少し小さめの値を指定するのだ。具体的には、paddingとborderの値を差し引いた値だ。ありがたいことに、君はもうそれをする必要はない..."

box_sizing.title: "box-sizing"
box_sizing.1: "暗黒時代は終わった。ついに、計算なんてしたくないというという意思のもと、新しいCSSプロパティ<code>box-sizing</code>を人々は作りだした。要素に<code>box-sizing: border-box;</code>を設定すると、要素のpaddingとborderの幅が要素のwidthを増やすようなことはもはやない。 これは前のページと同じ例だ。だが、両方の要素に対して、<code>box-sizing: border-box;</code>を適用している:"
box_sizing.simple: "さあ、私たちは同じサイズになった！"
box_sizing.fancy: "やったー!"
box_sizing.2: "これはかなりいい。だから、自分のページ内の全要素に対して、この設定を適用したいと考える人が現れてもおかしくはない。そんな人は、以下のようなCSSを書くと良い:"
box_sizing.3: "これでページ内の全要素に対して、いつでも直感的にサイズ指定できるようになった。"
box_sizing.4: "<code>box-sizing</code>はとても新しいプロパティだ。だから、今のところ、例に示したような<code>-webkit-</code>や<code>-moz-</code>といったプレフィックスを使った方が良い。プレフィックスを使う事で、ブラウザ独自の実験的フィーチャーを利用することができる。また、<a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>の存在についても忘れてはならない。"

position.title: "position"
position.intro: "さらに複雑なレイアウトをつくるには、<code>position</code> プロパティについて理解する必要がある。取り得る値はたくさんある。名前には意味がないので、覚えるのはなかなか難しい。１つずつ見ていこう。だけど、このページをブックマークしておくのが無難かもしれない。"
position.static.title: "static"
position.static.1: "<code>static</code> はデフォルト値だ。<code>position: static;</code>を設定した要素は、どんな方法でも位置を指定できない。 staticな要素は、<em>位置指定無効な要素</em>とも呼ばれている。また、それ以外の要素は<em>位置指定有効な要素</em>と呼ばれる。"
position.relative.title: "relative"
position.relative.1: "余分なプロパティを設定しなければ、<code>relative</code>は<code>static</code>と同等だ。"
position.relative.2: "<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>プロパティを、relativeな要素に対して設定する。すると、元々の表示される予定だった位置からの相対位置に配置するように調整される。この調整により生じた左の隙間に、他のコンテンツが自動的に配置されることはない。"
position.fixed.title: "fixed"
position.fixed.1: "fiexdな要素は、viewportに対する相対位置で配置される。つまり、ページがスクロールされても、いつでも同じ場所に配置されるという事だ。<code>relative</code>と同様に、<code>top</code>、<code>right</code>、<code>bottom</code>や<code>left</code>プロパティが使われる。"
position.fixed.2: "このページの右下の角にfixedな要素がある。既に君は気づいて、気づかないふりをしていたに違いない。だが、ここではそれに気づく許可をあげよう。これが適用しているCSSだ:"
position.fixed.3: "fixedな要素は、relativeな要素と異なり、元々の表示位置からの調整により生じた隙間にも自動的に他のコンテンツが配置され得る。"
position.fixed.4: "ただし、モバイルブラウザは、fixedに対して、驚くほどイマイチなサポートしかしていない。<a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">もっと詳しい状況を知りたければここ</a>を参照しよう。"
position.fixed.example: "Hello! まだ私のことは気にしないでね。"
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code>は最も扱いにくい。<code>absolute</code>は<code>fixed</code>とほぼ同等である。だが、viewportからの相対位置の代わりに、<em>位置指定有効かつ最も近い世代の祖先要素</em>からの相対位置に配置されるという点が異なる。位置指定有効な要素の祖先を持たなければ、absoluteな要素はdocumentのbodyからの相対位置に配置されるし、ページスクロールで動きもする。 \"位置指定有効な\"要素は<code>static</code>以外のいずれかの値が指定された場合であったことを思い出してほしい。"
position.absolute.2: "以下は単純な例だ:"
position.absolute.relative: "これはrelativeな要素だ。もしこの要素が<code>position: static;</code>だったら、absoluteな子要素はここから逃げ出すだろう。そして、子要素はdocumentのbodyからの相対位置で指定されるのだ。"
position.absolute.absolute: "これはabsoluteな要素だ。親要素からの相対位置で指定されている。"
position.absolute.3: "これは扱いづらい。だが、最高のCSSレイアウトを作るのには不可欠だ。次のページでは、もっと実用的な例で<code>position</code>を使ってみる。"

position_example.title: "positionの例"
position_example.1: "実践的な例では、positionはもう少し理にかなっているかもしれない。以下が本物っぽいページレイアウトだ。"
position_example.section.1: "<code>nav</code>が配置されることが分かっているので、<code>section</code>の<code>margin-left</code>をこのように指定できる。そうでなければ、absoluteな要素とstaticな要素は重なってしまう。"
position_example.section.2: "ブラウザをリサイズすると何が起こるか気づいたかい？いい感じに動作するよ!"
position_example.2: "コンテナの高さがnavより高いから、この例は上手く動作する。もし違っていたら、navはコンテナの外にはみ出るだろう。次のページでは、また違った長所と短所のある、他のレイアウト技術について話そう。"
position_example.footer: "fixedなheaderやfooterを配置するには、そのための場所が無くてはならないればならない!私は、<code>body</code>に<code>margin-bottom</code>を設定している。"

float.title: "float"
float.1: "レイアウトでよく使うCSSプロパティに、<code>float</code>がある。floatを使うと、画像周りで文字列を折り返すようにできる:"

clear.title: "clear"
clear.floating: "私はfloatされている!"
clear.1: "<code>clear</code>プロパティは、floatの振る舞いを制御する上で重要だ。以下、２つの例を比較してみよう:"
clear.2: "本来であれば<code>section</code>要素は<code>div</code>の下にくる。だが、<code>div</code>は左にfloatされているため、こんな風になる。具体的に言うと、<code>section</code>中の文字列が、<code>div</code>の周りで折り返すようになる。それから、<code>section</code>が全体を囲む。次に、floatされている要素の下に、<code>section</code>を配置したくなったらどうすればいいだろう？"
clear.3: "<code>clear</code>を使うと、floatされている<code>div</code>の下にsectionを配置できる。左側にfloatしている要素に対しては、clearプロパティの値として<code>left</code>を使う。もちろん、<code>right</code>や<code>both</code>にもclearを使える。"

clearfix.title: "clearfix hack"
clearfix.1: "ここでは奇妙な事。floatでときどき起こる悪い現象を取り上げる:"
clearfix.2: "ああ... この例では、画像自体の高さが、画像を含む要素より長い。しかも、画像はfloatされている。だから、コンテナの外に画像がはみ出したんだ!"
clearfix.3: "ブー、不正解。これを直す方法があるにはある。だが、少々みっともない。<em>clearfix hack</em>と呼ばれる方法だ。"
clearfix.4: "さあ、新しくこのCSSを追加してみよう:"
clearfix.5: "さて、何が起こったかな:"
clearfix.6: "かなりいいね!"
clearfix.7: "この設定は、大抵のモダンブラウザで動作する。もしIE6もサポートしたいなら、君は以下を追加したくなるだろう:"
clearfix.8: "ただし、もっと慎重にならなければならい外来ブラウザもある。<a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">clearfixingの世界はかなり恐ろしい</a>。とは言え、多くの主要なブラウザでは、この簡単な解決策で上手くいく。"

float_layout.title: "floatを使用したレイアウトの例"
float_layout.1: "<code>float</code>を使ってページ全体をレイアウトするのは、よくあることだ。以下は、<code>position</code>で前回作ったレイアウトを、<code>float</code>を使って実現したものだ。"
float_layout.2: "この例は、前回同様に動作する。ところで、コンテナに<code>clearfix</code>を設定していることに気づいたかい？この例では、これは必要ない。だけど、もしfloatされていないコンテンツより<code>nav</code>の高さが長くなったら、その時は必要になるだろう。"

percent.title: "パーセント指定のwidth"
percent.1: "パーセントは相対的な単位だ。特に画像表示にはもってこいだ。コンテナの幅がいつでも50%になる画像を準備し、ページを縮小して何が起こるか見てみよう!"
percent.2: "どのくらい画像を拡縮させるかを制限するのに、<code>min-width</code>や<code>max-width</code>を使う事もできる!"
percent.layout.title: "パーセント指定のwidthを用いたレイアウト"
percent.layout.1: "パーセントを使ってレイアウトを作ることもできる。だが、普通より少し手間がかかるかもしれない。この例でをブラウザの幅をものすごく狭くして見てみよう。すると、<code>nav</code>のコンテンツが、あまり喜ばしくない方法でテキストを折り返し始めるのが分かるだろう。"
percent.layout.2: "ブラウザの横幅が極端に狭いと、このレイアウトの<code>nav</code>はぐちゃぐちゃになってしまう。さらに悪い事に、右の列に悪影響が出るため、navに対して<code>min-width</code>を使う事もできない。"

media_queries.title: "メディアクエリー"
media_queries.1: "\"レスポンシブデザイン\"とは、どんなときでもブラウザやデバイスの表示状態に\"合わせて\"美しいサイトを作る戦略である。"
media_queries.2: "そして、メディアクエリーは、レスポンシブデザインを実現するための最も強力なツールだ。widthをパーセント指定した例を考えよう。サイドバーにメニューが入りきらなくなるほどブラウザの幅を小さくした場合、全てのコンテンツが１列で表示されるようにしたい:"
media_queries.3: "ブラウザのサイズを変えても、今までよりずっとクールだ!"
media_queries.4: "じゃーん! 今や我々のレイアウトは、モバイルブラウザで見てもいい感じに見える。これは<a href=\"http://mediaqueri.es/\">メディアクエリーを使った人気サイトだ</a>。<code>min-width</code>と<code>max-width</code>よりたくさんある: もっと学びたければ、<a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">MDNドキュメント</a>を見てみよう。"
media_queries.5: "<a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">metaタグのviewport</a>を使うと、携帯での見栄えをもっと良くできる。"

inline_block.title: "inline-block"
inline_block.1: "ブラウザの幅に合わせてボックスをいい感じに均等に配置する、グリッドレイアウトを作る事ができる。これは、昔から<code>float</code>を使って実現してきた。だが、今は<code>inline-block</code>を使って簡単に実現できる。<code>inline-block</code>要素は<code>inline</code>要素のようなものだ。だが、widthとheightを持つ事ができるという点で異なる。両方のやり方の例を見てみよう。"
inline_block.hard_way.title: "難しい方法(floatを使用)"
inline_block.hard_way.box: "私はfloatされているよ!"
inline_block.hard_way.after: "私はclearを使っている。だから、上のボックス達に続いてfloatされたりしない。"
inline_block.easy_way.title: "簡単な方法(inline-blockを使用)"
inline_block.easy_way.info: "同様の事を、<code>display</code>プロパティの値を<code>inline-block</code>にすることで実現できる。"
inline_block.easy_way.box: "私は、インラインブロックです!"
inline_block.easy_way.after: "私は<code>clear</code>を使う必要はない。最高だね!"
inline_block.2: "<code>inline-block</code>の<a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6とIE7のサポート</a>には、さらに手間をかける必要がある。<code>inline-block</code>について、<code>hasLayout</code>と結びつけて話す人が時々いるだろう。だが、その話題は古いブラウザのサポートが必要な場合に限られるという事だけ知っておいてくれれば十分だ。興味があれば、IE6とIE7のサポートについての前記のリンクをたどってくれ。ともかく、続けよう。"

inline_block_layout.title: "inline-blockで作るレイアウト"
inline_block_layout.1: "<code>inline-block</code>はレイアウトを作るのにも使うこともできる。以下を覚えておいてほしい:"
inline_block_layout.caveat.1: "<code>inline-block</code>の要素は、<code>vertical-align</code>プロパティに影響される。そして、君はおそらく<code>vertical-align</code>を<code>top</code>に設定するだろう"
inline_block_layout.caveat.2: "列となる要素それぞれに対して、幅を指定しなくてはならない"
inline_block_layout.caveat.3: "HTMLで、列となる要素の間にホワイトスペースが入ると、隙間ができてしまう"
inline_block_layout.tada: "じゃーん!"

column.title: "column"
column.1: "多段レイアウトを簡単に作るための、新しいCSSプロパティを紹介したい。以下を見てくれ:"
column.2: "上記のcolumn関連のCSSプロパティはとても新しいので、プレフィックスを使う必要がある。また、<a href=\"http://caniuse.com/#search=column\">〜IE9とOpera Mini</a>では動作しない。他にもcolumn関連のCSSプロパティがいくつかある。<a href=\"http://www.quirksmode.org/css/multicolumn.html\">もっと読みたいならここを見て</a>。そうでもなければ、次の話題へうつろう。"

flexbox.title: "flexbox"
flexbox.1: "新<code>flexbox</code>レイアウトモードは、CSSでレイアウトを作るにはどうすべきかを、改めて定義し直したものだ。残念ながら、最近でも仕様が大きく変えられている。そのような背景もあり、異なるブラウザで異なる実装がなされている。さらに、２つの例を紹介したい。そうすれば、何ができるか分かるだろう。これらの例は、<a href=\"http://www.w3.org/TR/css3-flexbox/\">現在の最新の仕様</a>を適用している<a href=\"http://caniuse.com/flexbox\">いくつかのブラウザ</a>で動作する。"
flexbox.2: "周りには、古いフレックスボックスの仕様や実装に関する、本やWeb記事があふれている。だから、フレックスボックスについて学びたければ、そのリソースが現在のものかどうか特定するために、<a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">ここから始める</a> といいだろう。私が書いた<a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">最新のフレックスボックスの仕様に則った詳細記事</a>もある。"
flexbox.3: "フレックスボックスを使うと、もっといろんなことができる。以下に示す例は、君にアイディアを与えるためのほんの一例にすぎない:"
flexbox.simple.title: "フレックスボックスで単純なレイアウト"
flexbox.simple.1: "フレックスボックスはとても簡単!"
flexbox.fancy.title: "フレックスボックスで楽しいレイアウト"
flexbox.fancy.1: "空きスペースがあれば、私は200pxだ。 無ければ、私は100pxに縮む。でも、それより小さくはならない。"
flexbox.fancy.2: "私は、何が起ころうと、いつも200pxだ。"
flexbox.fancy.3: "私は、幅1/3一杯に広がる。"
flexbox.fancy.4: "私は、幅2/3一杯に広がる。"
flexbox.centering.title: "フレックスボックスで中央寄せ"
flexbox.centering.1: "ついに、簡単に、CSSを使って、上下中央寄せにしている!"

frameworks.title: "CSSフレームワーク"
frameworks.1: "CSSレイアウトはとても扱いづらい。だから、いろんな人がウェブサイトを簡単に作るためのフレームワークを提供している。ここではその一部を紹介する。君のウェブサイトで実現したいレイアウトを、CSSフレームワークで実現できるなら、それを採用するのは良いとことだ。ただし、CSSフレームワークを使っても、CSSがどのように動作しているか知る事はできないということは覚えておいてほしい。"
frameworks.2: "以上だ! 何かフィードバックがあれば、<a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">Twitterで知らせてくれ</a>!"

about.title: "このサイトについて"
about.credits: "Written and built by <a href=\"http://incompl.com\">Greg Smith</a>. Design by <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. We work at <a href=\"http://bocoup.com\">Bocoup</a>."
