# Russian | Русский

global.title: "Изучение CSS Разметки"
global.short_title: "CSS"
global.home: "Начало"
global.toc: "Содержание"
global.next: "Далее"
global.previous: "Назад"
global.feedback: "Вопросы / Обратная связь"

util.extra_credit: "дополнение"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Home"
util.nav.2: "Taco Menu"
util.nav.3: "Draft List"
util.nav.4: "Hours"
util.nav.5: "Directions"
util.nav.6: "Contact"

index.1: "Этот сайт продемонстрирует основы CSS, которые используются при построении структуры любого веб-сайта."
index.2: "Я думаю, что вы уже знаете что такое селекторы, свойства и значения. Возможно, вы даже слышали пару вещей о шаблоне(CSS макете), но он все равно может заставить вас рвать волосы на голове, когда вы работаете над сайтом. Если вы хотите изучить  азы HTML и CSS с самого начала, то сперва  вы должны посетить <a href=\"http://learn.shayhowe.com/html-css/\">этот туториал</a>. В противном случае  приступайте к дальнейшему чтению. Искренне надеюсь, что  информация представленная ниже, поможет сберечь время и нервы на вашем  следующем проекте."
index.translator: "Перевод  <a href=\"https://www.facebook.com/artur.gavrilkevich\">Артур Гаврилкевич</a>"
index.get_started: "Начнем"

no_layout.title: "без стилей"
no_layout.1: "Без использования стилей все закончится почти хорошо, если предел ваших мечтаний ограничивается одной большой и неотесанной  колонкой содержания. Однако, если пользователь развернет окно браузера на весь экран, то он вряд ли получит удовольствие от  чтения такого содержания: линии будут бесконечными а переход с одной линии на другую немного брутальным. Попробуйте развернуть окно браузера на весь экран, чтобы увидеть, что я имею ввиду!" 
no_layout.2: "Прежде чем мы решим эту проблему,  давайте познакомимся  с очень важным стилевым свойством display."

display.title: "встречайте \"display\" свойство"
display.intro: "<code>display</code> является наиболее важным стилевым свойством  в CSS  для управления шаблоном. Каждый элемент имеет  значение отображения по умолчанию  в зависимости от того, к какому  типу относится  данный  элемент. Для большинства элементов, значения отображения по умолчанию, как правило, будут <code>block</code> или <code>inline</code>. В оригинале, блочный элемент часто еще называют элементом блочного уровня(block-level element).У строчного же элемента нет альтернативного названия."
display.block.title: "block"
display.block: "<code>div</code> является стандартным блочным элементом. Блочные элементы начинаются с новой строки и их содержимое растягивается влево и вправо настолько, насколько это возможо. Другие распространенные  блочные элементы это <code>p</code> и <code>form</code>, а также  новые блочные элементы из HTML5, такие как <code>header</code>, <code>footer</code>, <code>section</code>, и прочие."
display.inline.title: "inline"
display.inline.1: "<code>span</code> это стандартный строчный элемент. Строчный элемент может обернуть текст внутри абзаца"
display.inline.2: "вот так"
display.inline.3: "не нарушая его структуры. Наиболее распространенный строчный элемент это <code>a</code> так как вы используете его для ссылок."
display.none.title: "none"
display.none.1: "Еще одно распространенное значение для отображения это <code>none</code>. Некоторые специализированные элементы, такие как <code>script</code> используют это значение по умолчанию. Оно широко используется с JavaScript, чтобы скрывать и показывать элементы вместо того, чтобы удалять и воссоздавать их снова."
display.none.2: "Оно отличается от <code>visibility</code>. При задании свойству <code>display</code> значения <code>none</code> страница будет отображаться словно элемент не существует. <code>visibility: hidden;</code> просто скроет элемент, но элемент по прежнему будет продолжать занимать место, как если бы он был полностью виден."
display.other.title: "другие display значения"
display.other: "Есть много более экзотичных стилевых значений для отображения, таких как <code>list-item</code> и <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Вот полный список</a>. Позже мы обсудим <code>inline-block</code> и <code>flex</code>."
display.extra: "Как я уже говорил, каждый элемент имеет тип отображения по умолчанию. Тем не менее, вы всегда можете переопределить это! Хотя это не имело бы смысла для того, чтобы сделать div строчным, вы можете использовать это, чтобы настроить отображение элементов с частной семантикой. Типичный пример – возможность выстраивания <code>li</code> элементов для горизонтального меню."

margin_auto.title: "margin: auto;"
margin_auto.1: "Установка <code>width</code> для блочного элемента пресечет его  бесконечное растягивание к левому и правому краям. Вы можете установить левый и правый отступы, задав значение <code>auto</code>, которое приведет к  центрированию элемента по горизонтали. Элемент будет занимать ширину, которую вы укажете, а оставшееся  незаполненное пространство будет разделено поровну между двумя отступами. "
margin_auto.2: "Единственная проблема возникает, когда окно браузера уже, чем ширина вашего элемента. Браузер решает эту проблему, создав горизонтальную полосу прокрутики на странице. Давайте улучшим ситуацию..."

max_width.title: "max-width"
max_width.1: "Использование <code>max-width</code> вместо <code>width</code> в этой ситуации улучшит браузерную обработку  в малых окнах. Это важно при создании сайта, который будет просматриваться на  мобильном устройстве. Измените размер этой страницы, чтобы проверить как это работает!"
max_width.2: "Радует и то, что <code>max-width</code> <a href=\"http://caniuse.com/#search=max-width\">поддерживается всеми основными браузерами</a> включая даже IE7 и старше, так что вы не должны бояться использовать это свойство."

box_model.title: "the box model"
box_model.intro: "Говоря о ширине, мы должны говорить о ней с большой оговоркой, учитывая <em>box model(модель коробки или боксовую модель)</em>. Когда вы устанавливаете ширину элемента, элемент может фактически казаться больше, чем вы установили: граница и обивка (border and padding) элемента  растянут его за указанную ширину. Посмотрите на следующий пример, где два элемента с одинаковым значением  ширины, в конечном результате имеют разные размеры."
box_model.simple: "Я меньше..."
box_model.fancy: "а я БОЛЬШЕ!"
box_model.outro: "Из поколения в поколение, эту проблему решала математика. Авторы CSS всегда указывали ширину заведомо меньшего размера, чем они хотели, вычитывая поля и границы. К счастью, вам не придеться заниматься этой рутиной..."

box_sizing.title: "box-sizing"
box_sizing.1: "За долгое время, люди осознали, что  обременять себя изнурительными вычислениями не очень весело, поэтому было создано новое свойство CSS под названием <code>box-sizing</code>. Когда вы устанавливаете <code>box-sizing: border-box;</code> для элемента,  поля и границы самого элемента  больше не увеличат его ширину. Здесь тот же пример, как и на предыдущей странице, но с использованием <code>box-sizing: border-box;</code> для обоих элементов:"
box_sizing.simple: "Сейчас у нас одинаковая ширина!"
box_sizing.fancy: "Ура!"
box_sizing.2: "Поскольку так гораздо лучше, некоторые авторы хотят, чтобы все элементы на всех страницах всегда работали таким образом. Для этого нужно установить следующий CSS  для страниц:"
box_sizing.3: "Это гарантирует, что размеры всех элементов могут быть определены более интуитивно."
box_sizing.4: "Поскольку <code>box-sizing</code> достаточно новое свойство, вы должны использовать <code>-webkit-</code> и <code>-moz-</code>  префиксы, как я в этих примерах. Эта техника позволяет реализовывать экспериментальные возможности в конкретных браузерах. Кроме того, имейте в виду, что один из них это <a href=\"http://caniuse.com/#search=box-sizing\">IE8 и старше</a>."

position.title: "position"
position.intro: "Для того, чтобы сделать более сложный шаблон, мы должны обсудить стилевое свойство <code>position</code>. Оно имеет кучу возможных значений, названия которых лишены смысла и их невозможно запомнить. Давайте рассмотрим одно значение за другим по очереди. Не исключено, что вам  следует добавить эту страницу в закладки."
position.static.title: "static"
position.static.1: "<code>static</code> является значением по умолчанию. Элемент с <code>position: static;</code> отображается как обычно и не  будет позиционироваться каким-либо специальным  способом, он просто плюхнется вниз."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> ведет себя в точности как <code>static</code> но лишь до тех пор, пока вы не добавите некоторые дополнительные свойства."
position.relative.2: "Добавление свойств <code>top</code>, <code>right</code>, <code>bottom</code>, и <code>left</code> изменяет позицию элемента, сдвигая его в ту или иную сторону относительно его начального расположения. Другой контент не будет перестраиваться, чтобы заполнить любое свободное пространство, оставленное этим элементом."
position.fixed.title: "fixed"
position.fixed.1: "Фиксированное позиционирование элемента относительно окна браузера таково, что он всегда занимает одно и тоже место даже при прокрутке страницы, словно он приклеен к экрану. Также как  и для <code>relative</code>, дополнительные свойства <code>top</code>, <code>right</code>, <code>bottom</code>, и <code>left</code> для данного позиционирования будут работать."
position.fixed.2: "Я уверен, что вы заметили этот неподвижный элемент в правом нижнем углу страницы. Если же нет, то обратите внимание на него сейчас. Вот CSS, который  применяется к нему:"
position.fixed.3: "Фиксированный элемент не оставляет за собой свободное пространство  на странице, где он  был расположен."
position.fixed.4: "У мобильных браузеров достаточно шаткая поддержка фиксированного позиционирования. <a href=\"http://bradfrost.com/blog/mobile/fixed-position/\">Узнать больше об этой ситуации можно здесь.</a>."
position.fixed.example: "Привет! Не  обращай на меня внимания."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> наиболее сложное значение позиционирования. <code>absolute</code> ведет себя как <code>fixed</code> за исключением  того, что позиционирование отсчитывается относительно <em>ближайшего расположенного родителя </em>а не относительно  окна браузера. Если элемент абсолютно позиционирован и не имеет родителя,то он использует тело документа и продолжает двигатся  вместе со всей страницей при  скроллинге. Помните , что \"позиционированный\" элемент - это элемент с любым значением свойства position кроме  значения <code>static</code>."
position.absolute.2: "Вот простой пример:"
position.absolute.relative: "Этот элемент относительно позиционированный. Если бы элемент имел значение  <code>position: static;</code>  то его асболютно позиционированный ребенок убежал бы и стал позиционироваться  уже относительно тела документа."
position.absolute.absolute: "Этот элемент абсолютно позиционированный. Он позиционирован относительно его родителя."
position.absolute.3: "Этот материал на первый взгляд может показаться сложным, но он очень важен, чтобы создавать хорошую CSS разметку. На следующей странице мы будем использовать <code>position</code> на практике."

position_example.title: "position в действии"
position_example.1: "Свойство  position обретет  немного больше смысла, если рассмотреть его на практическом примере. Ниже представлена  реальная разметка страницы."
position_example.section.1: "Использование  <code>margin-left</code> для  <code>section</code>s освобождает место для размещения  <code>nav</code>. В противном случае  элементы со значением absolute и  static  перекрылись бы."
position_example.section.2: "Обратите внимание на то, что произойдет, если  вы измените размер вашего браузера. Это прекрасно работает!"
position_example.2: "Этот пример работает, потому что высота контейнера(container) больше, чем высота навигации(nav). Если бы это было не так, то окно навигации вышло бы за пределы контейнера, в котором сейчас находится. На ближайших страницах мы обсудим другие методы компоновки, которые имеют различные плюсы и минусы."
position_example.footer: "Если вы используете фиксированные header или footer, убедитесь, что есть свободное  место для них! Я установил  <code>margin-bottom</code> для  <code>body</code>."

float.title: "float (поплавок)"
float.1: "Еще одно CSS свойство  используемое для  разметки это <code>float</code>. Поплавок  предназначен для обертывания текста вокруг изображений, как это:"

clear.title: "clear"
clear.floating: "Я  чувствую, что я плыву!"
clear.1: "Свойство <code>clear</code> используется для   контроля  поплавков. Сравните эти два примера:"
clear.2: "В этом случае  элемент <code>section</code> находится  после элемента <code>div</code>.Но поскольку <code>div</code> \"всплывает слева\", то случится следующее: текст непосредственно из <code>section</code> будет \"омывать\" <code>div</code> и сместится вправо, а <code>section</code> окружит все вокруг. Что делать, если мы хотим, что бы раздел <code>section</code> оказался внизу, под всплавающим  элементом?"
clear.3: "Использовав <code>clear</code> мы сейчас сдвинули эту секцию вниз под всплывающий <code>div</code>. Вы можете использовать значение  <code>left</code> для очистки всплывающих элементов слева. Также вы можете использовать значения <code>right</code> и <code>both</code>."

clearfix.title: "the clearfix hack"
clearfix.1: "Здесь показана  неприятная вещь, которая может случится когда вы используете поплавки:"
clearfix.2: "О нет... эта картинка больше чем элемент содержащий ее, поэтому она вышла за пределы своего контейнера, буквально переполнив его снаружи!"
clearfix.3: "Здесь показан способ как исправить это, но он нечист. Он называется <em>clearfix hack</em>."
clearfix.4: "Давайте попробуем добавить этот новый CSS:"
clearfix.5: "Сейчас посмотрите что произошло:"
clearfix.6: "Гораздо лучше !"
clearfix.7: "Этот способ работает в современных браузерах. Если вы хотите осуществить  поддержку  для IE6, то нужно добавить следующее:"
clearfix.8: "Есть экзотические браузеры, которые могут потребовать дополнительного внимания. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">Мир clearfixing'а достаточно жутковат</a>, но это простое решение будет работать для подовляющего большинства браузеров."

float_layout.title: "пример float шаблона"
float_layout.1: "Очень распространено делать шаблоны целиком при помощи <code>float</code>. Вот предыдущая  разметка, которую мы сделали при помощи <code>position</code>  ранее, но сейчас, используя свойство <code>float</code> вместо  последнего."
float_layout.2: "Этот пример работает точно так же, как предыдущий. Обратите внимание, мы применяем <code>clearfix</code> для контейнера. Это не требуется в данном примере, но это понадобилось бы , если бы <code>nav</code> был больше чем не всплывающий контент."

percent.title: "width в процентах%"
percent.1: "Процент это единица измерения элемента относительно содержащего его блока. Это здорово работает для изображений: здесь мы устанавливаем габариты для изображения, ширина которого всегда равна 50% от ширины контейнера. Попробуйте сузить размер окна браузера, чтобы  увидеть что происходит!"
percent.2: "Вы даже можете использовать <code>min-width</code> и <code>max-width</code> что бы ограничить максимальный и минимальный размер картинки!"
percent.layout.title: "percent width layout"
percent.layout.1: "Вы можете использовать процент для создания шаблона, однако такой подход потребует больше работы. В этом примере, содержание  элемента <code>nav</code> начинает обволакиваться неприятным образом, когда окно браузера  слишком узкое. Все зависит от того, что лучше работает с вашим контентом."
percent.layout.2: "Когда макет слишком узкий, элемент <code>nav</code> сплющивается. Хуже того, вы не можете использовать <code>min-width</code>  для nav чтобы это исправить, потому как  данное свойство не удержит от наступления колонку справа."

media_queries.title: "media queries"
media_queries.1: "\"Отзывчивый дизайн\"  является стратегией, делающей сайт адаптированным к размеру браузера любого устройства, на котором он показывается... эта стратегия позволяет  выглядеть сайту здорово несмотря ни на что."
media_queries.2: "Media queries являются наиболее мощным инструментом для этого. Давайте возьмем нашу разметку, где мы исползовали проценты для задания ширины и покажем, что произойдет с колонкой, когда браузер станет слишком мал, чтобы поместить меню на боковой панели:"
media_queries.3: "Теперь когда вы меняете размер вашего браузера это выглядит  еще круче чем когда!"
media_queries.4: "Тада! Теперь наш шаблон здорово смотрится даже в мобильных браузерах. Здесь вы увидите <a href=\"http://mediaqueri.es/\">некоторые популярные сайты, испльзующие media queries таким образом</a>. Существует целое множество различных свойств кроме <code>min-width</code> и <code>max-width</code> показаных в примере выше: проверте <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">the MDN documentation</a> чтобы узнать больше."
media_queries.5: "Вы можете придать вашему шаблону еще более привлекательный вид для мобильного девайса, используя <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Вы можете создать сетку коробок, которая впишется по ширине браузера и будет отлично обертываться при изменении размеров окна последнего. Это стало возможным в течении длительного времени, используя <code>float</code>, но сейчас с  <code>inline-block</code> осуществить это еще проще. <code>inline-block</code> элементы, такие же как и  <code>inline</code> элементы, но у них есть ширина и высота. Давайте взглянем на примеры обоих подходов."
inline_block.hard_way.title: "Сложный путь (использование float)"
inline_block.hard_way.box: "Я всплываю!"
inline_block.hard_way.after: "Я использую clear, поэтому я не всплываю над коробками, которые  выше меня."
inline_block.easy_way.title: "Легкий путь (использование inline-block)"
inline_block.easy_way.info: "Вы можете достичь того же эффекта, используя значение <code>inline-block</code> для  <code>display</code> свойства."
inline_block.easy_way.box: "Я inline block!"
inline_block.easy_way.after: "Мне не нужно использовать <code>clear</code> в этом случае. Найс!"
inline_block.2: "Вы должны проделать дополнительную работу для  <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">поддержки в IE6 и IE7</a> с использованием <code>inline-block</code>. Иногда люди говорят насчет <code>inline-block</code> срабатывания именуемого <code>hasLayout</code>, хотя вам всего лишь  нужно знать , что это касается поддержки старых браузеров. Следуйте по предыдущей ссылке если вам важна поддержка в IE6 и IE7. Если это вас не интересует , то  давайте двигаться дальше."

inline_block_layout.title: "inline-block layout"
inline_block_layout.1: "Вы также можете использовать <code>inline-block</code> для разметки. Несколько вещей, которые вы должны зарубить на носу:"
inline_block_layout.caveat.1: "<code>inline-block</code> элементы зависят от свойства <code>vertical-align</code> для которого, вы вероятно хотите установить <code>top</code>."
inline_block_layout.caveat.2: "Вам нужно  установить ширину для каждой колонки"
inline_block_layout.caveat.3: "Будет пустое место между колонками если между ними будут пробелы"
inline_block_layout.tada: "Тада!"

column.title: "column"
column.1: "Существует новый набор CSS свойств, которые позволят вам  легко создать мульти-колонки. Полюбуйтесь:"
column.2: "CSS columns новый набор, поэтому вы должны использовать префиксы, также он не будет работать в <a href=\"http://caniuse.com/#search=column\">IE9 или в Opera Mini</a>. Подробнее о дополнительных свойствах  можно <a href=\"http://www.quirksmode.org/css/multicolumn.html\">click почитать здесь</a>. В противном случае , давайте двигаться к следующей теме."

flexbox.title: "flexbox"
flexbox.1: "Новый метод <code>flexbox</code> разметки готов пересмотреть то, как мы  делаем разметку в CSS. К сожалению, спецификация недавно изменилась, так что данный метод реализуется по-разному в разных браузерах. Тем не менее, я хотел бы поделиться парой примеров, чтобы вы имели представление, какие перемены могут нас ожидать. Эти примеры в настоящее время работают только с <a href=\"http://caniuse.com/flexbox\">некоторыми браузерами</a> которые используют <a href=\"http://www.w3.org/TR/css3-flexbox/\">последнюю версию стандарта.</a>."
flexbox.2: "Есть много устаревших ресурсов о flexbox повсюду. Если вы хотите узнать больше о flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">начните здесь</a> чтобы  узнать как определять современный ли ресурс или нет. Я написал <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">подробную статью с использованием новейшего синтаксиса</a>."
flexbox.3: "Существует гораздо больше возможностей , которые открывает flexbox; это всего лишь несколько скромных примеров, чтобы дать вам общее представление:"
flexbox.simple.title: "Примеры разметок с использованием Flexbox"
flexbox.simple.1: "Flexbox это легко!"
flexbox.fancy.title: "Модная разметка с использованием Flexbox"
flexbox.fancy.1: "Я буду занимать 200px , если позволит место , но я поубавлю свой размер до 100px, но не меньше, если свободного места для меня не найдется."
flexbox.fancy.2: "Я всегда буду занимать 200px, несмотря ни на что."
flexbox.fancy.3: "Я заполню 1/3 оставшейся ширины."
flexbox.fancy.4: "Я заполню 2/3 оставшейся ширины"
flexbox.centering.title: "Центрирование с использованием Flexbox"
flexbox.centering.1: "В конце концов так легко центрировать по вертикали в CSS!"

frameworks.title: "CSS фреймворки"
frameworks.1: "Фреймворки CSS задумывались для того, чтобы помочь выполнить сложную CSS  разметку проще. Вот  несколько штук, если у вас есть желание на них взглянуть. Использование фреймворков будет  хорошей идеей лишь только в том случае, если фреймворки действительно делают то, что необходимо для вашего сайта. Они никогда не заменят необходимых знаний того, каким образом работает CSS."
frameworks.2: "Это все! Если сайт был вам полезен, то  пожалуйста <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">дайте мне знать об этом на Твиттере!</a>"

about.title: "об этом сайте"
about.credits: "Материал  и создание <a href=\"http://incompl.com\">Грег Смит</a>. Дизайн <a href=\"http://www.isaacdurazo.com/\">Исаак Дюразо</a>.Мы работаем в <a href=\"http://bocoup.com\">Bocoup</a>."

