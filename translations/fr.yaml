# French

global.title: "Apprendre les mises en page CSS"
global.short_title: "CSS"
global.home: "Accueil"
global.toc: "Sommaire"
global.next: "Suivant"
global.previous: "Précédent"
global.feedback: "Problèmes / Remarques"

util.extra_credit: "bonus"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Accueil"
util.nav.2: "Menu Taco"
util.nav.3: "Projet de liste"
util.nav.4: "Horaires"
util.nav.5: "Directions"
util.nav.6: "Contact"

index.1: "Ce site vise à vous apprendre les bases de CSS utilisées pour structurer n'importe quel site web."
index.2: "Je suppose que vous savez déjà ce que sont les sélecteurs, les propriétés et les valeurs. Et vous connaissez probablement une ou deux choses sur les mise en page, même si ça peut vous donner envie de vous arracher les cheveux. Si vous voulez apprendre le HTML et le CSS depuis le début, vous devriez allez faire un tour sur <a href=\"http://learn.shayhowe.com/html-css/\">ce tutoriel</a>. Sinon, voyons si nous pouvons vous éviter de vous énerver sur votre prochain projet."
index.translator: "Traduit par <a href=\"http://www.joel-matelli.fr\">Joël Matelli</a>"
index.get_started: "Allons-y !"

no_layout.title: "pas de mise en page"
no_layout.1: "N'avoir aucune mise en page est un choix envisageable, si votre unique objectif est d'avoir une seule grande colonne de contenu. Mais si un utilisateur étire la fenêtre de son navigateur, la lecture devient pénible : les lignes sont interminables et le passage d'une ligne à l'autre est un peu brutal. Essayez de redimensionner votre navigateur pour voir !"
no_layout.2: "Avant de régler ce problème, entendons nous sur l'importance de la propriété <code>display</code>."

display.title: "la propriété \"display\""
display.intro: "La propriété CSS <code>display</code> est la plus importante pour contrôler la mise en page. Chaque élément a une valeur display par défaut dépendante du type de l'élément. Les valeurs par défaut de la plupart des éléments sont <code>block</code> ou <code>inline</code>. Un élément block est souvent appelé un élément block-level. Un élément inline n'est jamais appelé autrement qu'un élément inline."
display.block.title: "block"
display.block: "<code>div</code> est l'élément block-level standard. Un élément block-level commence sur une nouvelle ligne et s'étire autant qu'il peut sur la gauche et la droite. D'autres éléments block-level courant sont <code>p</code> et <code>form</code>, et les nouveaux en HTML5 sont <code>header</code>, <code>footer</code>, <code>section</code>, et plus."
display.inline.title: "inline"
display.inline.1: "<code>span</code> est l'élément inline standard. Un élément inline peut encadrer du texte dans un paragraphe"
display.inline.2: "comme ceci"
display.inline.3: "sans interrompre le flux de ce paragraphe. L'élément <code>a</code> est l'élément inline le plus courant, puisque vous l'utilisez pour vos liens."
display.none.title: "none"
display.none.1: "Une autre valeur display courante est <code>none</code>. Quelques éléments spéciaux comme <code>script</code> l'utilisent par défaut. <code>display: none;</code> est très utile pour masquer ou afficher facilement des éléments en CSS ou en Javascripts sans avoir à les supprimer et les recréer dans le DOM."
display.none.2: "Ne confondez pas <code>display: none;</code> et <code>visibility: hidden;</code> ! <code>display: none;</code> masque totalement l'élément et annule des propriétés telles que margin, padding, width, height...tandis que <code>visibility: hidden;</code> masque seulement l'élément, ce qui peut laisser des espaces vides."
display.other.title: "d'autres valeurs pour display"
display.other: "Display possède une quantité d'autres valeurs exotiques, comme <code>list-item</code> et <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Voici une liste exhaustive</a>. Nous discuterons de <code>inline-block</code> et <code>flex</code> plus tard."
display.extra: "Comme je le disais, chaque élément a un type display par défaut. Cependant, vous pouvez <em>toujours</em> les écraser ! Même si ça n'a pas beaucoup de sens de rendre une div inline, vous pouvez faire cela pour customiser des éléments qui ont une sémantique particulière. Un exemple courant est de rendre inline les éléments <code>li</code> pour faire des menus horizontaux."

margin_auto.title: "margin: auto;"
margin_auto.1: "Attribuer une <code>width</code> à un élément block-level l'empêchera de s'étirer sur toute la largeur de son conteneur. Ensuite vous pouvez mettre la valeur <code>auto</code> aux propriétés <code>margin-right</code> et <code>margin-left</code> pour centrer horizontallement cet élément à l'intérieur de son conteneur. L'élément prendra la largeur que vous avez spécifié et l'espace restant sera séparé équitablement entre les deux marges."
margin_auto.2: "Le seul problème survient lorsque la fenêtre du navigateur est plus petite que la largeur de votre élément. Le navigateur résout cela en créant une barre de défilement (scrollbar) horizontale. Améliorons cette situation..."

max_width.title: "max-width"
max_width.1: "Utiliser <code>max-width</code> à la place de <code>width</code> améliorera la gestion des petites fenêtres. C'est très important lorsque l'on créé un site accessible sur mobile. Redimensionnez cette page pour voir !"
max_width.2: "Au fait, <code>max-width</code> est <a href=\"http://caniuse.com/#search=max-width\">supporté par tous les navigateurs majeurs</a> incluant IE7+, vous ne devez donc pas avoir peur de l'utiliser."

box_model.title: "box model"
box_model.intro: "Si nous parlons de la propriété width, nous devrions parler du <em>box model</em>. Quand vous ajustez la propriété width d'un élément, celui-ci peut paraître plus gros que ce que vous avez indiqué : la bordure et le padding de l'élément l'étirent au delà de la largeur spécifiée. Regardez l'exemple suivant, où deux éléments ayant la même largeur se retrouvent avec deux tailles différentes."
box_model.simple: "Je suis plus petit..."
box_model.fancy: "Et je suis plus grand !"
box_model.outro: "Pendant des générations, les maths étaient la solution à ce problème. Les auteurs des CSS attribuaient à la propriété width des valeurs inférieures à ce qu'ils souhaitaient, soustrayant le padding et la bordure. Heureusement, vous n'êtes plus obligés de faire ça..."

box_sizing.title: "box-sizing"
box_sizing.1: "Au fil du temps, les gens se sont rendus compte que les maths ce n'était pas marrant, donc une nouvelle propriété CSS appelée <code>box-sizing</code> fût créée. Quand vous ajoutez la propriété <code>box-sizing: border-box;</code> à un élément, le padding et la bordure de cet élément n'augmentent plus sa largeur. Ci-dessous, le même exemple que dans la page précédente, mais avec la propriété <code>box-sizing: border-box;</code> sur les deux éléments :"
box_sizing.simple: "Nous avons la même taille maintenant !"
box_sizing.fancy: "Hourra!"
box_sizing.2: "C'est tellement mieux que certains auteurs veulent que tous les éléments de toutes leurs pages fonctionnent de la même manière. Ils ajoutent donc ce bout de CSS à leurs pages :"
box_sizing.3: "Cela force tous les éléments à être toujours dimensionnés de cette façon plus intuitive."
box_sizing.4: "Puisque <code>box-sizing</code> est plutôt récent, vous devriez utiliser les préfixes <code>-webkit-</code> et <code>-moz-</code> pour l'instant, comme je l'ai fait dans mes exemples. Cette technique autorise des fonctionnalités expérimentales dans des navigateurs spécifiques. N'oubliez pas que cette propriété est compatible à partir d'<a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Pour des mise en page plus complexes, nous devons parler de la propriété CSS <code>position</code>. Elle a plusieurs valeurs possibles, et leurs noms n'ont aucun sens et sont impossible à retenir. Voyons-les une par une, mais peut-être devriez-vous ajouter cette page à vos favoris."
position.static.title: "static"
position.static.1: "<code>static</code> est la valeur par défaut de tous les éléments. Un élément avec <code>position: static;</code> n'est positionné d'aucune manière spéciale. Un élément static est dit <em>non positionné</em> et un élément avec une propriété position ayant une valeur autre que static est dit <em>positionné</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> se comporte de la même façon que <code>static</code> sauf si vous ajoutez quelques propriétés en plus."
position.relative.2: "Ajouter les propriétés <code>top</code>, <code>right</code>, <code>bottom</code> et <code>left</code> à un élément positionné en relative va le placer ailleurs que sa position normale. Le reste du contenu ne sera pas ajusté pour prendre la place dans l'espace laissé par l'élément."
position.fixed.title: "fixed"
position.fixed.1: "Un élément positionné en fixed est positionné par rapport a la fenêtre du navigateur, ce qui signifie qu'il reste toujours à la même place même si la page défile. De la même manière qu'avec un élément positionné en relative, nous pouvons utiliser les propriétés <code>top</code>, <code>right</code>, <code>bottom</code> et <code>left</code>."
position.fixed.2: "Je suis sûr que vous avez remarqué  cet élément fixe dans le coin en bas à droite de la page. Je vous autorise à le regarder maitenant. Voici le CSS qui l'a placé là."
position.fixed.3: "Un élément positionné en fixed ne laisse aucun espace dans la page là où il aurait normallement dû se trouver."
position.fixed.4: "Les navigateurs mobiles ont, étonnement, un support très approximatif de la valeur fixed. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Apprenez en plus ici</a>."
position.fixed.example: "Bonjour ! Ne faites pas attention à moi pour l'instant."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> est la valeur la plus délicate. <code>absolute</code> se comporte comme <code>fixed</code> sauf que son positionnement est relatif à <em>l'élément parent positionné le plus proche</em> au lieu d'être relatif à la fenêtre du navigateur. Si un élément positionné en absolute n'à aucun élément parent positionné, il utilise le corps du document et se déplace avec le document au défilement de la page. N'oubliez-pas qu'un élément \"positionné\" est un élément dont la position est tout sauf <code>static</code>."
position.absolute.2: "Voici un exemple simple :"
position.absolute.relative: "Cet élément est positionné en relative. S'il était positionné en <code>position: static;</code> son élément enfant positionné en absolute s'échapperait et serait positionné de manière relative au corps du document."
position.absolute.absolute: "Cet élément est positionné en absolute. Sa position est relative à son parent."
position.absolute.3: "C'est difficile, mais c'est essentiel pour créer d'excellentes mise en page. Dans la page suivante nous utiliserons la propriété <code>position</code> de manière plus pratique."

position_example.title: "Exemple de position"
position_example.1: "Ces trucs à propos de position vont peut-être avoir plus de sens dans un exemple pratique. Ci-dessous se trouve une mise en page réaliste."
position_example.section.1: "La propriété <code>margin-left</code> pour les <code>section</code>s assure qu'il y a de la place pour la <code>nav</code>."
position_example.section.2: "Remarquez ce qu'il se passe lorsque vous redimensionnez votre navigateur. Ça marche plutôt bien !"
position_example.2: "Cet exemple marche parce que l'élément conteneur est plus grand que la nav. Si ce n'était pas le cas, la nav déborderait de son conteneur. Dans les pages suivantes nous discuterons d'autres techniques de mise en page qui ont différents avantages et inconvénients."
position_example.footer: "Si vous utilisez un header et un footer positionné en fixed, faites en sorte qu'il y ait de la place pour eux ! J'ajoute un <code>margin-bottom</code> sur le <code>body</code>."

float.title: "float"
float.1: "Une autre propriété CSS utilisée pour la mise en page est <code>float</code>. Float est prévu pour entourer une image avec du texte, comme ceci :"

clear.title: "clear"
clear.floating: "J'ai l'impression de flotter!"
clear.1: "La propriété <code>clear</code> est importante pour contrôler le comportement des floats. Comparez ces deux exemples :"
clear.2: "Ici, l'élément <code>section</code> est placé après la <code>div</code> dans le code. Cependant, comme la <code>div</code> est flottante à gauche, voici ce qui se passe : le texte dans la <code>section</code> est flottant autour de la <code>div</code> et la <code>section</code> entoure même la <code>div</code>. Et si nous voulions que la <code>section</code> apparaisse après l'élément flottant ?"
clear.3: "Utiliser <code>clear</code> nous permet de bouger la section sous la <code>div</code> flottante. Vous utilisez la valeur <code>clear: left;</code> pour annuler le <code>float: left;</code> de la <code>div</code>. Vous pouvez aussi utiliser <code>clear: right;</code> et <code>clear: both;</code>."

clearfix.title: "le hack clearfix"
clearfix.1: "Voici un truc bizarre, gênant qui arrive parfois en utilisant les floats:"
clearfix.2: "Oh oh... cette image est plus grande que l'élément qui la contient, et elle est flottante, donc elle déborde de son conteneur !"
clearfix.3: "Il existe une manière de régler ce problème, mais c'est moche. Ça s'appelle <em>clearfix hack</em>"
clearfix.4: "Essayons d'ajouter cette nouvelle CSS :"
clearfix.5: "Maintenant voyons ce qu'il se passe :"
clearfix.6: "Beaucoup mieux !"
clearfix.7: "Ça marche pour les navigateurs récents. Si vous voulez supporter IE6 vous devez ajouter ce qui suit :"
clearfix.8: "Il existe des navigateurs plus exotiques qui demanderont peut-être plus d'attention. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">Le monde du clearfix est plutôt effrayant</a>, mais cette solution simple marchera pour la grande majorité des navigateurs."

float_layout.title: "exemple de mise en page avec float"
float_layout.1: "C'est très courant de faire des mise en page entières en utilisant <code>float</code>. Voici la même mise en page que nous avons fait avec <code>position</code> plus tôt, mais en utilisant <code>float</code> à la place."
float_layout.2: "Cet exemple marche aussi bien que le précédent. Remarquez que nous avons mis un <code>clearfix</code> sur le conteneur. Ce n'est pas nécessaire dans cet exemple, mais ça le serait si la <code>nav</code> était plus longue que le contenu non flottant"

percent.title: "Largeur en pourcent"
percent.1: "Le pourcent est une unité de mesure relative au block conteneur. C'est génial pour les images : ici nous avons une image qui a toujours 50% de la largeur de son conteneur. Essayez de réduire la taille de la page pour voir."
percent.2: "Vous pouvez même utiliser <code>min-width</code> et <code>max-width</code> pour limiter la largeur maximale ou minimale de l'image."
percent.layout.title: "mise en page avec une largeur en pourcent"
percent.layout.1: "Vous pouvez utiliser le pourcent pour votre mise en page, mais cela peut demander un peu de travail. Dans cet exemple, le contenu de la <code>nav</code> s'agence de manière désagréable quand la fenêtre est trop étroite. Cela se réduit à ce qui marche le mieux pour votre contenu."
percent.layout.2: "Quand cette mise en page est trop étroite, la <code>nav</code> est écrasée. Pire, vous ne pouvez pas utiliser <code>min-width</code> sur la nav pour empêcher cela, parce que la colonne de droite ne le respecterait pas."

media_queries.title: "media queries"
media_queries.1: "Le \"Responsive Design\" consiste à adapter un site à la taille disponible du navigateur et à l'appareil sur lequel il s'affiche... en ayant l'air génial peu importent les circonstances."
media_queries.2: "Les media queries sont les outils les plus puissants pour ceci. Prenons notre mise en page qui utilise les largeurs en pourcent et faisons en sorte qu'elle passe sur une seule colonne lorsque le navigateur est trop petit pour placer le menu dans la barre latérale :"
media_queries.3: "Maintenant quand vous redimensionnez votre navigateur c'est plus cool que ça ne l'a jamais été !"
media_queries.4: "Tadaaaa ! Maintenant notre mise en page à l'air génial, même sur les navigateurs mobiles. Vous trouverez ici <a href=\"http://mediaqueri.es/\">quelques sites populaires qui utilisent les media queries de cette façon</a>. Il y a plein d'autres choses que vous pouvez détecter que <code>min-width</code> et <code>max-width</code> : faites un tour sur <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">la documentation MDN</a> pour en apprendre plus."
media_queries.5: "Vous pouvez rendre votre mise en page encore plus belle sur mobile en utilisant la <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Vous pouvez créer une grille de boites qui s'adaptent à la largeur du navigateur et s'agencent plutôt bien. C'est possible depuis longtemps en utilisant <code>float</code>, mais maintenant avec <code>inline-block</code> c'est encore plus facile. Regardons des exemples pour chaque approche."
inline_block.hard_way.title: "La manière difficile (avec float)"
inline_block.hard_way.box: "Je flotte !"
inline_block.hard_way.after: "J'utilise clear pour ne pas flotter à coté des boites au dessus."
inline_block.easy_way.title: "La manière facile (avec inline-block)"
inline_block.easy_way.info: "Vous pouvez avoir le même effet en utilisant la valeur <code>inline-block</code> de la propriété <code>display</code>."
inline_block.easy_way.box: "Je suis inline-block!"
inline_block.easy_way.after: "Je n'ai pas besoin d'utiliser <code>clear</code>. Cool !"
inline_block.2: "Vous avez un peu plus de travail à faire pour <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">que IE6 et IE7 supportent</a> <code>inline-block</code>. Parfois les gens disent que <code>inline-block</code> déclenche quelque chose appellé <code>hasLayout</code>, mais vous n'avez besoin de savoir ça que pour les vieux navigateurs. Suivez le lien précédant à propos d'IE6 et IE7 si vous êtes curieux d'en apprendre plus. Sinon, continuons."

inline_block_layout.title: "mise en page avec inline-block"
inline_block_layout.1: "Vous pouvez aussi utiliser <code>inline-block</code> pour les mise en page. Il faut cependant garder à l'esprit que :"
inline_block_layout.caveat.1: "les éléments en <code>inline-block</code> sont affectés par la propriété <code>vertical-align</code>, et vous voulez probablement que sa valeur soit <code>top</code>."
inline_block_layout.caveat.2: "Vous devez donner une largeur à toutes vos colonnes."
inline_block_layout.caveat.3: "S'il y a un espace blanc entre les éléments dans le HTML, il y aura un espace entre les colonnes à l'affichage."
inline_block_layout.tada: "Tadaaaa !"

column.title: "colonne"
column.1: "Il y a ce nouveau groupe de propriétés CSS qui vous permettent d'avoir du texte sur de multiples colonnes facilement. Regardez :"
column.2: "Ces propriétés CSS sont plutôt nouvelles, et ça ne marchera pas <a href=\"http://caniuse.com/#search=column\">avec IE9 ou sur Opera Mini</a>. Il y a quelques autres propriétés liées aux colonnes, donc <a href=\"http://www.quirksmode.org/css/multicolumn.html\">cliquez ici pour en lire plus</a>. Sinon, continuons avec le thème suivant."

flexbox.title: "flexbox"
flexbox.1: "Le nouveau mode de mise en page <code>flexbox</code> se veut redéfinir comment nous faisons les mise en page en CSS. Malheureusement la spécification a beaucoup changé récemment, donc c'est implémenté différement sur les différents navigateurs. Cependant, j'aimerais partager quelques exemples pour que vous sachiez ce qui arrive. Ces exemples ne marchent pour l'instant qu'avec l'implementation flexbox de Chrome, basé sur la <a href=\"http://www.w3.org/TR/css3-flexbox/\">dernière version du standard</a>."
flexbox.2: "Il y a beaucoup de ressources dépassées sur flexbox. Si vous voulez en apprendre plus sur flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">commencez ici</a> par apprendre comment identifier si une ressource est actuelle ou pas. J'ai écrit un <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">article détaillé utilisant la dernière syntaxe</a>."
flexbox.3: "Flexbox vous permet de faire beaucoup plus; les exemples qui suivent ne sont là que pour vous donner une idée :"
flexbox.simple.title: "Simple mise en page avec flexbox"
flexbox.simple.1: "Flexbox c'est trop facile!"
flexbox.fancy.title: "Mise en page plus fantaisiste avec flexbox"
flexbox.fancy.1: "J'ai une largeur de 200px quand il y a la place et je serai réduite à 100px s'il n'y en a pas, mais pas moins."
flexbox.fancy.2: "J'aurai toujours une largeur de 200px, peu importe ce qu'il se passe."
flexbox.fancy.3: "Je prendrai 1/3 de la place restante."
flexbox.fancy.4: "Je prendrai 2/3 de la place restante."
flexbox.centering.title: "Alignement avec flexbox"
flexbox.centering.1: "Pour finir, c'est facile d'aligner quelque chose verticalement en CSS !"

frameworks.title: "frameworks css"
frameworks.1: "Parce que la mise en page en CSS est tellement difficile, il existe des frameworks CSS pour vous faciliter la tâche. En voici quelques uns si vous êtes intéressé. Utiliser un framework n'est une bonne idée que si le framework fait vraiment ce dont votre site à besoin. Cependant il est nécessaire de savoir comment marche la CSS."
frameworks.2: "C'est fini ! Si vous avez des remarques sur ce site, <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">faites le moi savoir</a> s'il vous plait !"

about.title: "à propos de ce site"
about.credits: "Écrit et réalisé par <a href=\"http://incompl.com\">Greg Smith</a>. Design par <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Nous travaillons à <a href=\"http://bocoup.com\">Bocoup</a>."
