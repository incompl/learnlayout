# Spanish / Español

global.title: "Estructura con CSS"
global.short_title: "CSS"
global.home: "Inicio"
global.toc: "Tabla de Contenido"
global.next: "Siguiente"
global.previous: "Anterior"
global.feedback: "Problemas / Recomendaciones"

util.extra_credit: "crédito extra"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Inicio"
util.nav.2: "Taco Menú"
util.nav.3: "Lista de Pendientes"
util.nav.4: "Horas"
util.nav.5: "Direcciones"
util.nav.6: "Contacto"

index.1: "Este sitio enseña los fundamentos de CSS usados para estructurar cualquier sitio web."
index.2: "Supongo que ya sabes lo que son los selectores, propiedades y valores. Y probablemente sabes algo de cómo estructurar un sitio web, sin embargo puede que aun sea motivo de ira y frustración para ti. Si quieres aprender HTML y CSS desde el principio, deberías ver <a href=\"http://learn.shayhowe.com/html-css/\">este tutorial</a>. Si no, veamos si podemos salvarte de algunos enojos en tu próximo proyecto."
index.translator: "Traducido por <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>"
index.get_started: "Comenzar"

no_layout.title: "Sin estructura"
no_layout.1: "No tener estructura en tu sitio está bien si lo que quieres es tener una columna gigante de contenido. Sin embargo si el usuario hace la ventana del navegador muy ancha, será muy molesto leer: después de cada línea, tus ojos tendrán que viajar una distancia muy larga de derecha a izquierda hacia la siguiente línea. Trata de hacer más ancha la ventana de tu navegador para que veas a lo que me refiero."
no_layout.2: "Antes de arreglar este problema, cerciorémonos de que entendemos la importancia de la propiedad <code>display</code>."

display.title: "la propiedad \"display\""
display.intro: "<code>display</code> es la propiedad más importante para controlar estructuras. Cada elemento tiene un valor de display por defecto dependiendo de qué tipo de elemento sea. El valor por defecto para la mayoría de los elementos es usualmente <code>block</code> (de bloque) o <code>inline</code> (en línea). Un elemento que es block es comunmente llamado elemento block-level. Un elemento inline siempre es llamado elemento inline."
display.block.title: "block"
display.block: "El <code>div</code> es el elemento block-level estándar. Un elemento block-level comienza en una nueva línea y se estira hasta la derecha e izquierda tan lejos como pueda. Otros elementos block-level muy comunes son <code>p</code> y <code>form</code>, y algunos nuevos en HTML5 son <code>header</code>, <code>footer</code> y <code>section</code>."
display.inline.title: "inline"
display.inline.1: "El <code>span</code> es el elemento inline estándar. Un elemento inline puede contener algo de texto dentro de un párrafo"
display.inline.2: "como esto"
display.inline.3: "sin interrumpir el flujo del párrafo. El elemento <code>a</code> es el elemento inline más común, ya que se usa para links."
display.none.title: "none"
display.none.1: "Otro valor común de display es <code>none</code>. Algunos elementos especializados como <code>script</code> usan este por defecto. Es comúnmente usado en JavaScript para ocultar o mostrar elementos sin eliminarlos ni recrearlos."
display.none.2: "Esto es diferente de <code>visibility</code>. Usar <code>display: none</code> no dejará espacio donde el elemento se encontraba, pero <code>visibility: hidden;</code> dejará un espacio vacío."
display.other.title: "otros valores de display"
display.other: "Hay bastantes valores exóticos de display, como <code>list-item</code> y <code>table</code>. <a href=\"https://developer.mozilla.org/es/docs/CSS/display\">Aquí hay una lista exhaustiva</a>. Discutiremos <code>inline-block</code> y <code>flex</code> después."
display.extra: "Como mencioné, cada elemento tiene un valor de display por defecto. Sin embargo, ¡<em>siempre</em> puedes sobreescribirlos! Aunque no tendría sentido que un div fuera inline, puedes usar esto para personalizar la valor de display que tienen ciertos elementos con semántica particular. Un ejemplo muy común es cuando hacemos que un elemento <code>li</code> sea inline para menús horizontales."

margin_auto.title: "margin: auto;"
margin_auto.1: "Ajustar la propiedad <code>width</code> de un elemento block-level lo previene de estirarse hasta los bordes de su contenedor a la izquierda y derecha. Después puedes establecer la propiedad margin left y right para que sea <code>auto</code> y centrar de manera horizontal ese elemento en su contenedor. El elemento tomará el ancho que especificaste, después el espacio sobrante será dividido equitativamente entre los dos márgenes."
margin_auto.2: "El único problema ocurre cuando el ancho del navegador es menor que el de tu elemento. El navegador resuelve esto creando una barra de desplazamiento (scrollbar) horizontal en la página. Arreglemos esa situación..."

max_width.title: "max-width"
max_width.1: "Usar <code>max-width</code> (ancho máximo) en lugar de <code>width</code> en esta situación, mejorará la situación cuando la ventana del navegador sea pequeña. Esto es importante cuando estamos haciendo un sitio para dispositivos móviles. ¡Haz la ventana del navegador mas pequeña para que te des cuenta!"
max_width.2: "Por cierto, <code>max-width</code> es <a href=\"http://caniuse.com/#search=max-width\">compatible en la mayoría de los navegadores</a> incluyendo IE7+, así que no tengas miedo de usarlo."

box_model.title: "box model"
box_model.intro: "Ya que estamos hablando de la propiedad width, deberíamos hablar del <em>box model</em> (modelo de caja). Cuando ajustas la propiedad width de un elemento, este puede parecer mas grande de lo que es: la propiedad border (borde) del elemento y padding (relleno) estirarán el elemento más allá del ancho especificado. Mira el siguiente ejemplo, donde dos elementos con el mismo valor width terminan teniendo diferente tamaño al final."
box_model.simple: "Soy más chico..."
box_model.fancy: "¡Y yo soy más grande!"
box_model.outro: "Por generaciones, la solución a este problema han sido las matemáticas. Autores de CSS han tenido que escribir valores más pequeños para width de lo que en realidad querían, restando el padding y border. Afortunadamente ya no tienes que hacer eso..."

box_sizing.title: "box-sizing"
box_sizing.1: "Durante generaciones, la gente se ha dado cuenta de que las matemáticas no son divertidas, así que una nueva propiedad CSS llamada <code>box-sizing</code> fue creada. Cuando ajustas un elemento con <code>box-sizing: border-box;</code>, el padding y border de ese elemento no incrementan su ancho. Aquí está el mismo ejemplo de la página anterior, pero usando <code>box-sizing: border-box;</code> en los dos elementos:"
box_sizing.simple: "¡Ahora somos del mismo tamaño!"
box_sizing.fancy: "¡Hurra!"
box_sizing.2: "Ya que esto es mucho mejor, algunos autores quieren que todos los elementos de sus páginas trabajen de la misma manera. Estos autores ponen lo siguiente en sus páginas:"
box_sizing.3: "Esto asegura que el tamaño de todos los elementos siempre será modificado de la manera más intuitiva."
box_sizing.4: "Ya que <code>box-sizing</code> es bastante nuevo, te recomiendo usar los prefijos <code>-webkit-</code> y <code>-moz-</code> por ahora, como yo los uso en el ejemplo. Esta técnica permite funciones experimentales en navegadores específicos. También, ten en cuenta que es compatible con <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Para poder tener estructuras mas complejas, tenemos que discutir la propiedad <code>position</code> (posición). Esta propiedad tiene un montón de posibles valores, sus nombres no tienen sentido y son casi imposibles de memorizar. Veámoslos uno a uno, pero antes deberías guardar esta página en tus marcadores para futuras referencias."
position.static.title: "static"
position.static.1: "<code>static</code> (estático) es el valor por defecto. Un elemento con <code>position: static;</code> no está posicionado en ninguna forma en específico. Se dice que un elemento static, está <em>no posicionado</em> y un elemento con valor establecido de position está <em>posicionado</em>."
position.relative.title: "relative"
position.relative.1: "<code>relative</code> (relativo) se comporta de la misma manera que <code>static</code> a menos que le agregues otras propiedades."
position.relative.2: "Establecer las propiedades <code>top</code>, <code>right</code>, <code>bottom</code>, y <code>left</code> de un elemento con <code>position: relative;</code> causará que su posición normal se reajuste. Otro contenido no se puede ajustar para adaptarse a cualquier hueco dejado por el elemento."
position.fixed.title: "fixed"
position.fixed.1: "Un elemento fixed (fijo) se posiciona a la ventana del navegador de manera relativa, lo que significa que se mantendrá en el mismo lugar incluso después de hacer scroll en la página. Al igual que con <code>relative</code>, las propiedades <code>top</code>, <code>right</code>, <code>bottom</code>, y <code>left</code> también son usadas."
position.fixed.2: "Estoy seguro que ya notaste el elemento fijo en la parte de abajo a la derecha de la página. Te doy permiso de que lo veas ahora. Aquí está el CSS que lo posiciona donde está:"
position.fixed.3: "Un elemento con valor fixed no deja espacio en el lugar de la página donde estaba ubicado normalmente."
position.fixed.4: "Los buscadores móviles, sorprendentemente, no tienen muy buen soporte para el valor <code>fixed</code>. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Aprende más al respecto aquí</a>."
position.fixed.example: "Hola! No me prestes atención todavía"
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> (absoluto) es el valor más mañoso. <code>absolute</code> se comporta como <code>fixed</code> pero es relativo a <em>su ancestro posicionado más cercano</em> en lugar de ser relativo a la ventana del navegador. Si un elemento con <code>position: absolute;</code> no tiene ancestros posicionados, usará el elemento body del documento, y se seguirá moviendo al hacer scroll en la página. Recuerda, un elemento \"posicionado\" es aquel cuyo valor es cualquiera excepto <code>static</code>."
position.absolute.2: "Aquí hay un ejemplo sencillo:"
position.absolute.relative: "Este elemento está usando <code>position: relative;</code>. Si estuviera usando <code>position: static;</code> su sucesor con <code>position: asbsolute;</code> escaparía y se posicionaría relativamente al body del documento."
position.absolute.absolute: "Este elemento tiene <code>position: asbsolute;</code>. Se posiciona de manera relativa a su ancestro."
position.absolute.3: "Sé que esto es complicado, pero es esencial para crear estructuras con CSS de manera correcta. En la siguiente página usaremos <code>position</code> en un ejemplo más práctico."

position_example.title: "ejemplo de position"
position_example.1: "Todo esto de <code>position</code> tal vez tenga un poco más de sentido con un ejemplo práctico. Abajo está la estructura real de una página."
position_example.section.1: "El estilo <code>margin-left</code> para <code>section</code>, es para que haya espacio para <code>nav</code>."
position_example.section.2: "Mira lo que pasa si haces la ventana de tu navegador mas pequeña. ¡Funciona!"
position_example.2: "Este ejemplo funciona porque el contenedor es más alto que el nav. Si no lo fuera, el nav se saldría de su contenedor. En las páginas que vienen a continuación discutiremos otras técnicas para estructurar y hablaremos de sus pros y sus contras."
position_example.footer: "Si usas un header o footer con valor fixed, asegurate de que haya espacio para él. Yo puse un <code>margin-bottom</code> en el <code>body</code>."

float.title: "float"
float.1: "Otra propiedad CSS para estructurar es <code>float</code> (flotar). Float se usa para envolver imágenes con texto, como aquí:"

clear.title: "clear"
clear.floating: "¡Siento que estoy flotando!"
clear.1: "La propiedad <code>clear</code> (despejar) es importante para controlar el comportamiento de los floats. Compara estos dos ejemplos:"
clear.2: "En este caso, el elemento <code>section</code> está después del <code>div</code>. Sin embargo, ya que el <code>div</code> está flotado a la izquierda, esto es lo que pasa: el texto en el elemento <code>section</code> flota alrededor del <code>div</code> y el elemento <code>section</code> rodea todo. ¿Qué pasaría si quisiéramos que <code>section</code> apareciera despues del elemento que está flotando?"
clear.3: "Usando <code>clear</code> hemos movido esta sección hacia abajo del <code>div</code> que está flotando. Para despejar elementos que están flotando a la izquierda debes usar el valor <code>left</code>. También puedes despejar hacia la derecha usando <code>right</code> y hacia ambos lados usando <code>both</code>."

clearfix.title: "clearfix hack"
clearfix.1: "Aquí hay una situación extraña que puede pasar cuando usas float:"
clearfix.2: "Uh oh... esta imagen es mas alta que el elemento que la contiene, y está flotando, ¡y se sale de su contenedor!"
clearfix.3: "Hay una manera de arreglar esto, pero es un poco fea. Se llama <em>clearfix hack</em>."
clearfix.4: "Intentemos añadir esto a nuestro CSS:"
clearfix.5: "Ahora veamos lo que pasa:"
clearfix.6: "¡Mucho mejor!"
clearfix.7: "Esto funciona con navegadores modernos. Si quieres soportar IE6 necesitarás añadir lo siguiente:"
clearfix.8: "Hay navegadores exóticos que requieren atención extra. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">El mundo del clearfixing es bastante espantoso</a>, pero esta simple solución funcionará para la mayoría de los navegadores de hoy en día."

float_layout.title: "estructuras con float"
float_layout.1: "Es muy común hacer estructuras completas usando <code>float</code>. Aquí está la misma estructura que usamos con <code>position</code> hace rato, pero usando <code>float</code>."
float_layout.2: "Este ejemplo funciona igual que el otro. Fíjate que pusimos un <code>clearfix</code> en el contenedor. No se necesita en este ejemplo, pero se necesitaría si <code>nav</code> fuera mas largo que el contenido no flotado."

percent.title: "width y porcentaje"
percent.1: "Porcentaje es una unidad de medida relativa al bloque contenedor. Es muy útil para imágenes: aquí tenemos una imagen que ocupa el 50% de su contenedor en todo momento. ¡Haz la página mas pequeña para que veas lo que pasa!"
percent.2: "¡Puedes incluso usar <code>min-width</code> y <code>max-width</code> para limitar que tan grande o pequeña puede ser la imagen!"
percent.layout.title: "estructuras con porcentaje de ancho"
percent.layout.1: "Puedes usar porcentaje para estructuras, pero esto puede requerir más trabajo. En este ejemplo, el contendido de <code>nav</code> empieza a desenvolverse de una forma desagradable cuando la ventana es muy angosta. Así que todo se reduce a lo que funcione mejor en tu sitio."
percent.layout.2: "Cuando esta estructura es muy angosta, el <code>nav</code> es apretado. Lo peor es que no puedes usar <code>min-width</code> en el nav para arreglarlo, porque la columna de la derecha no lo respetaría."

media_queries.title: "media queries"
media_queries.1: "\"Responsive Design\" (Diseño Responsivo) es la estrategia para hacer que un sitio \"responda\" al navegador y dispositivo en el que se muestra... haciendo que se vea increible pase lo que pase."
media_queries.2: "Los media queries son la herramienta más poderosa para hacer esto. Tomemos la estructura donde usamos porcentajes y transformémosla en una columna cuando la ventana del navegador es muy pequeña para mantener el menú en la barra lateral:"
media_queries.3: "¡Ahora, cuando modificas el tamaño de tu navegador tu estructura se ve mejor que nunca!"
media_queries.4: "Ahora, nuestra estructura se ve increíble en dispositivos móviles. Aquí están <a href=\"http://mediaqueri.es/\">algunos sitios populares que usan media quieries del mismo modo</a>. Hay muchas otras cosas además de <code>min-width</code> y <code>max-width</code> que puedes detectar: mira <a href=\"https://developer.mozilla.org/es/docs/CSS/Media_queries\">la documentación de Mozilla</a> para aprender más."
media_queries.5: "Puedes hacer que tu estructura se vea aun mejor en dispositivos móviles usando <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "Puedes crear una cuadrícula de cajas que llene el navegador armoniosamente. Esto ha sido posible por mucho tiempo usando <code>float</code>, pero ahora con <code>inline-block</code> es aún más fácil. Veamos ejemplos con las dos opciones."
inline_block.hard_way.title: "El método difícil (usando float)"
inline_block.hard_way.box: "¡Estoy flotando!"
inline_block.hard_way.after: "Estoy usando clear para no flotar arriba de las cajas."
inline_block.easy_way.title: "El método fácil (usando inline-block)"
inline_block.easy_way.info: "Puedes lograr el mismo efecto usando <code>display: inline-block;</code>"
inline_block.easy_way.box: "¡Soy inline block!"
inline_block.easy_way.after: "En este caso no tengo que usar <code>clear</code>. ¡Bien!"
inline_block.2: "Para soportar <code>inline-block</code> en <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 y IE7</a> tendrás que trabajar extra. Algunas personas hablan de que <code>inline-block</code> desencadena algo llamado <code>hasLayout</code>, sin embargo, necesitarás saber eso solo si soportas viejos navegadores. Da click en el link anterior acerca de IE6 y IE7 si estás interesado en saber más. De lo contrario, continuemos con el siguiente tema."

inline_block_layout.title: "estructuras con inline-block"
inline_block_layout.1: "También puedes usar el valor <code>inline-block</code> para estructurar un sitio, pero hay algunas cosas que debes tener en cuenta:"
inline_block_layout.caveat.1: "Los elementos <code>inline-block</code> son influenciados por la propiedad <code>vertical-align</code>, la cual quizas quieras establecer como <code>top</code>."
inline_block_layout.caveat.2: "Necesitas establecer el ancho de cada columna."
inline_block_layout.caveat.3: "Si hay un espacio en blanco entre columnas en tu HTML, habrá un vacío entre ellas."
inline_block_layout.tada: "¡Tarán!"

column.title: "columna"
column.1: "Hay un nuevo set de propiedades CSS que te permiten tener múltiples columnas de texto. Echa un vistazo:"
column.2: "Esta propiedad CSS es muy nuevas, así que tendrás que usar prefijos, y no funcionará en <a href=\"http://caniuse.com/#search=column\"> IE9 o en Opera Mini</a>. Para ver mas propiedades relacionadas con columnas, haz <a href=\"http://www.quirksmode.org/css/multicolumn.html\">click aquí</a>. Ahora, sigamos con el siguiente tema."

flexbox.title: "flexbox"
flexbox.1: "La nueva estructura con <code>flexbox</code> está lista para redefinir la manera en la que hacemos estructuras con CSS. Desafortunadamente las especificaciones han cambiado bastante recientemente y su implementación es distinta dependiendo del navegador. De cualquier modo, me gustaría compartir algunos ejemplos, así podrás saber lo que está por venir. Estos ejemplos actualmente funcionan únicamente en Chrome, y se basan en la <a href=\"http://www.w3.org/TR/css3-flexbox/\">última versión estandar</a>."
flexbox.2: "Hay un montón de recursos viejos para usar flexbox. Si quieres aprender más acerca de flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">comienza aquí</a> para saber como identificar si un recurso está actualzado o no. Echa un vistazo al <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">artículo que escribí al respecto con lo último en sintáxis</a>."
flexbox.3: "Hay mucho más que puedes hacer con flexbox; estos son solo unos ejemplos para que te des una idea:"
flexbox.simple.title: "Estructura Simple usando Flexbox"
flexbox.simple.1: "¡Flexbox es muy fácil!"
flexbox.fancy.title: "Estructura fantástica usando Flexbox"
flexbox.fancy.1: "Tendré 200px si hay espacio y me reduciré a 100px si no lo hay, pero nunca menos de eso."
flexbox.fancy.2: "Tendré siempre 200px, sin importar lo que pase."
flexbox.fancy.3: "Llenaré 1/3 del ancho que quede."
flexbox.fancy.4: "Llenaré 2/3 del ancho que quede."
flexbox.centering.title: "Centrando con Flexbox"
flexbox.centering.1: "¡Finalmente es fácil centrar verticalmente con CSS!"

frameworks.title: "frameworks para css"
frameworks.1: "Debido a que las estructuras con CSS son complicadas, hay frameworks que te ayudan a hacerlo fácil. Aquí hay unos cuantos por si gustas echarles un vistazo. Usar un framework es solo una buena idea si hace lo que quieres que tu sitio haga. No son un sustituto para saber como funciona el CSS."
frameworks.2: "¡Y eso es todo! ¡Si tienes comentarios acerca de este sitio, házmelo saber en <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">Twitter</a>!"

about.title: "Acerca de este sitio"
about.credits: "Escrito y desarrollado por <a href=\"http://incompl.com\">Greg Smith</a>. Diseñado por <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. Trabajamos en <a href=\"http://bocoup.com\">Bocoup</a>."
